<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on zhimoe</title><link>https://zhimoe.github.io/tags/python/</link><description>Recent content in python on zhimoe</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sun, 31 Jan 2021 21:45:45 +0800</lastBuildDate><atom:link href="https://zhimoe.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Py Tips for Impatient Dev</title><link>https://zhimoe.github.io/post/py-tips-for-impatient-dev/</link><pubDate>Sun, 31 Jan 2021 21:45:45 +0800</pubDate><guid>https://zhimoe.github.io/post/py-tips-for-impatient-dev/</guid><description>&lt;h2 id="tricks">tricks&lt;/h2>
&lt;h3 id="python的dict中关于equal和hash计算方式会有意外的效果">python的dict中关于equal和hash计算方式会有意外的效果&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a31515">&amp;#39;no&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;yes&amp;#39;&lt;/span>][&lt;span style="color:#00f">True&lt;/span>] &lt;span style="color:#008000"># output?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#00f">True&lt;/span>: &lt;span style="color:#a31515">&amp;#39;yes&amp;#39;&lt;/span>, 1: &lt;span style="color:#a31515">&amp;#39;no&amp;#39;&lt;/span>, 1.0: &lt;span style="color:#a31515">&amp;#39;maybe&amp;#39;&lt;/span>} &lt;span style="color:#008000"># output?&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>“布尔类型是整数类型的子类型,布尔值在几乎所有环境中的行为都类似于值 0 和 1,但在转换为字符串时,分别得到的是字符串 False 或 True.”&lt;br>
&amp;ndash; The Standard Type Hierarchy&lt;/p>
&lt;/blockquote>
&lt;p>由于True,1, 1.0的__eq__和__hash__都一样,所以出现了神奇的结果.&lt;/p></description></item><item><title>如何实现一个拼写检查器[翻译]</title><link>https://zhimoe.github.io/post/spell-correct/</link><pubDate>Sun, 25 Oct 2020 20:01:27 +0800</pubDate><guid>https://zhimoe.github.io/post/spell-correct/</guid><description>&lt;p>谷歌AI负责人norvig在07年写的如何实现一个拼写纠正器的经典博文&lt;a href="https://norvig.com/spell-correct.html">How to Write a Spelling Corrector&lt;/a>.&lt;br>
上面的链接已经是16年更新过了,程序也更新到了python3.&lt;br>
中文版的翻译 &lt;a href="https://blog.csdn.net/suixinsuiyuan33/article/details/69215082">如何实现一个拼写纠正器&lt;/a> 还是基于07年版本的.&lt;/p></description></item><item><title>基于MDX的web词典</title><link>https://zhimoe.github.io/post/mdict-web/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/mdict-web/</guid><description>&lt;p>Mdict项目是一个糅合了MDX词典、ES例句搜索和AI模型翻译的多源搜索功能Web词典.特别适合部署在内网中学习使用或者给孩子学习使用.&lt;br>
python版本增加了一个机器学习模型翻译.rust版本也有模型,但是还没来得及加.&lt;/p>
&lt;h3 id="mdict-py">mdict-py&lt;/h3>
&lt;p>&lt;a href="https://github.com/zhimoe/mdict-py">mdict-py源码&lt;/a>&lt;/p>
&lt;p>Mdict项目是一个糅合了MDX词典、ES例句搜索和AI模型翻译的多源搜索功能Web词典.特别适合部署在内网中学习使用或者给孩子学习使用.&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ol>
&lt;li>自动识别中英文选择对应mdx词典,目前英文词典包含牛津8和朗文4,中文词典包含汉语词典3&lt;/li>
&lt;li>英文尝试拼写纠错功能,动词时态纠错&lt;/li>
&lt;li>如果配置了中文会尝试搜索朗文的例句,模糊搜索,对于有英语基础的同学很有用&lt;/li>
&lt;li>如果配置了AI模型,会使用机器学习模型翻译,翻译结果比较粗糙,但是可以参考&lt;/li>
&lt;/ol></description></item><item><title>Python 4道笔试题</title><link>https://zhimoe.github.io/post/python-interview-questions/</link><pubDate>Thu, 04 Jun 2020 21:31:01 +0800</pubDate><guid>https://zhimoe.github.io/post/python-interview-questions/</guid><description>&lt;p>4道常见的python面试题和解答,以及一些python陷阱的链接.&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;ol>
&lt;li>题目1&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">def&lt;/span> change(v):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v[1] = 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">return&lt;/span> v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a = [1, 2, 3]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(change(a))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(a)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala Python 文件读取跳过转义字符</title><link>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</link><pubDate>Thu, 04 Jun 2020 21:30:31 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</guid><description>&lt;p>在文件读取的时候,会遇到非法转义字符,导致文件按行读取失败.此时可以通过忽略转义字符来解决.本文记录了scala和python的方法.&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>有50G的服务器日志,拆分为几千个txt文件,编码是utf8,使用scala和python按行处理：&lt;/p>
&lt;h3 id="scala">scala&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">def&lt;/span> main(args&lt;span style="color:#00f">:&lt;/span> &lt;span style="color:#2b91af">Array&lt;/span>[&lt;span style="color:#2b91af">String&lt;/span>])&lt;span style="color:#00f">:&lt;/span> &lt;span style="color:#2b91af">Unit&lt;/span> = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">for&lt;/span> (line &lt;span style="color:#00f">&amp;lt;-&lt;/span> &lt;span style="color:#2b91af">Source&lt;/span>.fromFile(&lt;span style="color:#a31515">&amp;#34;./txt1.log&amp;#34;&lt;/span>,&lt;span style="color:#a31515">&amp;#34;UTF8&amp;#34;&lt;/span>).getLines()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">if&lt;/span> (line.contains(&lt;span style="color:#a31515">&amp;#34;ABC&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">//do something
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Matplotlib图例中文乱码解决方案</title><link>https://zhimoe.github.io/post/matplotlib-chinese-garbled-solution/</link><pubDate>Fri, 01 May 2020 19:18:05 +0800</pubDate><guid>https://zhimoe.github.io/post/matplotlib-chinese-garbled-solution/</guid><description>&lt;p>很久以前写的一个答案,四年来一直有人评论感谢,说只有我的方法是有效的.非常意外也很高兴. 也放到博客中里备份吧.&lt;br>
&lt;a href="https://www.zhihu.com/question/25404709/answer/67672003">zhihu.com&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># https://www.zhihu.com/question/25404709/answer/67672003&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">import&lt;/span> matplotlib.font_manager &lt;span style="color:#00f">as&lt;/span> fm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 微软雅黑,如果需要宋体,可以用simsun.ttc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myfont = fm.FontProperties(fname=&lt;span style="color:#a31515">&amp;#39;C:/Windows/Fonts/msyh.ttc&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Linux字体在&amp;#34;/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc&amp;#34;, &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 需要先安装字体&amp;#34;&amp;gt;sudo apt install fonts-noto-cjk -y&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># MacOS中文字体文件在&amp;#34;/System/Library/Fonts/PingFang.ttc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Win10,Linux已测试,MacOS未验证&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">import&lt;/span> matplotlib.pyplot &lt;span style="color:#00f">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt.clf() &lt;span style="color:#008000"># 清空画布&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt.plot([1, 2, 3], [4, 5, 6])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt.xlabel(&lt;span style="color:#a31515">&amp;#34;横轴&amp;#34;&lt;/span>,fontproperties=myfont)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt.ylabel(&lt;span style="color:#a31515">&amp;#34;纵轴&amp;#34;&lt;/span>,fontproperties=myfont)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt.title(&lt;span style="color:#a31515">&amp;#34;pythoner.com&amp;#34;&lt;/span>,fontproperties=myfont)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt.legend([&lt;span style="color:#a31515">&amp;#39;图例&amp;#39;&lt;/span>],prop=myfont)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt.show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Jupyter Notebook Install New Package[翻译]</title><link>https://zhimoe.github.io/post/jupyter-notebook-install-new-package/</link><pubDate>Thu, 01 Nov 2018 19:04:32 +0800</pubDate><guid>https://zhimoe.github.io/post/jupyter-notebook-install-new-package/</guid><description>&lt;h3 id="notes">notes&lt;/h3>
&lt;p>在pycharm写代码中如果使用到新的package,例如&lt;code>numpy&lt;/code>,只需要输入&lt;code>import numpy&lt;/code> 然后ALT+ENTER在提示中选择install new package即可.&lt;/p>
&lt;p>在notebook中,网上的教程都说是&lt;code>!pip install numpy&lt;/code>. 但是这个可能有坑.究其原因是因为:&lt;/p></description></item></channel></rss>