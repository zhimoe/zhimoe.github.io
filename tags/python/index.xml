<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on zhimoe</title><link>https://zhimoe.github.io/tags/python/</link><description>Recent content in python on zhimoe</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sun, 24 Sep 2023 08:47:44 +0800</lastBuildDate><atom:link href="https://zhimoe.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python 异步编程</title><link>https://zhimoe.github.io/post/python-async-programming/</link><pubDate>Sun, 24 Sep 2023 08:47:44 +0800</pubDate><guid>https://zhimoe.github.io/post/python-async-programming/</guid><description>&lt;p>异步编程很难，但却是最近十年所有编程语言在发力的方向。&lt;br>
在面向 CPU 计算的场景下，多线程基本都能吃满 CPU 资源。但是在 IO 场景下，多线程并不能解决问题，大部分时间线程都在等待 IO 调用的返回。&lt;br>
实际上 python 的&lt;a href="https://docs.python.org/3/tutorial/index.html">官方教程&lt;/a>里面并没有 async 编程的内容，而是在&lt;a href="https://docs.python.org/3/library/ipc.html">std lib doc 中网络编程章节&lt;/a>介绍了 asyncio 这个 lib，实际上这也是异步编程的最佳使用场景。&lt;/p>
&lt;p>此外经常会看到“Use async sparingly”,因为异步编程存在染色问题，一旦使用 async，会要求你全链路全部为 async，否则在 block 时 cpu 并无法让出线程资源。&lt;br>
大多数情况，如果出于性能原因不需要异步，线程通常是更简单的替代方案。&lt;/p></description></item><item><title>使用 OpenPyXL 读写 excel 大文件</title><link>https://zhimoe.github.io/post/python-read-large-excel-file/</link><pubDate>Sun, 07 May 2023 19:31:45 +0800</pubDate><guid>https://zhimoe.github.io/post/python-read-large-excel-file/</guid><description>&lt;p>使用 python OpenPyXL 读写 excel 大文件时，有专门的 read_only write-only 模式来提升读写效率。&lt;/p></description></item><item><title>Python Tips for Impatient Dev</title><link>https://zhimoe.github.io/post/python-tips-for-impatient-dev/</link><pubDate>Mon, 31 Jan 2022 21:45:45 +0800</pubDate><guid>https://zhimoe.github.io/post/python-tips-for-impatient-dev/</guid><description>&lt;h2 id="python-tricks">Python tricks&lt;/h2>
&lt;h3 id="f-string-的妙用">f-string 的妙用&lt;/h3>
&lt;p>py3.6 开始，推荐使用 f-string，不要使用&lt;code> %s&lt;/code>或者 &lt;code>&amp;quot;&amp;quot;.format()&lt;/code>.如果接收用户输入，使用 Template 做安全校验。&lt;br>
在 python f-string 中可以通过变量或者表达式后面加=实现打印变量名或者表达式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#c41a16">f&lt;/span>&lt;span style="color:#c41a16">&amp;#39;&lt;/span>&lt;span style="color:#c41a16">{&lt;/span>&lt;span style="color:#000">v&lt;/span>&lt;span style="color:#c41a16">=}&lt;/span>&lt;span style="color:#c41a16">&amp;#39;&lt;/span>) &lt;span style="color:#177500"># 等价 print(f&amp;#39;v={v}&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#c41a16">f&lt;/span>&lt;span style="color:#c41a16">&amp;#39;&lt;/span>&lt;span style="color:#c41a16">{&lt;/span>(&lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">arr&lt;/span>),&lt;span style="color:#000">v&lt;/span>)&lt;span style="color:#c41a16">=}&lt;/span>&lt;span style="color:#c41a16">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考：调式时&lt;code>icecream&lt;/code>比&lt;code>print&lt;/code> &lt;code>log&lt;/code>更好。&lt;/p></description></item><item><title>Python 如何实现一个拼写检查器[翻译]</title><link>https://zhimoe.github.io/post/python-spell-correct/</link><pubDate>Sun, 25 Oct 2020 20:01:27 +0800</pubDate><guid>https://zhimoe.github.io/post/python-spell-correct/</guid><description>&lt;p>谷歌 AI 负责人 norvig 在 07 年写的如何实现一个拼写纠正器的经典博文&lt;a href="https://norvig.com/spell-correct.html">How to Write a Spelling Corrector&lt;/a>.&lt;br>
上面的链接已经是 16 年更新过了，程序也更新到了 python3.&lt;br>
中文版的翻译 &lt;a href="https://blog.csdn.net/suixinsuiyuan33/article/details/69215082">如何实现一个拼写纠正器&lt;/a> 还是基于 07 年版本的。&lt;/p></description></item><item><title>基于 MDX 的 web 词典</title><link>https://zhimoe.github.io/post/python-mdict-web/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/python-mdict-web/</guid><description>&lt;p>Mdict 项目是一个糅合了 MDX 词典、ES 例句搜索和 AI 模型翻译的多源搜索功能 Web 词典。特别适合部署在内网中学习使用或者给孩子学习使用。&lt;br>
python 版本增加了一个机器学习模型翻译.rust 版本也有模型，但是还没来得及加。&lt;/p>
&lt;h3 id="mdict-py">mdict-py&lt;/h3>
&lt;p>&lt;a href="https://github.com/zhimoe/mdict-py">mdict-py 源码&lt;/a>&lt;/p>
&lt;p>Mdict 项目是一个糅合了 MDX 词典、ES 例句搜索和 AI 模型翻译的多源搜索功能 Web 词典。特别适合部署在内网中学习使用或者给孩子学习使用。&lt;/p>
&lt;p>特点：&lt;/p>
&lt;ol>
&lt;li>自动识别中英文选择对应 mdx 词典，目前英文词典包含牛津 8 和朗文 4，中文词典包含汉语词典 3&lt;/li>
&lt;li>英文尝试拼写纠错功能，动词时态纠错&lt;/li>
&lt;li>如果配置了中文会尝试搜索朗文的例句，模糊搜索，对于有英语基础的同学很有用&lt;/li>
&lt;li>如果配置了 AI 模型，会使用机器学习模型翻译，翻译结果比较粗糙，但是可以参考&lt;/li>
&lt;/ol></description></item><item><title>Python 4 道笔试题</title><link>https://zhimoe.github.io/post/python-interview-questions/</link><pubDate>Thu, 04 Jun 2020 21:31:01 +0800</pubDate><guid>https://zhimoe.github.io/post/python-interview-questions/</guid><description>&lt;p>4 道常见的 python 面试题和解答，以及一些 python 陷阱的链接。&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;ol>
&lt;li>题目 1&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">change&lt;/span>(&lt;span style="color:#000">v&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">v&lt;/span>[&lt;span style="color:#1c01ce">1&lt;/span>] &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000">=&lt;/span> [&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">change&lt;/span>(&lt;span style="color:#000">a&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">a&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala Python 文件读取跳过转义字符</title><link>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</link><pubDate>Thu, 04 Jun 2020 21:30:31 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</guid><description>&lt;p>在文件读取的时候，会遇到非法转义字符，导致文件按行读取失败。此时可以通过忽略转义字符来解决。本文记录了 scala 和 python 的方法。&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>有 50G 的服务器日志，拆分为几千个 txt 文件，编码是 utf8，使用 scala 和 python 按行处理：&lt;/p>
&lt;h3 id="scala">scala&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Array&lt;/span>&lt;span style="color:#000">[&lt;/span>&lt;span style="color:#a90d91">String&lt;/span>&lt;span style="color:#000">])&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Unit&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">line&lt;/span> &lt;span style="color:#a90d91">&amp;lt;-&lt;/span> &lt;span style="color:#3f6e75">Source&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">fromFile&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#c41a16">&amp;#34;./txt1.log&amp;#34;&lt;/span>&lt;span style="color:#000">,&lt;/span>&lt;span style="color:#c41a16">&amp;#34;UTF8&amp;#34;&lt;/span>&lt;span style="color:#000">).&lt;/span>&lt;span style="color:#000">getLines&lt;/span>&lt;span style="color:#000">())&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">line&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">contains&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#c41a16">&amp;#34;ABC&amp;#34;&lt;/span>&lt;span style="color:#000">))&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">//do something
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Matplotlib 图例中文乱码解决方案</title><link>https://zhimoe.github.io/post/python-matplotlib-chinese-garbled-solution/</link><pubDate>Fri, 01 May 2020 19:18:05 +0800</pubDate><guid>https://zhimoe.github.io/post/python-matplotlib-chinese-garbled-solution/</guid><description>&lt;p>很久以前写的一个答案，四年来一直有人评论感谢，说只有我的方法是有效的。非常意外也很高兴。也放到博客中里备份吧。&lt;br>
&lt;a href="https://www.zhihu.com/question/25404709/answer/67672003">zhihu.com&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># https://www.zhihu.com/question/25404709/answer/67672003&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">matplotlib.font_manager&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">fm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 微软雅黑，如果需要宋体，可以用 simsun.ttc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">myfont&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">fm&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">FontProperties&lt;/span>(&lt;span style="color:#000">fname&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;C:/Windows/Fonts/msyh.ttc&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># Linux 字体在&amp;#34;/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc&amp;#34;, &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 需要先安装字体&amp;#34;&amp;gt;sudo apt install fonts-noto-cjk -y&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># MacOS 中文字体文件在&amp;#34;/System/Library/Fonts/PingFang.ttc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># Win10,Linux 已测试，MacOS 未验证&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">clf&lt;/span>() &lt;span style="color:#177500"># 清空画布&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>([&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>], [&lt;span style="color:#1c01ce">4&lt;/span>, &lt;span style="color:#1c01ce">5&lt;/span>, &lt;span style="color:#1c01ce">6&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;横轴&amp;#34;&lt;/span>,&lt;span style="color:#000">fontproperties&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">myfont&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;纵轴&amp;#34;&lt;/span>,&lt;span style="color:#000">fontproperties&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">myfont&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">title&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;pythoner.com&amp;#34;&lt;/span>,&lt;span style="color:#000">fontproperties&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">myfont&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">legend&lt;/span>([&lt;span style="color:#c41a16">&amp;#39;图例&amp;#39;&lt;/span>],&lt;span style="color:#000">prop&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">myfont&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">show&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Jupyter Notebook Install New Package[翻译]</title><link>https://zhimoe.github.io/post/python-jupyter-notebook-install-new-package/</link><pubDate>Thu, 01 Nov 2018 19:04:32 +0800</pubDate><guid>https://zhimoe.github.io/post/python-jupyter-notebook-install-new-package/</guid><description>&lt;h3 id="notes">notes&lt;/h3>
&lt;p>在 pycharm 写代码中如果使用到新的 package，例如&lt;code>numpy&lt;/code>,只需要输入&lt;code>import numpy&lt;/code> 然后 ALT+ENTER 在提示中选择 install new package 即可。&lt;/p>
&lt;p>在 notebook 中，网上的教程都说是&lt;code>!pip install numpy&lt;/code>. 但是这个可能有坑。究其原因是因为：&lt;/p></description></item></channel></rss>