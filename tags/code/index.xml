<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code on zhimoe</title><link>https://zhimoe.github.io/tags/code/</link><description>Recent content in code on zhimoe</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sun, 07 May 2023 19:31:45 +0800</lastBuildDate><atom:link href="https://zhimoe.github.io/tags/code/index.xml" rel="self" type="application/rss+xml"/><item><title>使用OpenPyXL读写excel大文件</title><link>https://zhimoe.github.io/post/read-large-excel-file-with-openpyxl/</link><pubDate>Sun, 07 May 2023 19:31:45 +0800</pubDate><guid>https://zhimoe.github.io/post/read-large-excel-file-with-openpyxl/</guid><description>&lt;p>使用python OpenPyXL读写excel大文件时，有专门的read_only write-only模式来提升读写效率。&lt;/p></description></item><item><title>Kotlin Coroutine</title><link>https://zhimoe.github.io/post/kotlin-coroutine/</link><pubDate>Sun, 30 Apr 2023 11:02:29 +0800</pubDate><guid>https://zhimoe.github.io/post/kotlin-coroutine/</guid><description>&lt;pre>&lt;code>A coroutine is an instance of suspendable computation.
&lt;/code>&lt;/pre>
&lt;p>协程是可被挂起的计算的实例. 换句话说协程是一个对象, 这个对象保存着一段可以切换线程的任务 + 当前执行的状态两部分信息.&lt;br>
日常涉及协程的编码, 主要是描述协程的任务和管理多个协程的生命周期、异常处理等.&lt;/p>
&lt;p>Kotlin 使用堆栈帧管理要运行哪个函数以及所有局部变量. 挂起协程时, 系统会复制并保存当前的堆栈帧以供稍后使用. 恢复时, 会将堆栈帧从其保存位置复制回来, 然后函数再次开始运行. 即使代码可能看起来像普通的顺序阻塞请求, 协程也能确保网络请求避免阻塞主线程.&lt;/p></description></item><item><title>云原生Java开发框架Quarkus学习笔记</title><link>https://zhimoe.github.io/post/quarkus-notes/</link><pubDate>Sat, 09 Jul 2022 22:14:10 +0800</pubDate><guid>https://zhimoe.github.io/post/quarkus-notes/</guid><description>&lt;h2 id="什么是-microprofile">什么是 MicroProfile&lt;/h2>
&lt;p>MicroProfile是一个微服务的平台定义, 目标是针对微服务架构优化企业Java开发. 由于JavaEE的标准更新越来越慢, 跟不上Web技术与K8S的发展, 于是一组供应商（包括Tomitribe）决定创建MicroProfile, 这是一个优化的微服务架构平台, 在2016年加入Eclipse基金会.&lt;br>
&lt;a href="https://microprofile.io/compatible/5-0/">MicroProfile&lt;/a>是一组规范, 包含如OpenTracing 、OpenAPI 、RestClient、Config、 FaultTolerance、 CDI等一组标准.当前最新标准是5.0. 各大Java厂商有很多实现, 最有名的就是红帽的Quarkus, 其他实现有Open Liberty和Payara Enterprise.&lt;br>
注意SpringBoot不是MicroProfile规范实现, Boot是独立于MicroProfile和JavaEE规范的, 但是功能上大同小异, Quarkus也提供了Spring注解的支持.&lt;/p></description></item><item><title>Git 的 detatched Head模式和解决问题方法</title><link>https://zhimoe.github.io/post/git-detatched-head/</link><pubDate>Wed, 09 Mar 2022 15:49:09 +0800</pubDate><guid>https://zhimoe.github.io/post/git-detatched-head/</guid><description>&lt;p>有时候commit完代码后&lt;code>git push&lt;/code>会遇到下面的错误&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>To push the &lt;span style="color:#a90d91">history&lt;/span> leading to the current &lt;span style="color:#000">(&lt;/span>detached HEAD&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>错误提示说当前HEAD没有指向任何分支，但是你记得明明有指向一个分支的&lt;/p></description></item><item><title>Python Tips for Impatient Dev</title><link>https://zhimoe.github.io/post/py-tips-for-impatient-dev/</link><pubDate>Mon, 31 Jan 2022 21:45:45 +0800</pubDate><guid>https://zhimoe.github.io/post/py-tips-for-impatient-dev/</guid><description>&lt;h2 id="python-tricks">Python tricks&lt;/h2>
&lt;h3 id="f-string的妙用">f-string的妙用&lt;/h3>
&lt;p>py3.6开始,推荐使用f-string,不要使用&lt;code> %s&lt;/code>或者 &lt;code>&amp;quot;&amp;quot;.format()&lt;/code>.如果接收用户输入,使用Template做安全校验。&lt;br>
在python f-string中可以通过变量或者表达式后面加=实现打印变量名或者表达式:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#c41a16">f&lt;/span>&lt;span style="color:#c41a16">&amp;#39;&lt;/span>&lt;span style="color:#c41a16">{&lt;/span>&lt;span style="color:#000">v&lt;/span>&lt;span style="color:#c41a16">=}&lt;/span>&lt;span style="color:#c41a16">&amp;#39;&lt;/span>) &lt;span style="color:#177500"># 等价print(f&amp;#39;v={v}&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#c41a16">f&lt;/span>&lt;span style="color:#c41a16">&amp;#39;&lt;/span>&lt;span style="color:#c41a16">{&lt;/span>(&lt;span style="color:#a90d91">len&lt;/span>(&lt;span style="color:#000">arr&lt;/span>),&lt;span style="color:#000">v&lt;/span>)&lt;span style="color:#c41a16">=}&lt;/span>&lt;span style="color:#c41a16">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考: 调式时&lt;code>icecream&lt;/code>比&lt;code>print&lt;/code> &lt;code>log&lt;/code>更好。&lt;/p></description></item><item><title>使用speed-measure-webpack-plugin和Happypack优化webpack打包速度</title><link>https://zhimoe.github.io/post/speed-up-angular-build-use-happypack/</link><pubDate>Sun, 12 Sep 2021 18:02:10 +0800</pubDate><guid>https://zhimoe.github.io/post/speed-up-angular-build-use-happypack/</guid><description>&lt;h3 id="问题">问题&lt;/h3>
&lt;p>一个ionic app本地编译需要8分钟,提交到流水线编译耗时需要近40分钟,从日志看到webpack打包步骤耗时最严重.&lt;/p>
&lt;h3 id="排查与解决">排查与解决&lt;/h3>
&lt;p>初步判断是流水线使用的容器CPU性能较弱或者存储mount性能导致的.找流水线同事支持配置了一个纯内存编译流水线,发现还是很慢. 接下来使用webpack的插件&lt;a href="https://www.npmjs.com/package/speed-measure-webpack-plugin">speed-measure-webpack-plugin&lt;/a>监控性能.&lt;/p></description></item><item><title>在githook中调用nodejs脚本</title><link>https://zhimoe.github.io/post/nodejs-as-githook/</link><pubDate>Sun, 22 Aug 2021 21:55:06 +0800</pubDate><guid>https://zhimoe.github.io/post/nodejs-as-githook/</guid><description>&lt;p>如何在git hook中调用nodejs脚本.主要踩坑在于不知道如何在bash中获取node脚本返回值,搜了好大一圈.&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>微服务模式开发中,每个小组维护自己的应用,通过一个nginx入口反向代理所有的子应用,向用户开放一个站点.nginx应用中需要维护各个子应用的代理,即ng.conf中的location.&lt;br>
此外,一个应用需要配置DEV,ST,UAT,PRD四个环境的location.目前的做法是www/ngconf/目录下面分为dev、st、uat、prd四个文件夹,在文件夹内部每个小组各自维护一个conf文件.&lt;br>
每增加一个应用,需要在四个文件夹中自己小组的配置文件添加配置.随着应用越来越多,以及人员流动,会发生不同文件配置相同的location entry.&lt;br>
例如A应用上线一个功能需要依赖B应用,但是新人不知道B已经配置过了,所以又重复添加了一个,导致启动报错.&lt;/p></description></item><item><title>Tour of Rusts Standard Library Traits[翻译]</title><link>https://zhimoe.github.io/post/tour-of-rusts-standard-library-traits/</link><pubDate>Sun, 11 Apr 2021 21:47:02 +0800</pubDate><guid>https://zhimoe.github.io/post/tour-of-rusts-standard-library-traits/</guid><description>&lt;p>关于rust trait非常好的介绍,比rust book详细,系统.&lt;/p></description></item><item><title>如何实现一个拼写检查器[翻译]</title><link>https://zhimoe.github.io/post/spell-correct/</link><pubDate>Sun, 25 Oct 2020 20:01:27 +0800</pubDate><guid>https://zhimoe.github.io/post/spell-correct/</guid><description>&lt;p>谷歌AI负责人norvig在07年写的如何实现一个拼写纠正器的经典博文&lt;a href="https://norvig.com/spell-correct.html">How to Write a Spelling Corrector&lt;/a>.&lt;br>
上面的链接已经是16年更新过了,程序也更新到了python3.&lt;br>
中文版的翻译 &lt;a href="https://blog.csdn.net/suixinsuiyuan33/article/details/69215082">如何实现一个拼写纠正器&lt;/a> 还是基于07年版本的.&lt;/p></description></item><item><title>Java 8 Lambda笔记</title><link>https://zhimoe.github.io/post/java-lambda/</link><pubDate>Thu, 06 Aug 2020 22:49:34 +0800</pubDate><guid>https://zhimoe.github.io/post/java-lambda/</guid><description>&lt;h3 id="问题">问题&lt;/h3>
&lt;p>Java是OOP语言,使用对象封装.由于函数不是一等公民,无法在方法中传递函数/方法. 在Java 8之前,使用匿名类表示行为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 监听器接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#a90d91">interface&lt;/span> &lt;span style="color:#3f6e75">ActionListener&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">actionPerformed&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">ActionEvent&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 使用匿名类传递一个行为
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">button&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">addActionListener&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#a90d91">new&lt;/span> &lt;span style="color:#000">ActionListener&lt;/span>&lt;span style="color:#000">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">actionPerformed&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">Event&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">System&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">out&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">println&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#c41a16">&amp;#34;button clicked&amp;#34;&lt;/span>&lt;span style="color:#000">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Python 4道笔试题</title><link>https://zhimoe.github.io/post/python-interview-questions/</link><pubDate>Thu, 04 Jun 2020 21:31:01 +0800</pubDate><guid>https://zhimoe.github.io/post/python-interview-questions/</guid><description>&lt;p>4道常见的python面试题和解答,以及一些python陷阱的链接.&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;ol>
&lt;li>题目1&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">change&lt;/span>(&lt;span style="color:#000">v&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">v&lt;/span>[&lt;span style="color:#1c01ce">1&lt;/span>] &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000">=&lt;/span> [&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">change&lt;/span>(&lt;span style="color:#000">a&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">print&lt;/span>(&lt;span style="color:#000">a&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala Python 文件读取跳过转义字符</title><link>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</link><pubDate>Thu, 04 Jun 2020 21:30:31 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</guid><description>&lt;p>在文件读取的时候,会遇到非法转义字符,导致文件按行读取失败.此时可以通过忽略转义字符来解决.本文记录了scala和python的方法.&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>有50G的服务器日志,拆分为几千个txt文件,编码是utf8,使用scala和python按行处理：&lt;/p>
&lt;h3 id="scala">scala&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Array&lt;/span>&lt;span style="color:#000">[&lt;/span>&lt;span style="color:#a90d91">String&lt;/span>&lt;span style="color:#000">])&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Unit&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">line&lt;/span> &lt;span style="color:#a90d91">&amp;lt;-&lt;/span> &lt;span style="color:#3f6e75">Source&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">fromFile&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#c41a16">&amp;#34;./txt1.log&amp;#34;&lt;/span>&lt;span style="color:#000">,&lt;/span>&lt;span style="color:#c41a16">&amp;#34;UTF8&amp;#34;&lt;/span>&lt;span style="color:#000">).&lt;/span>&lt;span style="color:#000">getLines&lt;/span>&lt;span style="color:#000">())&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">line&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">contains&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#c41a16">&amp;#34;ABC&amp;#34;&lt;/span>&lt;span style="color:#000">))&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">//do something
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Matplotlib图例中文乱码解决方案</title><link>https://zhimoe.github.io/post/matplotlib-chinese-garbled-solution/</link><pubDate>Fri, 01 May 2020 19:18:05 +0800</pubDate><guid>https://zhimoe.github.io/post/matplotlib-chinese-garbled-solution/</guid><description>&lt;p>很久以前写的一个答案,四年来一直有人评论感谢,说只有我的方法是有效的.非常意外也很高兴. 也放到博客中里备份吧.&lt;br>
&lt;a href="https://www.zhihu.com/question/25404709/answer/67672003">zhihu.com&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># https://www.zhihu.com/question/25404709/answer/67672003&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">matplotlib.font_manager&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">fm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 微软雅黑,如果需要宋体,可以用simsun.ttc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">myfont&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">fm&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">FontProperties&lt;/span>(&lt;span style="color:#000">fname&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;C:/Windows/Fonts/msyh.ttc&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># Linux字体在&amp;#34;/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc&amp;#34;, &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 需要先安装字体&amp;#34;&amp;gt;sudo apt install fonts-noto-cjk -y&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># MacOS中文字体文件在&amp;#34;/System/Library/Fonts/PingFang.ttc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># Win10,Linux已测试,MacOS未验证&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">import&lt;/span> &lt;span style="color:#000">matplotlib.pyplot&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">plt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">clf&lt;/span>() &lt;span style="color:#177500"># 清空画布&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">plot&lt;/span>([&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>], [&lt;span style="color:#1c01ce">4&lt;/span>, &lt;span style="color:#1c01ce">5&lt;/span>, &lt;span style="color:#1c01ce">6&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">xlabel&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;横轴&amp;#34;&lt;/span>,&lt;span style="color:#000">fontproperties&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">myfont&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">ylabel&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;纵轴&amp;#34;&lt;/span>,&lt;span style="color:#000">fontproperties&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">myfont&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">title&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;pythoner.com&amp;#34;&lt;/span>,&lt;span style="color:#000">fontproperties&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">myfont&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">legend&lt;/span>([&lt;span style="color:#c41a16">&amp;#39;图例&amp;#39;&lt;/span>],&lt;span style="color:#000">prop&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">myfont&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">plt&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">show&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rust Ownerships Lifetimes教程</title><link>https://zhimoe.github.io/post/rust-ownership-lifetimes/</link><pubDate>Sat, 22 Feb 2020 15:55:13 +0800</pubDate><guid>https://zhimoe.github.io/post/rust-ownership-lifetimes/</guid><description>&lt;p>some notes on rust ownership,reference,string and &amp;amp;str, and lifetimes&lt;/p></description></item><item><title>SpringBoot应用和Rust应用的Dockerfile最佳实践</title><link>https://zhimoe.github.io/post/dockerfile-best-practices/</link><pubDate>Mon, 03 Feb 2020 11:30:55 +0800</pubDate><guid>https://zhimoe.github.io/post/dockerfile-best-practices/</guid><description>&lt;p>记录spring boot和rust项目的Dockerfile的最佳实践.&lt;/p>
&lt;h2 id="spring-boot应用dockerfile">spring boot应用Dockerfile&lt;/h2>
&lt;p>spring.io提供了一个boot应用的&lt;a href="https://spring.io/guides/topicals/spring-boot-docker">Dockerfile&lt;/a>指导.&lt;br>
不过有个问题,这个Dockerfile使用的maven是项目源码里面copy过去的.在一般企业项目中这么做显然不规范,直接使用maven基础镜像更合理.&lt;/p></description></item><item><title>Docker CMD ENTRYPOINT区别</title><link>https://zhimoe.github.io/post/docker-cmd-entrypoint-diff/</link><pubDate>Sun, 02 Feb 2020 21:10:18 +0800</pubDate><guid>https://zhimoe.github.io/post/docker-cmd-entrypoint-diff/</guid><description>&lt;p>记录docker中exec form和shell form的区别,CMD和ENTRYPOINT区别,以及最佳实践.&lt;/p>
&lt;h2 id="exec-form-vs-shell-form">exec form VS shell form&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span># exec form
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;instruction&amp;gt; [&amp;#34;executable&amp;#34;, &amp;#34;param1&amp;#34;, &amp;#34;param2&amp;#34;, ...]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># shell form
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;instruction&amp;gt; &amp;lt;command&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>scala uniform access principle</title><link>https://zhimoe.github.io/post/scala-uniform-access-principle/</link><pubDate>Fri, 31 Jan 2020 18:40:10 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-uniform-access-principle/</guid><description>&lt;p>虽然代码写的很水,但是我对各种编程语言一直比较感兴趣. 除了工作中使用的Java之外,自己也了解Python,Groovy,Scala,Kotlin,Clojure,Go,Rust.其中Python和Scala在工作中也偶尔使用. 了解不同的编程语言语法对于编程思维的影响还是蛮有意思的.&lt;br>
例如, 只会Java的开发者可能没有听过模式匹配(pattern match).在我学习了Scala之后,我对模式匹配的理解就是更强更优雅的switch+if. 而在我看过rust和elixir语言中关于模式匹配之后,我对模式匹配的理解就完全不一样了.&lt;/p></description></item><item><title>Highlights in Scala for Impatient 2nd</title><link>https://zhimoe.github.io/post/highlights-in-scala-for-impatient-2nd/</link><pubDate>Wed, 15 Jan 2020 21:42:33 +0800</pubDate><guid>https://zhimoe.github.io/post/highlights-in-scala-for-impatient-2nd/</guid><description>&lt;p>key points in scala-for-impatient 2nd book, best book for java developer to use scala in a rush.&lt;br>
scala-for-impatient章节摘要, 这本书对于Java开发者快速上手Scala帮助很大.&lt;/p>
&lt;h3 id="functions">Functions&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>• if expression has a value.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• A block has a value — the value of its last expression.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• The Scala for loop is like an “enhanced” Java for loop.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Semicolons are (mostly) optional.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• The void type is Unit.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Avoid using `return` in a function.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Beware of missing = in a function definition.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Exceptions work just like in Java or C++, but you use a “pattern matching” syntax for catch.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Scala has no checked exceptions.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rust Packages Crates Mod Notes</title><link>https://zhimoe.github.io/post/rust-packages-crates-mod/</link><pubDate>Sun, 12 Jan 2020 20:03:33 +0800</pubDate><guid>https://zhimoe.github.io/post/rust-packages-crates-mod/</guid><description>&lt;p>初学rust对于项目的package和crate的关系,module和文件的关系有点理不清.做了一点笔记.&lt;/p>
&lt;h2 id="packages-and-crates">packages and crates&lt;/h2>
&lt;p>A Cargo.toml is a package. and must have a package name, defined in &lt;code>[package]&lt;/code> table:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#000">package&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">name&lt;/span> = &lt;span style="color:#c41a16">&amp;#34;actix-web&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>git 常用命令备忘录</title><link>https://zhimoe.github.io/post/git-useful-tips/</link><pubDate>Sun, 01 Sep 2019 21:01:06 +0800</pubDate><guid>https://zhimoe.github.io/post/git-useful-tips/</guid><description>&lt;p>记录日常开发中偶尔会遇到的但是总是记不住的git命令.&lt;br>
以下技巧都来自于&lt;a href="https://ohshitgit.com/">oh shit git&lt;/a> 和 &lt;a href="https://stackoverflow.com">stackoverflow&lt;/a>. 版权归作者所有.&lt;/p></description></item><item><title>Scala Collection Tips</title><link>https://zhimoe.github.io/post/scala-collection-tips/</link><pubDate>Sun, 19 May 2019 16:49:14 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-collection-tips/</guid><description>&lt;p>scala collection 提供了一整套独立于Java的高性能集合,使用上非常灵活,所以需要清楚一些常用的方法:&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> reduce fold scan&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 集合的符号方法&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 数组,tuple&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 2.13的集合架构&lt;/li>
&lt;/ul></description></item><item><title>前端静态资源图片优化[翻译]</title><link>https://zhimoe.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/</link><pubDate>Sun, 19 May 2019 11:07:26 +0800</pubDate><guid>https://zhimoe.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/</guid><description>&lt;p>GTmetrix是一个前端页面测试的网站,可以发现你的站点哪些图片加载速度较慢,并针对性的优化.&lt;br>
source:&lt;a href="https://gtmetrix.com/blog/how-to-optimize-images-a-practical-guide/">How to Optimize Images: A Practical Guide&lt;/a>&lt;/p></description></item><item><title>Spring FactoryBean and ContextAware</title><link>https://zhimoe.github.io/post/spring-factorybean-contextaware/</link><pubDate>Thu, 16 May 2019 22:44:38 +0800</pubDate><guid>https://zhimoe.github.io/post/spring-factorybean-contextaware/</guid><description>&lt;p>理解Spring的FactoryBean 和 ContextAware接口.&lt;/p>
&lt;h2 id="factorybean">FactoryBean&lt;/h2>
&lt;p>一句话就是FactoryBean用于返回其他对象实例的,而不是自身类型的实例.&lt;/p></description></item><item><title>通过例子学习Clojure</title><link>https://zhimoe.github.io/post/learn-clojure-by-example/</link><pubDate>Mon, 13 May 2019 15:22:05 +0800</pubDate><guid>https://zhimoe.github.io/post/learn-clojure-by-example/</guid><description>&lt;p>这份笔记试图打造最强的clojure小抄,keep refactoring it&amp;hellip;&lt;/p></description></item><item><title>理解Elasticsearch Query DSL中的JSON结构</title><link>https://zhimoe.github.io/post/elasticsearch-query-dsl/</link><pubDate>Wed, 01 May 2019 10:17:46 +0800</pubDate><guid>https://zhimoe.github.io/post/elasticsearch-query-dsl/</guid><description>&lt;p>理解ES搜索中JSON DSL有助于自己写JSON查询,特别是手写复杂嵌套json.&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> diffs in es 2.x and es 5.x&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> query dsl&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> aggr query&lt;/li>
&lt;/ul></description></item><item><title>Useful Scala Code Snippets</title><link>https://zhimoe.github.io/post/useful-scala-code-snippets/</link><pubDate>Fri, 26 Apr 2019 07:54:00 +0800</pubDate><guid>https://zhimoe.github.io/post/useful-scala-code-snippets/</guid><description>&lt;h2 id="merge-two-map-and-sum-its-values">merge two map and sum its values&lt;/h2>
&lt;p>多个map合并,key相同时则value相加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">map1&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#3f6e75">Map&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">map2&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#3f6e75">Map&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">11&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">map3&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#3f6e75">Map&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">111&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">mapList&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#3f6e75">List&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">map1&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">map2&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">map3&lt;/span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">merged&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#000">mapList&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">reduce&lt;/span>&lt;span style="color:#000">((&lt;/span>&lt;span style="color:#000">m1&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">m2&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">m1&lt;/span> &lt;span style="color:#000">++&lt;/span> &lt;span style="color:#000">m2&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">map&lt;/span> &lt;span style="color:#000">{&lt;/span> &lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">v&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#000">m1&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">getOrElse&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>&lt;span style="color:#000">))&lt;/span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala Future</title><link>https://zhimoe.github.io/post/scala-future/</link><pubDate>Sun, 21 Apr 2019 14:36:36 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-future/</guid><description>&lt;p>some notes on scala future, includes:&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> future&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> executor context&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> await future result&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> callback&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> recover&lt;/li>
&lt;/ul></description></item><item><title>Spring Cache Notes</title><link>https://zhimoe.github.io/post/draft/spring-cache-notes/</link><pubDate>Thu, 18 Apr 2019 09:42:12 +0800</pubDate><guid>https://zhimoe.github.io/post/draft/spring-cache-notes/</guid><description>&lt;p>spring的缓存一些技巧和陷阱&lt;/p></description></item><item><title>Spring Boot Notes</title><link>https://zhimoe.github.io/post/spring-boot-notes/</link><pubDate>Sun, 14 Apr 2019 18:33:22 +0800</pubDate><guid>https://zhimoe.github.io/post/spring-boot-notes/</guid><description>&lt;p>一些容易忘记的spring boot知识要点.&lt;/p>
&lt;blockquote>
&lt;p>注意,.yaml和.yml文件没任何区别.&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置">配置&lt;/h2>
&lt;h2 id="springbootapplication注解">SpringBootApplication注解&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">@SpringBootApplication&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// &amp;lt;=等价=&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">@ComponentScan&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">@EnableAutoConfiguration&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Pattern Matching Anonymous Function</title><link>https://zhimoe.github.io/post/pattern-matching-anonymous-function/</link><pubDate>Sun, 31 Mar 2019 13:10:41 +0800</pubDate><guid>https://zhimoe.github.io/post/pattern-matching-anonymous-function/</guid><description>&lt;p>Scala中很多使用if的地方都可以用match case来替换.常见的就是下面的这种写法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">res&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#000">msg&lt;/span> &lt;span style="color:#a90d91">match&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#000">it&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">it&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">contains&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#c41a16">&amp;#34;H&amp;#34;&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span> &lt;span style="color:#c41a16">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#a90d91">_&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span> &lt;span style="color:#c41a16">&amp;#34;Other&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">//更常见的用法是去匹配参数的模式:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Player&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">String&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">score&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Int&lt;/span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">player&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Player&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#000">player&lt;/span> &lt;span style="color:#a90d91">match&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#3f6e75">Player&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#a90d91">_&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">score&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">score&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">100000&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c41a16">&amp;#34;Get a job, dude!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#3f6e75">Player&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#a90d91">_&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c41a16">&amp;#34;Hey, $name, nice to see you again!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">printMessage&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">player&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Player&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#000">println&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">player&lt;/span>&lt;span style="color:#000">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala Type Class</title><link>https://zhimoe.github.io/post/scala-type-class/</link><pubDate>Sun, 31 Mar 2019 12:58:17 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-type-class/</guid><description>&lt;p>scala type class notes:&lt;br>
&lt;a href="https://scalac.io/typeclasses-in-scala">关于scala type class非常好的文章&lt;/a>&lt;/p></description></item><item><title>Scala 学习笔记</title><link>https://zhimoe.github.io/post/scala-notes/</link><pubDate>Sun, 31 Mar 2019 00:11:50 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-notes/</guid><description>&lt;p>some notes on scala, includes:&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> setup with maven&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> import&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> == and eq&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> case class&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> for&amp;hellip;yield&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> companion object and class&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> method and function(def val)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> _ in scala&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> =&amp;gt; in scala&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> () {} in scala&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> implicit&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> string&lt;/li>
&lt;/ul></description></item><item><title>使用redis的hash优化内存使用[翻译]</title><link>https://zhimoe.github.io/post/%E4%BD%BF%E7%94%A8redis%E7%9A%84hash%E4%BC%98%E5%8C%96%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 31 Mar 2019 00:11:50 +0800</pubDate><guid>https://zhimoe.github.io/post/%E4%BD%BF%E7%94%A8redis%E7%9A%84hash%E4%BC%98%E5%8C%96%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>使用redis的hash优化内存使用&lt;/p>
&lt;h3 id="问题和方案">问题和方案&lt;/h3>
&lt;p>场景: 有3亿张图片放在对象存储(DELL ECS/AMAZON EC2)上面,现在需要保存图片的id-&amp;gt;用户id的映射.最直接的思路是:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#c41a16">&amp;#34;media:1155220&amp;#34;&lt;/span> &lt;span style="color:#c41a16">&amp;#34;user1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#c41a16">&amp;#34;media:1155221&amp;#34;&lt;/span> &lt;span style="color:#c41a16">&amp;#34;user2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样设计key之后3亿张图片需要21GB的内存,因为redis的string是线性增长的.&lt;/p></description></item><item><title>Scala 2 Implicit</title><link>https://zhimoe.github.io/post/scala-implicit/</link><pubDate>Sat, 30 Mar 2019 12:58:17 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-implicit/</guid><description>&lt;h2 id="隐式参数">隐式参数&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">//隐式参数是在调用时可以自动填充的参数, 需要在调用范围内（scope)有一个隐式变量可供填充.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">addInt&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#a90d91">:&lt;/span>&lt;span style="color:#a90d91">Int&lt;/span>&lt;span style="color:#000">)(&lt;/span>&lt;span style="color:#a90d91">implicit&lt;/span> &lt;span style="color:#000">n&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Int&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#000">n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">//需要提供一个隐式变量n
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">implicit&lt;/span> &lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">sn&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">addInt&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#1c01ce">2&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#177500">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">//如果有两个满足类型的隐式变量,则在编译addInt(2)时报错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">//scala的方法中ExecutionContext一般作为implicit参数.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>使用travis自动发布markdown到博客</title><link>https://zhimoe.github.io/post/%E4%BD%BF%E7%94%A8travis%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83markdown%E5%88%B0%E5%8D%9A%E5%AE%A2/</link><pubDate>Sat, 30 Mar 2019 10:56:47 +0800</pubDate><guid>https://zhimoe.github.io/post/%E4%BD%BF%E7%94%A8travis%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83markdown%E5%88%B0%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p>如何使用github pages和github actions构建静态个人博客站点&lt;/p>
&lt;h3 id="update-at-2021">update at 2021&lt;/h3>
&lt;p>更新：github开放action功能后,travis-ci已经没有必要了,目前博客使用zhimoe仓库管理源码,使用action编译后将public目录同步到zhimoe.github.io仓库的gh-pages分支.&lt;br>
注意,由于使用了jsdelivr的cdn功能,切换分支后theme的相关静态文件的path也要修改.&lt;/p>
&lt;p>github给个人和组织免费提供github pages功能. 就是说如果有个repo的名字为 zhimoe.github.io (zhimoe 为你的github username), 那么这个repo里面的master或者gh-pages分支的内容如果存在index.html, 那么其他人可以通过 &lt;a href="https://zhimoe.github.io">https://zhimoe.github.io&lt;/a> 访问这个站点.&lt;/p></description></item><item><title>wsl-docker-environment</title><link>https://zhimoe.github.io/post/wsl-docker-environment/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/wsl-docker-environment/</guid><description>&lt;p>使用wsl,MobaXterm,cmder,docker打造可视化的linux开发环境&lt;/p>
&lt;p>离不开Windows的理由很多,作为后端开发需要使用linux的情况也很多,双系统总归是不方便,而且linux下的GUI体验也没用Win 10好.&lt;br>
如果使用虚拟机,那么文件交换和网络等各种问题也需要解决,对系统的内存要求也更高一些.微软为了让更多的开发人员留在Win10上面,开发了WSL,目前的实际体验已经很棒,&lt;br>
今天介绍一下如何打造一个可视化的linux开发环境&amp;ndash;即在Win10启动linux的GUI软件,例如vs code等.在wsl启动vs code写代码可以有效避免一些Windows和linux的编码和换行问题.&lt;/p>
&lt;p>本教程分为2部分:&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 配置wsl可视化&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 在wsl使用docker&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>以下内容中 &lt;code>wsl&lt;/code>和&lt;code>ubuntu&lt;/code>含义相同,&lt;code>console&lt;/code>和&lt;code>命令行&lt;/code>含义相同.&lt;/p>
&lt;/blockquote></description></item><item><title>Neo4j入门</title><link>https://zhimoe.github.io/post/neo4j-intro/</link><pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/neo4j-intro/</guid><description>&lt;h3 id="neo4j图数据库介绍">neo4j图数据库介绍&lt;/h3>
&lt;p>neo4j是目前排名最高的图数据库,分为商业和社区版本,社区版只支持单机,而且查询的运行时(runtime)不同(cypher runtime:interpreted(社区版),slotted(企业版)). 数据库排名可以在 &lt;a href="https://db-engines.com/en/ranking/graph+dbms">https://db-engines.com/en/ranking/graph+dbms&lt;/a> 查看,下一代最有前景的开源图数据库是dgraph,目前还积极开发中,生产未就绪,等他的Java客户端再成熟一点可以试用.&lt;/p>
&lt;p>neo4j数据库中只有3个概念: Node, Relationship, Properties. Node表示实体类别,使用Label区分,例如一个节点可以有Person/Father等多个标签,Relationship即关系,雇佣关系,父子关系,投资关系,交易关系等. Node和Relationship都可以有Proerties,属性自身不分是属于节点还是属于关系,例如Person可以有属性name,关系也可以用属性name.你可以在neo4j browser左侧看到当前数据库的所有Node Label,Relationship Type,Properties.&lt;/p></description></item><item><title>Jupyter Notebook Install New Package[翻译]</title><link>https://zhimoe.github.io/post/jupyter-notebook-install-new-package/</link><pubDate>Thu, 01 Nov 2018 19:04:32 +0800</pubDate><guid>https://zhimoe.github.io/post/jupyter-notebook-install-new-package/</guid><description>&lt;h3 id="notes">notes&lt;/h3>
&lt;p>在pycharm写代码中如果使用到新的package,例如&lt;code>numpy&lt;/code>,只需要输入&lt;code>import numpy&lt;/code> 然后ALT+ENTER在提示中选择install new package即可.&lt;/p>
&lt;p>在notebook中,网上的教程都说是&lt;code>!pip install numpy&lt;/code>. 但是这个可能有坑.究其原因是因为:&lt;/p></description></item><item><title>Spark Basic</title><link>https://zhimoe.github.io/post/spark-basic/</link><pubDate>Sat, 31 Mar 2018 00:17:30 +0800</pubDate><guid>https://zhimoe.github.io/post/spark-basic/</guid><description>&lt;h2 id="引言">引言&lt;/h2>
&lt;p>大数据计算和普通的程序并无本质区别：数据输入=&amp;gt;计算=&amp;gt;输出和结果的持久化.这里的挑战在于计算的效率和容错性.由于数据输入巨大,计算的效率是基本的要求.为了在通用硬件上高效完成大量计算,唯一的途径就是将计算任务拆分分布式计算.这就引出了新的问题：分布式计算资源的管理（Mesos,YARN）,分布式计算失败后的恢复（容错性）（Spark RDD）,以及分布式的数据输入和保存（分布式文件HDFS）.hadoop生态圈就是为了解决几个问题设计的(YARN,MapR,HDFS).只不过在计算这一环节Spark做的更加高效取代了MapR.所以先看下hadoop的核心两个组件.&lt;/p></description></item><item><title>单元测试如何Mock有参数的void方法</title><link>https://zhimoe.github.io/post/how-test-void-method-with-parameter/</link><pubDate>Sun, 23 Apr 2017 21:51:20 +0800</pubDate><guid>https://zhimoe.github.io/post/how-test-void-method-with-parameter/</guid><description>&lt;p>测试中如果遇到被测试方法调用void方法，在Mockito中改如何处理?&lt;/p></description></item><item><title>java generic</title><link>https://zhimoe.github.io/post/java-generic/</link><pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/java-generic/</guid><description>&lt;h3 id="泛型">泛型&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Tuple&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">S&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span> &lt;span style="color:#000">T&lt;/span> &lt;span style="color:#000">first&lt;/span>&lt;span style="color:#000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span> &lt;span style="color:#000">S&lt;/span> &lt;span style="color:#000">second&lt;/span>&lt;span style="color:#000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 泛型方法也可在非泛型类里面
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">ArrayAlg&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#000">T&lt;/span> &lt;span style="color:#000">getMiddle&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000">...&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">[&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">length&lt;/span> &lt;span style="color:#000">/&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span>&lt;span style="color:#000">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>IO-Java-Stream-Write-Reader</title><link>https://zhimoe.github.io/post/io-java-stream-write-reader/</link><pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/io-java-stream-write-reader/</guid><description>&lt;p>上次总结了java中不同读写文件的方法,这次总结一下基本的IO流.网上的总结大部分是以Stream和Reader、Writer来介绍的.这次从封装层次来介绍.&lt;/p></description></item><item><title>Java 6/7/8中文件读写</title><link>https://zhimoe.github.io/post/io-java-6-7-8-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</link><pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/io-java-6-7-8-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</guid><description>&lt;p>如何在Java中读写文件,这里保留Java6/7版本,但是你永远不应该使用它们,优先使用Path,Files,Paths三个类.&lt;br>
资料：&lt;a href="http://www.javapractices.com/topic/TopicAction.do?Id=42">Reading and writing text files&lt;/a>&lt;/p>
&lt;h2 id="java8最佳实践">Java8最佳实践&lt;/h2>
&lt;p>不要用File对象,改用Path对象,该对象既表示文件路径,也表示文件文本（应该认为文件也是路径的一部分）,对于以前的File,可以File.toPath()得到一个Path对象.&lt;br>
Files是一个静态类,操作文件内容.Paths是静态工具类,操作文件路径,例如拼接文件路径,以前要使用平台无关的分隔符表示：File.pathSeparator, File.separator.&lt;br>
例如,构建一个文件对象:&lt;code>Path path = Paths.get(&amp;quot;~/test/&amp;quot;, &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;a.txt&amp;quot;);&lt;/code>&lt;/p></description></item><item><title>Java-==-and-equals</title><link>https://zhimoe.github.io/post/java--and-equal/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/java--and-equal/</guid><description>&lt;p>samples code and notes on java == and equals&lt;/p></description></item><item><title>Java动态代理</title><link>https://zhimoe.github.io/post/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid><description>&lt;h3 id="好文">好文&lt;/h3>
&lt;p>&lt;a href="http://www.ibm.com/developerworks/cn/java/j-lo-proxy1/">Java 动态代理机制分析及扩展&lt;/a>&lt;/p>
&lt;p>更深入的一篇:&lt;br>
&lt;a href="http://nemotan.github.io/2015/11/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/">java设计模式-动态代理模式&lt;/a>&lt;/p></description></item><item><title>Java注解和注解处理器</title><link>https://zhimoe.github.io/post/java-annotation-processing/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/java-annotation-processing/</guid><description>&lt;h3 id="注解处理">注解处理&lt;/h3>
&lt;p>注解是jdk1.5出现的,但是自定义处理注解的功能是1.6才有的.Element等关于注解源码抽象的支持类都是1.6出现的.&lt;br>
关于注解的定义就不说了,主要说说注解处理&lt;br>
本文根据以下资料并进行部分修改：&lt;br>
&lt;a href="http://www.angelikalanger.com/Conferences/Slides/JavaAnnotationProcessing-JSpring-2008.pdf">JavaAnnotationProcessing&lt;/a>&lt;/p></description></item><item><title>单例模式和序列化</title><link>https://zhimoe.github.io/post/java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BA%8F%E5%88%97%E5%8C%96/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BA%8F%E5%88%97%E5%8C%96/</guid><description>&lt;p>Java单例模式的各种写法和序列化&lt;br>
&lt;a href="http://www.hollischuang.com/archives/205">参考资料&lt;/a>&lt;/p>
&lt;h3 id="饱汉式">饱汉式&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Singleton&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span> &lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#000">Singleton&lt;/span> &lt;span style="color:#000">instance&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span> &lt;span style="color:#000">Singleton&lt;/span> &lt;span style="color:#000">(){}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#000">Singleton&lt;/span> &lt;span style="color:#000">getInstance&lt;/span>&lt;span style="color:#000">()&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">instance&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#a90d91">null&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#000">instance&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">new&lt;/span> &lt;span style="color:#000">Singleton&lt;/span>&lt;span style="color:#000">();&lt;/span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">instance&lt;/span>&lt;span style="color:#000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span> &lt;span style="color:#177500">//饱汉式,使用时创建
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>理解Gradle build脚本结构与语法</title><link>https://zhimoe.github.io/post/understanding-gradle-buildscript/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/understanding-gradle-buildscript/</guid><description>&lt;p>在看这个之前,希望你有用ant或者maven的使用经验,还有,对groovy的语法有一个简单的了解,不懂也没关系,下面会介绍.&lt;br>
理解gradle文件的前提是理解一个重要的groovy概念:closure&lt;/p>
&lt;h4 id="closure">closure&lt;/h4>
&lt;p>一个closure是一个定义在groovy文件中的{}代码块,这个代码块类似js中的匿名函数,它可以被赋值给变量,可以被调用,可以接收参数,还可以作为参数传递给别的函数.&lt;/p>
&lt;p>closure中最重要的两个概念是委托对象和作为参数传递的语法格式（理解gradle文件很重要）.&lt;/p></description></item><item><title>面试题-类加载过程和子类重写父类方法的调用</title><link>https://zhimoe.github.io/post/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%92%8C%E5%AD%90%E7%B1%BB%E9%87%8D%E5%86%99%E7%88%B6%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>https://zhimoe.github.io/post/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%92%8C%E5%AD%90%E7%B1%BB%E9%87%8D%E5%86%99%E7%88%B6%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/</guid><description>&lt;p>最近非常火的一道携程面试题Java&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Base&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">baseName&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#c41a16">&amp;#34;base&amp;#34;&lt;/span>&lt;span style="color:#000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#000">Base&lt;/span>&lt;span style="color:#000">()&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">callName&lt;/span>&lt;span style="color:#000">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">callName&lt;/span>&lt;span style="color:#000">()&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">System&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">out&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">println&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">baseName&lt;/span>&lt;span style="color:#000">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Sub&lt;/span> &lt;span style="color:#a90d91">extends&lt;/span> &lt;span style="color:#000">Base&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">baseName&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#c41a16">&amp;#34;sub&amp;#34;&lt;/span>&lt;span style="color:#000">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">callName&lt;/span>&lt;span style="color:#000">()&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">System&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">out&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">println&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">baseName&lt;/span>&lt;span style="color:#000">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000">[]&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Base&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">new&lt;/span> &lt;span style="color:#000">Sub&lt;/span>&lt;span style="color:#000">();&lt;/span> &lt;span style="color:#177500">// 输出？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java新手如何学习SpringMVC框架</title><link>https://zhimoe.github.io/post/how-do-newbie-learn-spring/</link><pubDate>Fri, 21 Aug 2015 22:02:50 +0800</pubDate><guid>https://zhimoe.github.io/post/how-do-newbie-learn-spring/</guid><description>&lt;p>知乎回答备份,&lt;a href="https://www.zhihu.com/question/21142149/answer/52383396">原答案写于15年&lt;/a>.&lt;br>
6,404 人赞同了该回答&lt;/p></description></item></channel></rss>