<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scala on zhimoe</title><link>https://zhimoe.github.io/tags/scala/</link><description>Recent content in scala on zhimoe</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 04 Jun 2020 21:30:31 +0800</lastBuildDate><atom:link href="https://zhimoe.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml"/><item><title>Scala Python 文件读取跳过转义字符</title><link>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</link><pubDate>Thu, 04 Jun 2020 21:30:31 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</guid><description>&lt;p>在文件读取的时候,会遇到非法转义字符,导致文件按行读取失败.此时可以通过忽略转义字符来解决.本文记录了scala和python的方法.&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>有50G的服务器日志,拆分为几千个txt文件,编码是utf8,使用scala和python按行处理：&lt;/p>
&lt;h3 id="scala">scala&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">def&lt;/span> main(args&lt;span style="color:#00f">:&lt;/span> &lt;span style="color:#2b91af">Array&lt;/span>[&lt;span style="color:#2b91af">String&lt;/span>])&lt;span style="color:#00f">:&lt;/span> &lt;span style="color:#2b91af">Unit&lt;/span> = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">for&lt;/span> (line &lt;span style="color:#00f">&amp;lt;-&lt;/span> &lt;span style="color:#2b91af">Source&lt;/span>.fromFile(&lt;span style="color:#a31515">&amp;#34;./txt1.log&amp;#34;&lt;/span>,&lt;span style="color:#a31515">&amp;#34;UTF8&amp;#34;&lt;/span>).getLines()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">if&lt;/span> (line.contains(&lt;span style="color:#a31515">&amp;#34;ABC&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">//do something
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>scala uniform access principle</title><link>https://zhimoe.github.io/post/scala-uniform-access-principle/</link><pubDate>Fri, 31 Jan 2020 18:40:10 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-uniform-access-principle/</guid><description>&lt;p>虽然代码写的很水,但是我对各种编程语言一直比较感兴趣. 除了工作中使用的Java之外,自己也了解Python,Groovy,Scala,Kotlin,Clojure,Go,Rust.其中Python和Scala在工作中也偶尔使用. 了解不同的编程语言语法对于编程思维的影响还是蛮有意思的.&lt;br>
例如, 只会Java的开发者可能没有听过模式匹配(pattern match).在我学习了Scala之后,我对模式匹配的理解就是更强更优雅的switch+if. 而在我看过rust和elixir语言中关于模式匹配之后,我对模式匹配的理解就完全不一样了.&lt;/p></description></item><item><title>Highlights in Scala for Impatient 2nd</title><link>https://zhimoe.github.io/post/highlights-in-scala-for-impatient-2nd/</link><pubDate>Wed, 15 Jan 2020 21:42:33 +0800</pubDate><guid>https://zhimoe.github.io/post/highlights-in-scala-for-impatient-2nd/</guid><description>&lt;p>key points in scala-for-impatient 2nd book, best book for java developer to use scala in a rush.&lt;br>
scala-for-impatient章节摘要, 这本书对于Java开发者快速上手Scala帮助很大.&lt;/p>
&lt;h3 id="functions">Functions&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>• if expression has a value.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• A block has a value — the value of its last expression.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• The Scala for loop is like an “enhanced” Java for loop.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Semicolons are (mostly) optional.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• The void type is Unit.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Avoid using `return` in a function.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Beware of missing = in a function definition.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Exceptions work just like in Java or C++, but you use a “pattern matching” syntax for catch.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Scala has no checked exceptions.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala Collection Tips</title><link>https://zhimoe.github.io/post/scala-collection-tips/</link><pubDate>Sun, 19 May 2019 16:49:14 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-collection-tips/</guid><description>&lt;p>scala collection 提供了一整套独立于Java的高性能集合,使用上非常灵活,所以需要清楚一些常用的方法:&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> reduce fold scan&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 集合的符号方法&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 数组,tuple&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 2.13的集合架构&lt;/li>
&lt;/ul></description></item><item><title>Useful Scala Code Snippets</title><link>https://zhimoe.github.io/post/useful-scala-code-snippets/</link><pubDate>Fri, 26 Apr 2019 07:54:00 +0800</pubDate><guid>https://zhimoe.github.io/post/useful-scala-code-snippets/</guid><description>&lt;h2 id="merge-two-map-and-sum-its-values">merge two map and sum its values&lt;/h2>
&lt;p>多个map合并,key相同时则value相加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">val&lt;/span> map1 &lt;span style="color:#00f">=&lt;/span> &lt;span style="color:#2b91af">Map&lt;/span>(1 -&amp;gt; 1, 2 -&amp;gt; 2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">val&lt;/span> map2 &lt;span style="color:#00f">=&lt;/span> &lt;span style="color:#2b91af">Map&lt;/span>(1 -&amp;gt; 11, 3 -&amp;gt; 3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">val&lt;/span> map3 &lt;span style="color:#00f">=&lt;/span> &lt;span style="color:#2b91af">Map&lt;/span>(1 -&amp;gt; 111, 3 -&amp;gt; 3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">val&lt;/span> mapList &lt;span style="color:#00f">=&lt;/span> &lt;span style="color:#2b91af">List&lt;/span>(map1, map2, map3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">val&lt;/span> merged &lt;span style="color:#00f">=&lt;/span> mapList.reduce((m1, m2) &lt;span style="color:#00f">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m1 ++ m2.map { &lt;span style="color:#00f">case&lt;/span> (k, v) &lt;span style="color:#00f">=&amp;gt;&lt;/span> k -&amp;gt; (v + m1.getOrElse(k, 0)) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala Future</title><link>https://zhimoe.github.io/post/scala-future/</link><pubDate>Sun, 21 Apr 2019 14:36:36 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-future/</guid><description>&lt;p>some notes on scala future, includes:&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> future&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> executor context&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> await future result&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> callback&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> recover&lt;/li>
&lt;/ul></description></item><item><title>Pattern Matching Anonymous Function</title><link>https://zhimoe.github.io/post/pattern-matching-anonymous-function/</link><pubDate>Sun, 31 Mar 2019 13:10:41 +0800</pubDate><guid>https://zhimoe.github.io/post/pattern-matching-anonymous-function/</guid><description>&lt;p>Scala中很多使用if的地方都可以用match case来替换.常见的就是下面的这种写法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">val&lt;/span> res &lt;span style="color:#00f">=&lt;/span> msg &lt;span style="color:#00f">match&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">case&lt;/span> it &lt;span style="color:#00f">if&lt;/span> it.contains(&lt;span style="color:#a31515">&amp;#34;H&amp;#34;&lt;/span>) &lt;span style="color:#00f">=&amp;gt;&lt;/span> &lt;span style="color:#a31515">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">case&lt;/span> &lt;span style="color:#00f">_&lt;/span> &lt;span style="color:#00f">=&amp;gt;&lt;/span> &lt;span style="color:#a31515">&amp;#34;Other&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">//更常见的用法是去匹配参数的模式:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">case&lt;/span> &lt;span style="color:#00f">class&lt;/span> &lt;span style="color:#2b91af">Player&lt;/span>(name&lt;span style="color:#00f">:&lt;/span> &lt;span style="color:#2b91af">String&lt;/span>, score&lt;span style="color:#00f">:&lt;/span> &lt;span style="color:#2b91af">Int&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">def&lt;/span> message(player&lt;span style="color:#00f">:&lt;/span> &lt;span style="color:#2b91af">Player&lt;/span>) &lt;span style="color:#00f">=&lt;/span> player &lt;span style="color:#00f">match&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">case&lt;/span> &lt;span style="color:#2b91af">Player&lt;/span>(&lt;span style="color:#00f">_&lt;/span>, score) &lt;span style="color:#00f">if&lt;/span> score &amp;gt; 100000 &lt;span style="color:#00f">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;Get a job, dude!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">case&lt;/span> &lt;span style="color:#2b91af">Player&lt;/span>(name, &lt;span style="color:#00f">_&lt;/span>) &lt;span style="color:#00f">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;Hey, $name, nice to see you again!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">def&lt;/span> printMessage(player&lt;span style="color:#00f">:&lt;/span> &lt;span style="color:#2b91af">Player&lt;/span>) &lt;span style="color:#00f">=&lt;/span> println(message(player))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala Type Class</title><link>https://zhimoe.github.io/post/scala-type-class/</link><pubDate>Sun, 31 Mar 2019 12:58:17 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-type-class/</guid><description>&lt;p>scala type class notes:&lt;br>
&lt;a href="https://scalac.io/typeclasses-in-scala">关于scala type class非常好的文章&lt;/a>&lt;/p></description></item><item><title>Scala 2 Implicit</title><link>https://zhimoe.github.io/post/scala-implicit/</link><pubDate>Sat, 30 Mar 2019 12:58:17 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-implicit/</guid><description>&lt;h2 id="隐式参数">隐式参数&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">//隐式参数是在调用时可以自动填充的参数, 需要在调用范围内（scope)有一个隐式变量可供填充.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">def&lt;/span> addInt(i&lt;span style="color:#00f">:&lt;/span>&lt;span style="color:#2b91af">Int&lt;/span>)(&lt;span style="color:#00f">implicit&lt;/span> n&lt;span style="color:#00f">:&lt;/span> &lt;span style="color:#2b91af">Int&lt;/span>) &lt;span style="color:#00f">=&lt;/span> i + n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">//需要提供一个隐式变量n
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">implicit&lt;/span> &lt;span style="color:#00f">val&lt;/span> sn &lt;span style="color:#00f">=&lt;/span> 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addInt(2) &lt;span style="color:#008000">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">//如果有两个满足类型的隐式变量,则在编译addInt(2)时报错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">//scala的方法中ExecutionContext一般作为implicit参数.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>