<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scala on zhimoe</title>
    <link>https://zhimoe.github.io/tags/scala/</link>
    <description>Recent content in scala on zhimoe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 02 Feb 2022 10:19:05 +0800</lastBuildDate>
    
	<atom:link href="https://zhimoe.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala Python 文件读取跳过转义字符</title>
      <link>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</link>
      <pubDate>Thu, 04 Jun 2020 21:30:31 +0800</pubDate>
      
      <guid>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</guid>
      <description>&lt;p&gt;在文件读取的时候,会遇到非法转义字符,导致文件按行读取失败.此时可以通过忽略转义字符来解决.本文记录了scala和python的方法.&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;有50G的服务器日志,拆分为几千个txt文件,编码是utf8,使用scala和python按行处理：&lt;/p&gt;
&lt;h3 id=&#34;scala&#34;&gt;scala&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;])&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a90d91&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#3f6e75&#34;&gt;Source&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fromFile&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c41a16&#34;&gt;&amp;#34;./txt1.log&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#c41a16&#34;&gt;&amp;#34;UTF8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;getLines&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a90d91&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;line&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c41a16&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#177500&#34;&gt;//do something      
&lt;/span&gt;&lt;span style=&#34;color:#177500&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>scala uniform access principle</title>
      <link>https://zhimoe.github.io/post/scala-uniform-access-principle/</link>
      <pubDate>Fri, 31 Jan 2020 18:40:10 +0800</pubDate>
      
      <guid>https://zhimoe.github.io/post/scala-uniform-access-principle/</guid>
      <description>&lt;p&gt;虽然代码写的很水,但是我对各种编程语言一直比较感兴趣. 除了工作中使用的Java之外,自己也了解Python,Groovy,Scala,Kotlin,Clojure,Go,Rust.其中Python和Scala在工作中也偶尔使用. 了解不同的编程语言语法对于编程思维的影响还是蛮有意思的.
例如, 只会Java的开发者可能没有听过模式匹配(pattern match).在我学习了Scala之后,我对模式匹配的理解就是更强更优雅的switch+if. 而在我看过rust和elixir语言中关于模式匹配之后,我对模式匹配的理解就完全不一样了.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Highlights in Scala for Impatient 2nd</title>
      <link>https://zhimoe.github.io/post/highlights-in-scala-for-impatient-2nd/</link>
      <pubDate>Wed, 15 Jan 2020 21:42:33 +0800</pubDate>
      
      <guid>https://zhimoe.github.io/post/highlights-in-scala-for-impatient-2nd/</guid>
      <description>&lt;p&gt;key points in scala-for-impatient 2nd book, best book for java developer to use scala in a rush.
scala-for-impatient章节摘要, 这本书对于Java开发者快速上手Scala帮助很大.&lt;/p&gt;
&lt;h3 id=&#34;functions&#34;&gt;Functions&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;• if expression has a value.
• A block has a value — the value of its last expression.
• The Scala for loop is like an “enhanced” Java for loop.
• Semicolons are (mostly) optional.
• The void type is Unit.
• Avoid using `return` in a function.
• Beware of missing = in a function definition.
• Exceptions work just like in Java or C++, but you use a “pattern matching” syntax for catch.
• Scala has no checked exceptions.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Scala Collection Tips</title>
      <link>https://zhimoe.github.io/post/scala-collection-tips/</link>
      <pubDate>Sun, 19 May 2019 16:49:14 +0800</pubDate>
      
      <guid>https://zhimoe.github.io/post/scala-collection-tips/</guid>
      <description>&lt;p&gt;scala collection 提供了一整套独立于Java的高性能集合,使用上非常灵活,所以需要清楚一些常用的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; reduce fold scan&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 集合的符号方法&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 数组,tuple&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2.13的集合架构&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Useful Scala Code Snippets</title>
      <link>https://zhimoe.github.io/post/useful-scala-code-snippets/</link>
      <pubDate>Fri, 26 Apr 2019 07:54:00 +0800</pubDate>
      
      <guid>https://zhimoe.github.io/post/useful-scala-code-snippets/</guid>
      <description>&lt;h2 id=&#34;merge-two-map-and-sum-its-values&#34;&gt;merge two map and sum its values&lt;/h2&gt;
&lt;p&gt;多个map合并,key相同时则value相加&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;map1&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#3f6e75&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#1c01ce&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#a90d91&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;map2&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#3f6e75&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#1c01ce&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#a90d91&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;map3&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#3f6e75&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#1c01ce&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;111&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#a90d91&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mapList&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#3f6e75&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;map1&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;map2&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;map3&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#a90d91&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;merged&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mapList&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;m1&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;m2&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&amp;gt;&lt;/span&gt;

  &lt;span style=&#34;color:#000&#34;&gt;m1&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;m2&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;m1&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;getOrElse&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Scala Future</title>
      <link>https://zhimoe.github.io/post/scala-future/</link>
      <pubDate>Sun, 21 Apr 2019 14:36:36 +0800</pubDate>
      
      <guid>https://zhimoe.github.io/post/scala-future/</guid>
      <description>&lt;p&gt;some notes on scala future, includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; future&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; executor context&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; await future result&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; callback&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; recover&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Pattern Matching Anonymous Function</title>
      <link>https://zhimoe.github.io/post/pattern-matching-anonymous-function/</link>
      <pubDate>Sun, 31 Mar 2019 13:10:41 +0800</pubDate>
      
      <guid>https://zhimoe.github.io/post/pattern-matching-anonymous-function/</guid>
      <description>&lt;p&gt;Scala中很多使用if的地方都可以用match case来替换.常见的就是下面的这种写法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#a90d91&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;it&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c41a16&#34;&gt;&amp;#34;H&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c41a16&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a90d91&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c41a16&#34;&gt;&amp;#34;Other&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#177500&#34;&gt;//更常见的用法是去匹配参数的模式:
&lt;/span&gt;&lt;span style=&#34;color:#177500&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#3f6e75&#34;&gt;Player&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;score&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#a90d91&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;player&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;Player&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;player&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a90d91&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#3f6e75&#34;&gt;Player&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;score&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;score&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;100000&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#c41a16&#34;&gt;&amp;#34;Get a job, dude!&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a90d91&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#3f6e75&#34;&gt;Player&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#c41a16&#34;&gt;&amp;#34;Hey, $name, nice to see you again!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#a90d91&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printMessage&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;player&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;Player&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;player&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Scala Type Class</title>
      <link>https://zhimoe.github.io/post/scala-type-class/</link>
      <pubDate>Sun, 31 Mar 2019 12:58:17 +0800</pubDate>
      
      <guid>https://zhimoe.github.io/post/scala-type-class/</guid>
      <description>&lt;p&gt;scala type class notes:
&lt;a href=&#34;https://scalac.io/typeclasses-in-scala&#34;&gt;关于scala type class非常好的文章&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scala 2 Implicit</title>
      <link>https://zhimoe.github.io/post/scala-implicit/</link>
      <pubDate>Sat, 30 Mar 2019 12:58:17 +0800</pubDate>
      
      <guid>https://zhimoe.github.io/post/scala-implicit/</guid>
      <description>&lt;h2 id=&#34;隐式参数&#34;&gt;隐式参数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;color:#177500&#34;&gt;//隐式参数是在调用时可以自动填充的参数, 需要在调用范围内（scope)有一个隐式变量可供填充.
&lt;/span&gt;&lt;span style=&#34;color:#177500&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;addInt&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;implicit&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;


&lt;span style=&#34;color:#177500&#34;&gt;//需要提供一个隐式变量n
&lt;/span&gt;&lt;span style=&#34;color:#177500&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a90d91&#34;&gt;implicit&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sn&lt;/span&gt; &lt;span style=&#34;color:#a90d91&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#1c01ce&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;addInt&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#1c01ce&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#177500&#34;&gt;// 3
&lt;/span&gt;&lt;span style=&#34;color:#177500&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#177500&#34;&gt;//如果有两个满足类型的隐式变量,则在编译addInt(2)时报错
&lt;/span&gt;&lt;span style=&#34;color:#177500&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#177500&#34;&gt;//scala的方法中ExecutionContext一般作为implicit参数.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>