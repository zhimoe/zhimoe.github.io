<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scala on zhimoe</title><link>https://zhimoe.github.io/tags/scala/</link><description>Recent content in scala on zhimoe</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 04 Jun 2020 21:30:31 +0800</lastBuildDate><atom:link href="https://zhimoe.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml"/><item><title>Scala Python 文件读取跳过转义字符</title><link>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</link><pubDate>Thu, 04 Jun 2020 21:30:31 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</guid><description>&lt;p>在文件读取的时候，会遇到非法转义字符，导致文件按行读取失败。此时可以通过忽略转义字符来解决。本文记录了 scala 和 python 的方法。&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>有 50G 的服务器日志，拆分为几千个 txt 文件，编码是 utf8，使用 scala 和 python 按行处理：&lt;/p>
&lt;h3 id="scala">scala&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Array&lt;/span>&lt;span style="color:#000">[&lt;/span>&lt;span style="color:#a90d91">String&lt;/span>&lt;span style="color:#000">])&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Unit&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">line&lt;/span> &lt;span style="color:#a90d91">&amp;lt;-&lt;/span> &lt;span style="color:#3f6e75">Source&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">fromFile&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#c41a16">&amp;#34;./txt1.log&amp;#34;&lt;/span>&lt;span style="color:#000">,&lt;/span>&lt;span style="color:#c41a16">&amp;#34;UTF8&amp;#34;&lt;/span>&lt;span style="color:#000">).&lt;/span>&lt;span style="color:#000">getLines&lt;/span>&lt;span style="color:#000">())&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">line&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">contains&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#c41a16">&amp;#34;ABC&amp;#34;&lt;/span>&lt;span style="color:#000">))&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">//do something 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>scala uniform access principle</title><link>https://zhimoe.github.io/post/scala-uniform-access-principle/</link><pubDate>Fri, 31 Jan 2020 18:40:10 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-uniform-access-principle/</guid><description>&lt;p>虽然代码写的很水，但是我对各种编程语言一直比较感兴趣。除了工作中使用的 Java 之外，自己也了解 Python,Groovy,Scala,Kotlin,Clojure,Go,Rust.其中 Python 和 Scala 在工作中也偶尔使用。了解不同的编程语言语法对于编程思维的影响还是蛮有意思的。&lt;br>
例如，只会 Java 的开发者可能没有听过模式匹配 (pattern match).在我学习了 Scala 之后，我对模式匹配的理解就是更强更优雅的 switch+if. 而在我看过 rust 和 elixir 语言中关于模式匹配之后，我对模式匹配的理解就完全不一样了。&lt;/p></description></item><item><title>Highlights in Scala for Impatient 2nd</title><link>https://zhimoe.github.io/post/scala-for-impatient-2nd-highlights/</link><pubDate>Wed, 15 Jan 2020 21:42:33 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-for-impatient-2nd-highlights/</guid><description>&lt;p>key points in scala-for-impatient 2nd book, best book for java developer to use scala in a rush.&lt;br>
scala-for-impatient 章节摘要，这本书对于 Java 开发者快速上手 Scala 帮助很大。&lt;/p>
&lt;h3 id="functions">Functions&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>• if expression has a value.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• A block has a value — the value of its last expression.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• The Scala for loop is like an “enhanced” Java for loop.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Semicolons are (mostly) optional.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• The void type is Unit.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Avoid using `return` in a function.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Beware of missing = in a function definition.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Exceptions work just like in Java or C++, but you use a “pattern matching” syntax for catch.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>• Scala has no checked exceptions.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala Collection Tips</title><link>https://zhimoe.github.io/post/scala-collection-tips/</link><pubDate>Sun, 19 May 2019 16:49:14 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-collection-tips/</guid><description>&lt;p>scala collection 提供了一整套独立于 Java 的高性能集合，使用上非常灵活，所以需要清楚一些常用的方法：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> reduce fold scan&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 集合的符号方法&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 数组，tuple&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 2.13 的集合架构&lt;/li>
&lt;/ul></description></item><item><title>Useful Scala Code Snippets</title><link>https://zhimoe.github.io/post/scala-useful-snippets/</link><pubDate>Fri, 26 Apr 2019 07:54:00 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-useful-snippets/</guid><description>&lt;h2 id="merge-two-map-and-sum-its-values">merge two map and sum its values&lt;/h2>
&lt;p>多个 map 合并，key 相同时则 value 相加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">map1&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#3f6e75">Map&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">map2&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#3f6e75">Map&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">11&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">map3&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#3f6e75">Map&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">111&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">mapList&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#3f6e75">List&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">map1&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">map2&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">map3&lt;/span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">merged&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#000">mapList&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">reduce&lt;/span>&lt;span style="color:#000">((&lt;/span>&lt;span style="color:#000">m1&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">m2&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">m1&lt;/span> &lt;span style="color:#000">++&lt;/span> &lt;span style="color:#000">m2&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">map&lt;/span> &lt;span style="color:#000">{&lt;/span> &lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#000">-&amp;gt;&lt;/span> &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">v&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#000">m1&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">getOrElse&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>&lt;span style="color:#000">))&lt;/span> &lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala Future</title><link>https://zhimoe.github.io/post/scala-future/</link><pubDate>Sun, 21 Apr 2019 14:36:36 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-future/</guid><description>&lt;p>some notes on scala future, includes:&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> future&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> executor context&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> await future result&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> callback&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> recover&lt;/li>
&lt;/ul></description></item><item><title>Pattern Matching Anonymous Function</title><link>https://zhimoe.github.io/post/scala-pattern-matching-anonymous-function/</link><pubDate>Sun, 31 Mar 2019 13:10:41 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-pattern-matching-anonymous-function/</guid><description>&lt;p>Scala 中很多使用 if 的地方都可以用 match case 来替换。常见的就是下面的这种写法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">res&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#000">msg&lt;/span> &lt;span style="color:#a90d91">match&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#000">it&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">it&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#000">contains&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#c41a16">&amp;#34;H&amp;#34;&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span> &lt;span style="color:#c41a16">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#a90d91">_&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span> &lt;span style="color:#c41a16">&amp;#34;Other&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">//更常见的用法是去匹配参数的模式：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Player&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">String&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">score&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Int&lt;/span>&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">player&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Player&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#000">player&lt;/span> &lt;span style="color:#a90d91">match&lt;/span> &lt;span style="color:#000">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#3f6e75">Player&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#a90d91">_&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">score&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">score&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">100000&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c41a16">&amp;#34;Get a job, dude!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#3f6e75">Player&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#a90d91">_&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c41a16">&amp;#34;Hey, $name, nice to see you again!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">printMessage&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">player&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Player&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#000">println&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">player&lt;/span>&lt;span style="color:#000">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala Type Class</title><link>https://zhimoe.github.io/post/scala-type-class/</link><pubDate>Sun, 31 Mar 2019 12:58:17 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-type-class/</guid><description>&lt;p>scala type class notes:&lt;br>
&lt;a href="https://scalac.io/typeclasses-in-scala">关于 scala type class 非常好的文章&lt;/a>&lt;/p></description></item><item><title>Scala 2 Implicit</title><link>https://zhimoe.github.io/post/scala-implicit/</link><pubDate>Sat, 30 Mar 2019 12:58:17 +0800</pubDate><guid>https://zhimoe.github.io/post/scala-implicit/</guid><description>&lt;h2 id="隐式参数">隐式参数&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">//隐式参数是在调用时可以自动填充的参数，需要在调用范围内（scope) 有一个隐式变量可供填充。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">def&lt;/span> &lt;span style="color:#000">addInt&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#a90d91">:&lt;/span>&lt;span style="color:#a90d91">Int&lt;/span>&lt;span style="color:#000">)(&lt;/span>&lt;span style="color:#a90d91">implicit&lt;/span> &lt;span style="color:#000">n&lt;/span>&lt;span style="color:#a90d91">:&lt;/span> &lt;span style="color:#a90d91">Int&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#000">n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">//需要提供一个隐式变量 n
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">implicit&lt;/span> &lt;span style="color:#a90d91">val&lt;/span> &lt;span style="color:#000">sn&lt;/span> &lt;span style="color:#a90d91">=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">addInt&lt;/span>&lt;span style="color:#000">(&lt;/span>&lt;span style="color:#1c01ce">2&lt;/span>&lt;span style="color:#000">)&lt;/span> &lt;span style="color:#177500">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">//如果有两个满足类型的隐式变量，则在编译 addInt(2) 时报错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">//scala 的方法中 ExecutionContext 一般作为 implicit 参数。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>