<search>
    
     <entry>
        <title>在githook中调用nodejs脚本</title>
        <url>https://zhimoe.github.io/post/nodejs-as-githook/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>nodejs</tag>
        </tags>
        <content type="html"> 如何在git hook中调用nodejs脚本。主要踩坑在于不知道如何在bash中获取node脚本返回值，搜了好大一圈。
背景 微服务模式开发中，每个小组维护自己的应用，通过一个nginx入口反向代理所有的子应用，向用户开放一个站点。nginx应用中需要维护各个子应用的代理，即ng.conf中的location。 此外，一个应用需要配置DEV,ST,UAT,PRD四个环境的location。目前的做法是www/ngconf/目录下面分为dev、st、uat、prd四个文件夹，在文件夹内部每个小组各自维护一个conf文件。 每增加一个应用，需要在四个文件夹中自己小组的配置文件添加配置。随着应用越来越多，以及人员流动，会发生不同文件配置相同的location entry。 例如A应用上线一个功能需要依赖B应用，但是新人不知道B已经配置过了，所以又重复添加了一个，导致启动报错。
需求 入口应用是一个nodejs应用，自然选择了js脚本检查conf文件location path配置是否重复。
实现 在git hook目录下，新增一个pre-commit文件,添加内容：
#!/usr/bin/sh # 检查项目中同一个目录下面的nginx conf 所有location是否重复 if [ -e ./ngconf_check.js ]; then node ngconf_check.js if [[ $? != 0 ]]; then echo &amp;gt;&amp;amp;2 fix duplicate location entry in nginx conf exit 1 fi fi # 如果项目有自定义pre-commit，执行 if [ -e ./.git/hooks/pre-commit ]; then ./.git/hooks/pre-commit &amp;#34;$@&amp;#34; fi exit 0 要点： bash中$?表示获取上命令的返回值。这里获得的是js脚本的process.exit(code)返回的code。 默认返回是0。
ngconf_check.js：
// 检查ng conf是否有重复的location entry const fs = require(&amp;#39;fs&amp;#39;); const path = require(&amp;#39;path&amp;#39;); const ConfEnvDirs = new Set(); ConfEnvDirs.add(&amp;#39;dev&amp;#39;); ConfEnvDirs.add(&amp;#39;st&amp;#39;); ConfEnvDirs.add(&amp;#39;uat&amp;#39;); ConfEnvDirs.add(&amp;#39;prd&amp;#39;); const NgconfPath = &amp;#39;www/ngconf&amp;#39;; let result = &amp;#39;pass&amp;#39;; countLocationInDir(NgconfPath); if(result !== &amp;#39;pass&amp;#39;){ process.exit(1);//向bash返回1 } /** * * @param rootPath */ function countLocationInDir(rootPath) { if (!fs.existsSync(rootPath)) return; let dirs = fs.readdirSync(rootPath); dirs.forEach(dir =&amp;gt; { let envDir = path.join(rootPath, dir); //只处理四个环境目录下的conf文件,每个目录用一个map记录  const LocationEntryMap = new Map();//location entry -&amp;gt; file,line  if (!(fs.statSync(envDir).isDirectory() &amp;amp;&amp;amp; ConfEnvDirs.has(dir))) { return; } let confFiles = fs.readdirSync(envDir); confFiles.forEach(filename =&amp;gt; { let fullPath = path.join(envDir, filename); if (fs.lstatSync(fullPath).isFile() &amp;amp;&amp;amp; /[\w\W.].conf$/.test(filename)) { countLocationsInFile(fullPath, LocationEntryMap); } }); }); } /** * * @param confFile * @param countMap */ function countLocationsInFile(confFile, countMap) { let lines = fs.readFileSync(confFile, &amp;#34;utf-8&amp;#34;) .split(&amp;#34;\n&amp;#34;) .filter(Boolean); lines.forEach((line, lineNumber) =&amp;gt; { if (line.trim().startsWith(&amp;#34;location&amp;#34;)) { const arr = line.trim().split(&amp;#39; &amp;#39;); const locationEntry = arr[1]; const entryInfo = `${confFile}, at line:${lineNumber}`; if (countMap.has(locationEntry)) { console.log(`ERROR: duplicate location entry: ${locationEntry}`); console.log(`location 1:${countMap.get(locationEntry)}`); console.log(`location 2:${entryInfo}`); //修改result变量  result=&amp;#39;error&amp;#39;; } else { countMap.set(locationEntry, entryInfo); } } }); } </content>
    </entry>
    
     <entry>
        <title>开源与心理健康[翻译]</title>
        <url>https://zhimoe.github.io/post/open-source-mental-health/</url>
        <categories>
          <category>翻译</category>
        </categories>
        <tags>
          <tag>开源</tag><tag>心理健康</tag>
        </tags>
        <content type="html"> 原文-Open Source and Mental Health
我一位亲爱的朋友,也是高产的Redox OS贡献者jD91mZM2在2021年3月去世了，年仅18岁。他参与了2018、2019和2020年的Redox OS夏季代码活动。他在开发Redox OS的各个方面都做出了贡献，从内核，到relibc，到移植程序。他的工作详细介绍可以在Redox OS新闻中署名为jD91mZM2的帖子看到。
这个帖子可能是黑暗的、深沉的、沉重的、原始的、未经编辑的。如果你和我们中的许多人一样有自己的问题，请随时与我联系：https://twitter.com/jeremy_soller。在这种情况下，我不建议阅读这篇文章的其他内容。我的结论是，开源要成为可持续发展，还有大量的工作要做，而其中很大一部分是对社区及其成员的健康的关怀。
反思 昨天，另一个贡献者给我发了消息，说jD91mZM2已经长时间离线，而且也没有回复邮件。我通过我所掌握的信息进行了联系，但无济于事。我把他的真实姓名告诉了另一位贡献者，后者找到了他的讣告。我们验证了他的名字、地点和出生日期是否相符。虽然没有列出死因，但我相信我们找到的证据表明他是在精神疾病发作后自杀。
在得知这一切后，我感到很震惊。这样一个多产的贡献者，不仅对Redox，而且对许多项目都有贡献，怎么会觉得死亡比生命更重要？这是一个能力无穷的人，而且直到最近，他似乎还能很好地把握自己的生活。但我活得越久，就越意识到这可能是一个极大的幻觉，事情会迅速恶化。
我最后一次与jD91mZM2交流是在二月，在他去世前一个月。这次交流纯粹是技术性的，关于Redox内核的arch64端口。我不禁想到，这也许是他决定选择死亡的一个因素。
在开源工作中，我们经常强调好代码的重要性。毕竟，每个开源项目的交付物，都是源代码，对吧？ 但我们常常忘记，好的代码是由优秀的人编写的，而留住这些人并让他们保持快乐，应该是任何项目维护者的首要考虑。
心理健康问题的发作有很多方面。一方面，精神疾病通常有遗传因素。另一方面，这些遗传的前兆通常需要慢性和急性的环境触发因素。这些慢性诱因可以是长期的不良家庭或工作环境，并导致精神疾病本身的表现。急性诱因可能是，例如，与某人发生争执，导致精神疾病发作。这些发作可能严重到足以克服生存的极端本能，导致自杀。
在这种情况下，自杀并不是一种软弱的表现。事实上，它是一种极端信念和力量的展示。即使在精神疾病的背景下，大脑的某些部分通常不受影响。这些部分在进化过程中非常原始，我们几乎没有意识到对它们的控制。企图自杀需要克服有意识的求生欲望。要成功，就是要克服极端的潜意识欲望。这意味着，对于自杀，往往是最聪明、最有能力的人才能够做到。
这种对有能力的人的反选择是一种可怕的流行病。人类总体上迫切需要人为地解决长期存在的问题。以气候变化为例。在每年80万自杀的人中，平均来说也许比我们其他人更有能力，如果有几个人在开发核聚变发电方面起到了作用，那会怎么样？
然而，我们作为一个社会已经采取了这样的立场：这些事件是一种不可阻挡的力量。导致自杀的因素是内部的，而不是外部的。原则上，我拒绝相信这一点。对于每一个问题，我们都必须寻找原因并加以缓解，即使最后不可能做到。
因此，我不得不审视自己的行为，看看有什么可以做得不同。看看我是否可以挽救一个人的生命，以及看看我在未来可以挽救哪些生命。
开源与心理健康 开源的某些方面似乎吸引了最奇怪的人类，包括我自己。这群人坚持所有的东西都是可检查的，这也许是由强迫症行为所驱动的。而那些容易出现这种行为的人，往往会从其他疾病中继承下来。多动症、自闭症、双相情感障碍、抑郁症和其他疾病在开放源码贡献者中非常普遍。
因此，开源社区中也明显缺乏软技能。这显然有分裂社区和将开源本身与 &amp;ldquo;正常 &amp;ldquo;世界隔离的效果。对我们来说，幸运的是，开放源代码最终成为一个有利可图的行业。这种资本的注入导致了开源领域人才的显著多样化。
然而，这也是有代价的。那些不符合开源项目新的商业利益的人往往被抛在一边。由于与原始维护者的分歧导致项目本身出现难以克服的变化，项目被进一步划分为分叉上的分叉。我自己也参与了所有这些方面的工作。
在大多数情况下，都缺乏对人类成本的调查。调查开源贡献者中众多的心理健康事件，并试图找出一些共同的因素。有时这些事件会导致新的项目，有时会导致贡献者精疲力尽，然后离开开放源码，有时会导致自杀。
我们必须认识到我们在创造导致精神疾病的慢性压力以及导致危险发作的急性压力方面的作用。
我自己的旅程 我对精神疾病没有免疫力。我经常收到这样的信息：&amp;ldquo;你似乎把你的事情都控制住了，你是怎么做到的？&amp;rdquo; 残酷的事实是，我怀疑我们中是否有人真的做到了。而我们对 &amp;ldquo;控制 &amp;ldquo;的定义可能是非常不同的。拥有成功的项目并不等同于拥有普遍的幸福。
我不得不承认，我现在比以前幸福多了。因此，也许与一般人相比，我确实有事情在控制之中。我的生活一直是治疗师、精神病医生、药物和隔离的奥德赛。它本来很容易像其他人一样结束。我很幸运地找到了我的慢性压力源，并尽职尽责地消除它们。
我的大学一年&amp;ndash;与jD91mZM2决定结束自己生命的时间差不&amp;ndash;特别艰难。我的体重增加了近50磅。我和另外三个室友住在一起，其中两个也早逝了。我交替使用多动症药物、抗抑郁药，甚至吸烟&amp;ndash;以寻找能 &amp;ldquo;修复 &amp;ldquo;我的方法。在整个过程中，我一直在编程，为此常常忽略了我的学校工作。
在上大学之前，我曾在卓尔医疗公司担任实习生，编写除颤器软件。我在这项工作中拥有两项专利。老实说，在对计算机的理解上，我比别人高出一截。我也对自己说实话，在对人的理解方面，我比别人差了一大截，包括我自己。
在那段时间里，我与研发部的副总裁建立了关系，他成了我事实上的老板。大一快结束时，他联系我，问我是否想继续工作。我答应了。
大二的时候，我的情况非常不同。我把大部分时间花在写软件上，并且赚了不少钱。我对学校没有兴趣。我有几门课不及格，但高分通过了许多高水平的CS课程。我很快就从大学退学，全职从事软件工程。
这对我的心理健康产生了巨大的积极影响。我降了体重。与我大学的其他校友保持联系，并最终通过他们认识了我的妻子。我们一起买了一套房子。我开始了Redox操作系统。我的妻子和我结婚了。我开始在System76工作。我的妻子和我有一个漂亮的女儿。从大二开始，我从来没有想过自己的心理健康问题，也不需要去治疗或用药。我所有的压力都消失了。
一个人的心理健康成功并不总是能复刻成其他人的成功。在这一历程中，我创造和破坏了（通过忽视）数百种关系。我不得不承认，虽然我很快乐，但我有一种倾向，会在别人身上造成相当大的反差。我保留了给我带来快乐的关系，而忽略了那些需要努力的关系。而在某些时候，也许我忘记了与jD91mZM2保持联系，确保他找到与我一样的幸福。
一个解决方案？ 没有解决方案，每个案例都是不同的。但我觉得有必要检查一下这些年来我失去的许多人，我希望你也这样做。我们仍然处于了解人类思想的黑暗时代，我们越是互相检查，我们就会做得越好。我知道我本可以有所作为，如果我多做一点的话。也许不是为了jD91mZM2，而是为了有同样感觉的人。我不会再以他们所写的代码来评价贡献者。代码不会自己写，而写代码的人甚至比 &amp;ldquo;开源 &amp;ldquo;本身更需要维护。
</content>
    </entry>
    
     <entry>
        <title>买房装修总结</title>
        <url>https://zhimoe.github.io/post/house-buy-tips/</url>
        <categories>
          <category>生活</category>
        </categories>
        <tags>
          <tag>买房</tag>
        </tags>
        <content type="html"> 简单记录一下自己买房和装修的一点经验。
买房 自己买房比较离奇，杭州开始实行摇号的半年后，端午节在老家刷微信，看到有个红盘有6000多人报名，感觉买房都要开始碰运气了想到了车牌的悲剧，于是返杭后下车就去那个楼盘看了一下，小区旁边在修地铁，看了几眼沙盘，第二天就借钱登记摇号了，没想到第一次就中了。现在回想起就做梦一样。网上关于如何买房的经验特别多，例如杭州房产知识扫盲,上海买房等等。 这些我都没用上。 这里说说自己的一些经验和踩坑。
 户型方正通透干湿分离这些网上都会说。提醒的是认真看沙盘旁边每栋楼的说明挂幅。 挂幅下面会有小字，说明每栋楼的一些坑，例如一些设备平台在哪栋楼（噪音），楼的腰线在几楼（腰线只是为了楼外观好看，但是非常影响该层的采光），选的时候要避开那些楼层。 如果选择低层的话，或者你的号码靠后只能买低层，看下光照时间测评，同一栋楼的不同单元的光照时间都会有所不同的，特别是一些凹凸造型的楼面。我自己的房子就是客厅采光不好，卧室很好。优先应该考虑客厅采光好的户型。 买房的时候如果预算足够，一定买边套，因为中间套的小户型客厅采光和隔音（楼上楼下电梯过道的走路说话声都会从厨房或者厕所窗户闯进来，非常清晰），厕所隐私性等都有很大问题。这点是我最后悔的，当时没经验以为自己贷款额度有限，首付也基本是借的，压力很大，满脑子就是要总价低的。 其实隔壁夹边套（两栋楼连在一起的边套，南北通透但是没有侧面窗）才多10平，总价多25万而已，客厅采光，私密性都好很多。主要还是太仓促了。 当然边套很多是90方以上的，除了总价，契税和卖出时各种费用会高不少，自己量力而行，如果边套是89的，不要犹豫！  装修 因为限价，杭州的新房精装修等于毛坯，我这个交付的时候没有空调，灯还是白炽灯。
 第一次买房务必请一个验房师，术业有专攻，千万不要网上看了点收房验房攻略就自信满满自己去收房，等到装修一半又发现一堆问题。 装修顺序很重要，优先考虑打孔，很多业主都是装修尾声去买空调，安装时发现需要重新打孔，墙布已经贴好了，弄破很心疼。还有业主给阳台贴了瓷砖（交付是乳胶漆），买了带新风的客厅空调管道太大需要重新打孔，不小心打破水管，需要重新敲掉2块瓷砖。非常费事。 拿到水电图，如果没有，打孔和物业(或者房修)说一声，让他们告诉哪里打孔，这样打破水管让他们修。 网上买家电不一定比实体店便宜，我在国美买了美的colmo的空调，看淘宝最便宜也比实体店贵三千。 如果不懂设计，千万不要乱选墙的颜色，自己当时晚上在灯光下面选了一个灰蓝墙布做主色， 结果施工当天发现在日光下是水蓝，只能施工当天临时加钱换颜色，还耽误了进度。 墙布样品因为面积小，颜色和实际上墙效果相差甚远，日光和灯光下也不一样。 而且，墙面的颜色对于后期买家具，沙发和窗帘的影响非常大。 没有十足把握的直接选白色或者极浅灰。 采光特别好的才建议选浅灰， 因为上墙后灰色会变重！ 优先考虑乳胶漆，自己选了硅藻泥质感的墙布，确实质感很好，也好看。但是感觉容易积灰，虽然防水，但是布面不平凹处根本擦不掉。 而且油漆的优势还可以单面墙修复。 现在都是智能家具，门锁冰箱空调都有app，手机遥控聊胜于无，所以家里宽带可以提前开通。 如果是自己布置家具， 建议不要着急安装防倒装置，等家具全部摆放完适应几天再决定，极大可能会调整家具位置。 </content>
    </entry>
    
     <entry>
        <title>Tour of Rusts Standard Library Traits</title>
        <url>https://zhimoe.github.io/post/tour-of-rusts-standard-library-traits/</url>
        <categories>
          <category>编程</category><category>翻译</category>
        </categories>
        <tags>
          <tag>code</tag>
        </tags>
        <content type="html"> 原文Tour of Rust&amp;rsquo;s Standard Library Traits 关于rust trait非常好的介绍，比rust book详细，系统。
Tour of Rust&amp;rsquo;s Standard Library Traits Table of Contents
 Intro Trait Basics  Trait Items  Self Functions Methods Associated Types Generic Parameters Generic Types vs Associated Types   Scope Derive Macros Default Impls Generic Blanket Impls Subtraits &amp;amp; Supertraits Trait Objects Marker Traits Auto Traits Unsafe Traits   Auto Traits  Send &amp;amp; Sync Sized   General Traits  Default Clone Copy Any   Formatting Traits  Display &amp;amp; ToString Debug   Operator Traits  Comparison Traits  PartialEq &amp;amp; Eq Hash PartialOrd &amp;amp; Ord   Arithmetic Traits  Add &amp;amp; AddAssign   Closure Traits  FnOnce, FnMut, &amp;amp; Fn   Other Traits  Deref &amp;amp; DerefMut Index &amp;amp; IndexMut Drop     Conversion Traits  From &amp;amp; Into   Error Handling  Error   Conversion Traits Continued  TryFrom &amp;amp; TryInto FromStr AsRef &amp;amp; AsMut Borrow &amp;amp; BorrowMut ToOwned   Iteration Traits  Iterator IntoIterator FromIterator   I/O Traits  Read &amp;amp; Write   Conclusion Discuss Notifications Further Reading  Intro Have you ever wondered what&amp;rsquo;s the difference between:
 Deref&amp;lt;Target = T&amp;gt;, AsRef&amp;lt;T&amp;gt;, and Borrow&amp;lt;T&amp;gt;? Clone, Copy, and ToOwned? From&amp;lt;T&amp;gt; and Into&amp;lt;T&amp;gt;? TryFrom&amp;lt;&amp;amp;str&amp;gt; and FromStr? FnOnce, FnMut, Fn, and fn?  Or ever asked yourself the questions:
 &amp;ldquo;When do I use associated types vs generic types in my trait?&amp;quot; &amp;ldquo;What are generic blanket impls?&amp;quot; &amp;ldquo;How do subtraits and supertraits work?&amp;quot; &amp;ldquo;Why does this trait not have any methods?&amp;quot;  Well then this is the article for you! It answers all of the above questions and much much more. Together we&amp;rsquo;ll do a quick flyby tour of all of the most popular and commonly used traits from the Rust standard library!
You can read this article in order section by section or jump around to whichever traits interest you the most because each trait section begins with a list of links to Prerequisite sections that you should read to have adequate context to understand the current section&amp;rsquo;s explanations.
Trait Basics We&amp;rsquo;ll cover just enough of the basics so that the rest of the article can be streamlined without having to repeat the same explanations of the same concepts over and over as they reappear in different traits.
Trait Items Trait items are any items that are part of a trait declaration.
Self Self always refers to the implementing type.
trait Trait { // always returns i32  fn returns_num() -&amp;gt; i32; // returns implementing type  fn returns_self() -&amp;gt; Self; } struct SomeType; struct OtherType; impl Trait for SomeType { fn returns_num() -&amp;gt; i32 { 5 } // Self == SomeType  fn returns_self() -&amp;gt; Self { SomeType } } impl Trait for OtherType { fn returns_num() -&amp;gt; i32 { 6 } // Self == OtherType  fn returns_self() -&amp;gt; Self { OtherType } } Functions A trait function is any function whose first parameter does not use the self keyword.
trait Default { // function  fn default() -&amp;gt; Self; } Trait functions can be called namespaced by the trait or implementing type:
fn main() { let zero: i32 = Default::default(); let zero = i32::default(); } Methods A trait method is any function whose first parameter uses the self keyword and is of type Self, &amp;amp;Self, &amp;amp;mut Self. The former types can also be wrapped with a Box, Rc, Arc, or Pin.
trait Trait { // methods  fn takes_self(self); fn takes_immut_self(&amp;amp;self); fn takes_mut_self(&amp;amp;mut self); // above methods desugared  fn takes_self(self: Self); fn takes_immut_self(self: &amp;amp;Self); fn takes_mut_self(self: &amp;amp;mut Self); } // example from standard library trait ToString { fn to_string(&amp;amp;self) -&amp;gt; String; } Methods can be called using the dot operator on the implementing type:
fn main() { let five = 5.to_string(); } However, similarly to functions, they can also be called namespaced by the trait or implementing type:
fn main() { let five = ToString::to_string(&amp;amp;5); let five = i32::to_string(&amp;amp;5); } Associated Types A trait can have associated types. This is useful when we need to use some type other than Self within function signatures but would still like the type to be chosen by the implementer rather than being hardcoded in the trait declaration:
trait Trait { type AssociatedType; fn func(arg: Self::AssociatedType); } struct SomeType; struct OtherType; // any type implementing Trait can // choose the type of AssociatedType  impl Trait for SomeType { type AssociatedType = i8; // chooses i8  fn func(arg: Self::AssociatedType) {} } impl Trait for OtherType { type AssociatedType = u8; // chooses u8  fn func(arg: Self::AssociatedType) {} } fn main() { SomeType::func(-1_i8); // can only call func with i8 on SomeType  OtherType::func(1_u8); // can only call func with u8 on OtherType } Generic Parameters &amp;ldquo;Generic parameters&amp;rdquo; broadly refers to generic type parameters, generic lifetime parameters, and generic const parameters. Since all of those are a mouthful to say people commonly abbreviate them to &amp;ldquo;generic types&amp;rdquo;, &amp;ldquo;lifetimes&amp;rdquo;, and &amp;ldquo;generic consts&amp;rdquo;. Since generic consts are not used in any of the standard library traits we&amp;rsquo;ll be covering they&amp;rsquo;re outside the scope of this article.
We can generalize a trait declaration using parameters:
// trait declaration generalized with lifetime &amp;amp; type parameters trait Trait&amp;lt;&amp;#39;a, T&amp;gt; { // signature uses generic type  fn func1(arg: T); // signature uses lifetime  fn func2(arg: &amp;amp;&amp;#39;a i32); // signature uses generic type &amp;amp; lifetime  fn func3(arg: &amp;amp;&amp;#39;a T); } struct SomeType; impl&amp;lt;&amp;#39;a&amp;gt; Trait&amp;lt;&amp;#39;a, i8&amp;gt; for SomeType { fn func1(arg: i8) {} fn func2(arg: &amp;amp;&amp;#39;a i32) {} fn func3(arg: &amp;amp;&amp;#39;a i8) {} } impl&amp;lt;&amp;#39;b&amp;gt; Trait&amp;lt;&amp;#39;b, u8&amp;gt; for SomeType { fn func1(arg: u8) {} fn func2(arg: &amp;amp;&amp;#39;b i32) {} fn func3(arg: &amp;amp;&amp;#39;b u8) {} } It&amp;rsquo;s possible to provide default values for generic types. The most commonly used default value is Self but any type works:
// make T = Self by default trait Trait&amp;lt;T = Self&amp;gt; { fn func(t: T) {} } // any type can be used as the default trait Trait2&amp;lt;T = i32&amp;gt; { fn func2(t: T) {} } struct SomeType; // omitting the generic type will // cause the impl to use the default // value, which is Self here impl Trait for SomeType { fn func(t: SomeType) {} } // default value here is i32 impl Trait2 for SomeType { fn func2(t: i32) {} } // the default is overridable as we&amp;#39;d expect impl Trait&amp;lt;String&amp;gt; for SomeType { fn func(t: String) {} } // overridable here too impl Trait2&amp;lt;String&amp;gt; for SomeType { fn func2(t: String) {} } Aside from parameterizing the trait it&amp;rsquo;s also possible to parameterize individual functions and methods:
trait Trait { fn func&amp;lt;&amp;#39;a, T&amp;gt;(t: &amp;amp;&amp;#39;a T); } Generic Types vs Associated Types Both generic types and associated types defer the decision to the implementer on which concrete types should be used in the trait&amp;rsquo;s functions and methods, so this section seeks to explain when to use one over the other.
The general rule-of-thumb is:
 Use associated types when there should only be a single impl of the trait per type. Use generic types when there can be many possible impls of the trait per type.  Let&amp;rsquo;s say we want to define a trait called Add which allows us to add values together. Here&amp;rsquo;s an initial design and impl that only uses associated types:
trait Add { type Rhs; type Output; fn add(self, rhs: Self::Rhs) -&amp;gt; Self::Output; } struct Point { x: i32, y: i32, } impl Add for Point { type Rhs = Point; type Output = Point; fn add(self, rhs: Point) -&amp;gt; Point { Point { x: self.x &#43; rhs.x, y: self.y &#43; rhs.y, } } } fn main() { let p1 = Point { x: 1, y: 1 }; let p2 = Point { x: 2, y: 2 }; let p3 = p1.add(p2); assert_eq!(p3.x, 3); assert_eq!(p3.y, 3); } Let&amp;rsquo;s say we wanted to add the ability to add i32s to Points where the i32 would be added to both the x and y members:
trait Add { type Rhs; type Output; fn add(self, rhs: Self::Rhs) -&amp;gt; Self::Output; } struct Point { x: i32, y: i32, } impl Add for Point { type Rhs = Point; type Output = Point; fn add(self, rhs: Point) -&amp;gt; Point { Point { x: self.x &#43; rhs.x, y: self.y &#43; rhs.y, } } } impl Add for Point { // ❌  type Rhs = i32; type Output = Point; fn add(self, rhs: i32) -&amp;gt; Point { Point { x: self.x &#43; rhs, y: self.y &#43; rhs, } } } fn main() { let p1 = Point { x: 1, y: 1 }; let p2 = Point { x: 2, y: 2 }; let p3 = p1.add(p2); assert_eq!(p3.x, 3); assert_eq!(p3.y, 3); let p1 = Point { x: 1, y: 1 }; let int2 = 2; let p3 = p1.add(int2); // ❌  assert_eq!(p3.x, 3); assert_eq!(p3.y, 3); } Throws:
error[E0119]: conflicting implementations of trait `Add` for type `Point`: --&amp;gt; src/main.rs:23:1 | 12 | impl Add for Point { | ------------------ first implementation here ... 23 | impl Add for Point { | ^^^^^^^^^^^^^^^^^^ conflicting implementation for `Point` Since the Add trait is not parameterized by any generic types we can only impl it once per type, which means we can only pick the types for both Rhs and Output once! To allow adding both Pointss and i32s to Point we have to refactor Rhs from an associated type to a generic type, which would allow us to impl the trait multiple times for Point with different type arguments for Rhs:
trait Add&amp;lt;Rhs&amp;gt; { type Output; fn add(self, rhs: Rhs) -&amp;gt; Self::Output; } struct Point { x: i32, y: i32, } impl Add&amp;lt;Point&amp;gt; for Point { type Output = Self; fn add(self, rhs: Point) -&amp;gt; Self::Output { Point { x: self.x &#43; rhs.x, y: self.y &#43; rhs.y, } } } impl Add&amp;lt;i32&amp;gt; for Point { // ✅  type Output = Self; fn add(self, rhs: i32) -&amp;gt; Self::Output { Point { x: self.x &#43; rhs, y: self.y &#43; rhs, } } } fn main() { let p1 = Point { x: 1, y: 1 }; let p2 = Point { x: 2, y: 2 }; let p3 = p1.add(p2); assert_eq!(p3.x, 3); assert_eq!(p3.y, 3); let p1 = Point { x: 1, y: 1 }; let int2 = 2; let p3 = p1.add(int2); // ✅  assert_eq!(p3.x, 3); assert_eq!(p3.y, 3); } Let&amp;rsquo;s say we add a new type called Line which contains two Points, and now there are contexts within our program where adding two Points should produce a Line instead of a Point. This is not possible given the current design of the Add trait where Output is an associated type but we can satisfy these new requirements by refactoring Output from an associated type into a generic type:
trait Add&amp;lt;Rhs, Output&amp;gt; { fn add(self, rhs: Rhs) -&amp;gt; Output; } struct Point { x: i32, y: i32, } impl Add&amp;lt;Point, Point&amp;gt; for Point { fn add(self, rhs: Point) -&amp;gt; Point { Point { x: self.x &#43; rhs.x, y: self.y &#43; rhs.y, } } } impl Add&amp;lt;i32, Point&amp;gt; for Point { fn add(self, rhs: i32) -&amp;gt; Point { Point { x: self.x &#43; rhs, y: self.y &#43; rhs, } } } struct Line { start: Point, end: Point, } impl Add&amp;lt;Point, Line&amp;gt; for Point { // ✅  fn add(self, rhs: Point) -&amp;gt; Line { Line { start: self, end: rhs, } } } fn main() { let p1 = Point { x: 1, y: 1 }; let p2 = Point { x: 2, y: 2 }; let p3: Point = p1.add(p2); assert!(p3.x == 3 &amp;amp;&amp;amp; p3.y == 3); let p1 = Point { x: 1, y: 1 }; let int2 = 2; let p3 = p1.add(int2); assert!(p3.x == 3 &amp;amp;&amp;amp; p3.y == 3); let p1 = Point { x: 1, y: 1 }; let p2 = Point { x: 2, y: 2 }; let l: Line = p1.add(p2); // ✅  assert!(l.start.x == 1 &amp;amp;&amp;amp; l.start.y == 1 &amp;amp;&amp;amp; l.end.x == 2 &amp;amp;&amp;amp; l.end.y == 2) } So which Add trait above is the best? It really depends on the requirements of your program! They&amp;rsquo;re all good in the right situations.
Scope Trait items cannot be used unless the trait is in scope. Most Rustaceans learn this the hard way the first time they try to write a program that does anything with I/O because the Read and Write traits are not in the standard library prelude:
use std::fs::File; use std::io; fn main() -&amp;gt; Result&amp;lt;(), io::Error&amp;gt; { let mut file = File::open(&amp;#34;Cargo.toml&amp;#34;)?; let mut buffer = String::new(); file.read_to_string(&amp;amp;mut buffer)?; // ❌ read_to_string not found in File  Ok(()) } read_to_string(buf: &amp;amp;mut String) is declared by the std::io::Read trait and implemented by the std::fs::File struct but in order to call it std::io::Read must be in scope:
use std::fs::File; use std::io; use std::io::Read; // ✅  fn main() -&amp;gt; Result&amp;lt;(), io::Error&amp;gt; { let mut file = File::open(&amp;#34;Cargo.toml&amp;#34;)?; let mut buffer = String::new(); file.read_to_string(&amp;amp;mut buffer)?; // ✅  Ok(()) } The standard library prelude is a module in the standard library, i.e. std::prelude::v1, that gets auto imported at the top of every other module, i.e. use std::prelude::v1::*. Thus the following traits are always in scope and we never have to explicitly import them ourselves because they&amp;rsquo;re part of the prelude:
 AsMut AsRef Clone Copy Default Drop Eq Fn FnMut FnOnce From Into ToOwned IntoIterator Iterator PartialEq PartialOrd Send Sized Sync ToString Ord  Derive Macros The standard library exports a handful of derive macros which we can use to quickly and conveniently impl a trait on a type if all of its members also impl the trait. The derive macros are named after the traits they impl:
 Clone Copy Debug Default Eq Hash Ord PartialEq PartialOrd  Example usage:
// macro derives Copy &amp;amp; Clone impl for SomeType #[derive(Copy, Clone)] struct SomeType; Note: derive macros are just procedural macros and can do anything, there&amp;rsquo;s no hard rule that they must impl a trait or that they can only work if all the members of the type impl a trait, these are just the conventions followed by the derive macros in the standard library.
Default Impls Traits can provide default impls for their functions and methods.
trait Trait { fn method(&amp;amp;self) { println!(&amp;#34;default impl&amp;#34;); } } struct SomeType; struct OtherType; // use default impl for Trait::method impl Trait for SomeType {} impl Trait for OtherType { // use our own impl for Trait::method  fn method(&amp;amp;self) { println!(&amp;#34;OtherType impl&amp;#34;); } } fn main() { SomeType.method(); // prints &amp;#34;default impl&amp;#34;  OtherType.method(); // prints &amp;#34;OtherType impl&amp;#34; } This is especially handy if some of the trait methods can be implemented solely using other trait methods.
trait Greet { fn greet(&amp;amp;self, name: &amp;amp;str) -&amp;gt; String; fn greet_loudly(&amp;amp;self, name: &amp;amp;str) -&amp;gt; String { self.greet(name) &#43; &amp;#34;!&amp;#34; } } struct Hello; struct Hola; impl Greet for Hello { fn greet(&amp;amp;self, name: &amp;amp;str) -&amp;gt; String { format!(&amp;#34;Hello {}&amp;#34;, name) } // use default impl for greet_loudly } impl Greet for Hola { fn greet(&amp;amp;self, name: &amp;amp;str) -&amp;gt; String { format!(&amp;#34;Hola {}&amp;#34;, name) } // override default impl  fn greet_loudly(&amp;amp;self, name: &amp;amp;str) -&amp;gt; String { let mut greeting = self.greet(name); greeting.insert_str(0, &amp;#34;¡&amp;#34;); greeting &#43; &amp;#34;!&amp;#34; } } fn main() { println!(&amp;#34;{}&amp;#34;, Hello.greet(&amp;#34;John&amp;#34;)); // prints &amp;#34;Hello John&amp;#34;  println!(&amp;#34;{}&amp;#34;, Hello.greet_loudly(&amp;#34;John&amp;#34;)); // prints &amp;#34;Hello John!&amp;#34;  println!(&amp;#34;{}&amp;#34;, Hola.greet(&amp;#34;John&amp;#34;)); // prints &amp;#34;Hola John&amp;#34;  println!(&amp;#34;{}&amp;#34;, Hola.greet_loudly(&amp;#34;John&amp;#34;)); // prints &amp;#34;¡Hola John!&amp;#34; } Many traits in the standard library provide default impls for many of their methods.
Generic Blanket Impls A generic blanket impl is an impl on a generic type instead of a concrete type. To explain why and how we&amp;rsquo;d use one let&amp;rsquo;s start by writing an is_even method for number types:
trait Even { fn is_even(self) -&amp;gt; bool; } impl Even for i8 { fn is_even(self) -&amp;gt; bool { self % 2_i8 == 0_i8 } } impl Even for u8 { fn is_even(self) -&amp;gt; bool { self % 2_u8 == 0_u8 } } impl Even for i16 { fn is_even(self) -&amp;gt; bool { self % 2_i16 == 0_i16 } } // etc  #[test] // ✅ fn test_is_even() { assert!(2_i8.is_even()); assert!(4_u8.is_even()); assert!(6_i16.is_even()); // etc } Obviously, this is very verbose. Also, all of our impls are almost identical. Furthermore, in the unlikely but still possible event that Rust decides to add more number types in the future we have to remember to come back to this code and update it with the new number types. We can solve all these problems using a generic blanket impl:
use std::fmt::Debug; use std::convert::TryInto; use std::ops::Rem; trait Even { fn is_even(self) -&amp;gt; bool; } // generic blanket impl impl&amp;lt;T&amp;gt; Even for T where T: Rem&amp;lt;Output = T&amp;gt; &#43; PartialEq&amp;lt;T&amp;gt; &#43; Sized, u8: TryInto&amp;lt;T&amp;gt;, &amp;lt;u8 as TryInto&amp;lt;T&amp;gt;&amp;gt;::Error: Debug, { fn is_even(self) -&amp;gt; bool { // these unwraps will never panic  self % 2.try_into().unwrap() == 0.try_into().unwrap() } } #[test] // ✅ fn test_is_even() { assert!(2_i8.is_even()); assert!(4_u8.is_even()); assert!(6_i16.is_even()); // etc } Unlike default impls, which provide an impl, generic blanket impls provide the impl, so they are not overridable.
use std::fmt::Debug; use std::convert::TryInto; use std::ops::Rem; trait Even { fn is_even(self) -&amp;gt; bool; } impl&amp;lt;T&amp;gt; Even for T where T: Rem&amp;lt;Output = T&amp;gt; &#43; PartialEq&amp;lt;T&amp;gt; &#43; Sized, u8: TryInto&amp;lt;T&amp;gt;, &amp;lt;u8 as TryInto&amp;lt;T&amp;gt;&amp;gt;::Error: Debug, { fn is_even(self) -&amp;gt; bool { self % 2.try_into().unwrap() == 0.try_into().unwrap() } } impl Even for u8 { // ❌  fn is_even(self) -&amp;gt; bool { self % 2_u8 == 0_u8 } } Throws:
error[E0119]: conflicting implementations of trait `Even` for type `u8`: --&amp;gt; src/lib.rs:22:1 | 10 | / impl&amp;lt;T&amp;gt; Even for T 11 | | where 12 | | T: Rem&amp;lt;Output = T&amp;gt; &#43; PartialEq&amp;lt;T&amp;gt; &#43; Sized, 13 | | u8: TryInto&amp;lt;T&amp;gt;, ... | 19 | | } 20 | | } | |_- first implementation here 21 | 22 | impl Even for u8 { | ^^^^^^^^^^^^^^^^ conflicting implementation for `u8` These impls overlap, hence they conflict, hence Rust rejects the code to ensure trait coherence. Trait coherence is the property that there exists at most one impl of a trait for any given type. The rules Rust uses to enforce trait coherence, the implications of those rules, and workarounds for the implications are outside the scope of this article.
Subtraits &amp;amp; Supertraits The &amp;ldquo;sub&amp;rdquo; in &amp;ldquo;subtrait&amp;rdquo; refers to subset and the &amp;ldquo;super&amp;rdquo; in &amp;ldquo;supertrait&amp;rdquo; refers to superset. If we have this trait declaration:
trait Subtrait: Supertrait {} All of the types which impl Subtrait are a subset of all the types which impl Supertrait, or to put it in opposite but equivalent terms: all the types which impl Supertrait are a superset of all the types which impl Subtrait.
Also, the above is just syntax sugar for:
trait Subtrait where Self: Supertrait {} It&amp;rsquo;s a subtle yet important distinction to understand that the bound is on Self, i.e. the type impling Subtrait, and not on Subtrait itself. The latter would not make any sense, since trait bounds can only be applied to concrete types which can impl traits. Traits cannot impl other traits:
trait Supertrait { fn method(&amp;amp;self) { println!(&amp;#34;in supertrait&amp;#34;); } } trait Subtrait: Supertrait { // this looks like it might impl or  // override Supertrait::method but it  // does not  fn method(&amp;amp;self) { println!(&amp;#34;in subtrait&amp;#34;) } } struct SomeType; // adds Supertrait::method to SomeType impl Supertrait for SomeType {} // adds Subtrait::method to SomeType impl Subtrait for SomeType {} // both methods exist on SomeType simultaneously // neither overriding or shadowing the other  fn main() { SomeType.method(); // ❌ ambiguous method call  // must disambiguate using fully-qualified syntax  &amp;lt;SomeType as Supertrait&amp;gt;::method(&amp;amp;st); // ✅ prints &amp;#34;in supertrait&amp;#34;  &amp;lt;SomeType as Subtrait&amp;gt;::method(&amp;amp;st); // ✅ prints &amp;#34;in subtrait&amp;#34; } Furthermore, there are no rules for how a type must impl both a subtrait and a supertrait. It can use the methods from either in the impl of the other.
trait Supertrait { fn super_method(&amp;amp;mut self); } trait Subtrait: Supertrait { fn sub_method(&amp;amp;mut self); } struct CallSuperFromSub; impl Supertrait for CallSuperFromSub { fn super_method(&amp;amp;mut self) { println!(&amp;#34;in super&amp;#34;); } } impl Subtrait for CallSuperFromSub { fn sub_method(&amp;amp;mut self) { println!(&amp;#34;in sub&amp;#34;); self.super_method(); } } struct CallSubFromSuper; impl Supertrait for CallSubFromSuper { fn super_method(&amp;amp;mut self) { println!(&amp;#34;in super&amp;#34;); self.sub_method(); } } impl Subtrait for CallSubFromSuper { fn sub_method(&amp;amp;mut self) { println!(&amp;#34;in sub&amp;#34;); } } struct CallEachOther(bool); impl Supertrait for CallEachOther { fn super_method(&amp;amp;mut self) { println!(&amp;#34;in super&amp;#34;); if self.0 { self.0 = false; self.sub_method(); } } } impl Subtrait for CallEachOther { fn sub_method(&amp;amp;mut self) { println!(&amp;#34;in sub&amp;#34;); if self.0 { self.0 = false; self.super_method(); } } } fn main() { CallSuperFromSub.super_method(); // prints &amp;#34;in super&amp;#34;  CallSuperFromSub.sub_method(); // prints &amp;#34;in sub&amp;#34;, &amp;#34;in super&amp;#34;  CallSubFromSuper.super_method(); // prints &amp;#34;in super&amp;#34;, &amp;#34;in sub&amp;#34;  CallSubFromSuper.sub_method(); // prints &amp;#34;in sub&amp;#34;  CallEachOther(true).super_method(); // prints &amp;#34;in super&amp;#34;, &amp;#34;in sub&amp;#34;  CallEachOther(true).sub_method(); // prints &amp;#34;in sub&amp;#34;, &amp;#34;in super&amp;#34; } Hopefully the examples above show that the relationship between subtraits and supertraits can be complex. Before introducing a mental model that neatly encapsulates all of that complexity let&amp;rsquo;s quickly review and establish the mental model we use for understanding trait bounds on generic types:
fn function&amp;lt;T: Clone&amp;gt;(t: T) { // impl } Without knowing anything about the impl of this function we could reasonably guess that t.clone() gets called at some point because when a generic type is bounded by a trait that strongly implies it has a dependency on the trait. The mental model for understanding the relationship between generic types and their trait bounds is a simple and intuitive one: generic types depend on their trait bounds.
Now let&amp;rsquo;s look the trait declaration for Copy:
trait Copy: Clone {} The syntax above looks very similar to the syntax for applying a trait bound on a generic type and yet Copy doesn&amp;rsquo;t depend on Clone at all. The mental model we developed earlier doesn&amp;rsquo;t help us here. In my opinion, the most simple and elegant mental model for understanding the relationship between subtraits and supertraits is: subtraits refine their supertraits.
&amp;ldquo;Refinement&amp;rdquo; is intentionally kept somewhat vague because it can mean different things in different contexts:
 a subtrait might make its supertrait&amp;rsquo;s methods&amp;rsquo; impls more specialized, faster, use less memory, e.g. Copy: Clone a subtrait might make additional guarantees about the supertrait&amp;rsquo;s methods&amp;rsquo; impls, e.g. Eq: PartialEq, Ord: PartialOrd, ExactSizeIterator: Iterator a subtrait might make the supertrait&amp;rsquo;s methods more flexible or easier to call, e.g. FnMut: FnOnce, Fn: FnMut a subtrait might extend a supertrait and add new methods, e.g. DoubleEndedIterator: Iterator, ExactSizeIterator: Iterator  Trait Objects Generics give us compile-time polymorphism where trait objects give us run-time polymorphism. We can use trait objects to allow functions to dynamically return different types at run-time:
fn example(condition: bool, vec: Vec&amp;lt;i32&amp;gt;) -&amp;gt; Box&amp;lt;dyn Iterator&amp;lt;Item = i32&amp;gt;&amp;gt; { let iter = vec.into_iter(); if condition { // Has type:  // Box&amp;lt;Map&amp;lt;IntoIter&amp;lt;i32&amp;gt;, Fn(i32) -&amp;gt; i32&amp;gt;&amp;gt;  // But is cast to:  // Box&amp;lt;dyn Iterator&amp;lt;Item = i32&amp;gt;&amp;gt;  Box::new(iter.map(|n| n * 2)) } else { // Has type:  // Box&amp;lt;Filter&amp;lt;IntoIter&amp;lt;i32&amp;gt;, Fn(&amp;amp;i32) -&amp;gt; bool&amp;gt;&amp;gt;  // But is cast to:  // Box&amp;lt;dyn Iterator&amp;lt;Item = i32&amp;gt;&amp;gt;  Box::new(iter.filter(|&amp;amp;n| n &amp;gt;= 2)) } } Trait objects also allow us to store heterogeneous types in collections:
use std::f64::consts::PI; struct Circle { radius: f64, } struct Square { side: f64 } trait Shape { fn area(&amp;amp;self) -&amp;gt; f64; } impl Shape for Circle { fn area(&amp;amp;self) -&amp;gt; f64 { PI * self.radius * self.radius } } impl Shape for Square { fn area(&amp;amp;self) -&amp;gt; f64 { self.side * self.side } } fn get_total_area(shapes: Vec&amp;lt;Box&amp;lt;dyn Shape&amp;gt;&amp;gt;) -&amp;gt; f64 { shapes.into_iter().map(|s| s.area()).sum() } fn example() { let shapes: Vec&amp;lt;Box&amp;lt;dyn Shape&amp;gt;&amp;gt; = vec![ Box::new(Circle { radius: 1.0 }), // Box&amp;lt;Circle&amp;gt; cast to Box&amp;lt;dyn Shape&amp;gt;  Box::new(Square { side: 1.0 }), // Box&amp;lt;Square&amp;gt; cast to Box&amp;lt;dyn Shape&amp;gt;  ]; assert_eq!(PI &#43; 1.0, get_total_area(shapes)); // ✅ } Trait objects are unsized so they must always be behind a pointer. We can tell the difference between a concrete type and a trait object at the type level based on the presence of the dyn keyword within the type:
struct Struct; trait Trait {} // regular struct &amp;amp;Struct Box&amp;lt;Struct&amp;gt; Rc&amp;lt;Struct&amp;gt; Arc&amp;lt;Struct&amp;gt; // trait objects &amp;amp;dyn Trait Box&amp;lt;dyn Trait&amp;gt; Rc&amp;lt;dyn Trait&amp;gt; Arc&amp;lt;dyn Trait&amp;gt; Not all traits can be converted into trait objects. A trait is object-safe if it meets these requirements:
 trait doesn&amp;rsquo;t require Self: Sized all of the trait&amp;rsquo;s methods are object-safe  A trait method is object-safe if it meets these requirements:
 method requires Self: Sized or method only uses a Self type in receiver position  Understanding why the requirements are what they are is not relevant to the rest of this article, but if you&amp;rsquo;re still curious it&amp;rsquo;s covered in Sizedness in Rust.
Marker Traits Marker traits are traits that have no trait items. Their job is to &amp;ldquo;mark&amp;rdquo; the implementing type as having some property which is otherwise not possible to represent using the type system.
// Impling PartialEq for a type promises // that equality for the type has these properties: // - symmetry: a == b implies b == a, and // - transitivity: a == b &amp;amp;&amp;amp; b == c implies a == c // But DOES NOT promise this property: // - reflexivity: a == a trait PartialEq { fn eq(&amp;amp;self, other: &amp;amp;Self) -&amp;gt; bool; } // Eq has no trait items! The eq method is already // declared by PartialEq, but &amp;#34;impling&amp;#34; Eq // for a type promises this additional equality property: // - reflexivity: a == a trait Eq: PartialEq {} // f64 impls PartialEq but not Eq because NaN != NaN // i32 impls PartialEq &amp;amp; Eq because there&amp;#39;s no NaNs :) Auto Traits Auto traits are traits that get automatically implemented for a type if all of its members also impl the trait. What &amp;ldquo;members&amp;rdquo; means depends on the type, for example: fields of a struct, variants of an enum, elements of an array, items of a tuple, and so on.
All auto traits are marker traits but not all marker traits are auto traits. Auto traits must be marker traits so the compiler can provide an automatic default impl for them, which would not be possible if they had any trait items.
Examples of auto traits:
// implemented for types which are safe to send between threads unsafe auto trait Send {} // implemented for types whose references are safe to send between threads unsafe auto trait Sync {} Unsafe Traits Traits can be marked unsafe to indicate that impling the trait might require unsafe code. Both Send and Sync are marked unsafe because if they aren&amp;rsquo;t automatically implemented for a type that means it must contains some non-Send or non-Sync member and we have to take extra care as the implementers to make sure there are no data races if we want to manually mark the type as Send and Sync.
// SomeType is not Send or Sync struct SomeType { not_send_or_sync: *const (), } // but if we&amp;#39;re confident that our impl doesn&amp;#39;t have any data // races we can explicitly mark it as Send and Sync using unsafe unsafe impl Send for SomeType {} unsafe impl Sync for SomeType {} Auto Traits Send &amp;amp; Sync Prerequisites
 Marker Traits Auto Traits Unsafe Traits  unsafe auto trait Send {} unsafe auto trait Sync {} If a type is Send that means it&amp;rsquo;s safe to send between threads. If a type is Sync that means it&amp;rsquo;s safe to share references of it between threads. In more precise terms some type T is Sync if and only if &amp;amp;T is Send.
Almost all types are Send and Sync. The only notable Send exception is Rc and the only notable Sync exceptions are Rc, Cell, RefCell. If we need a Send version of Rc we can use Arc. If we need a Sync version of Cell or RefCell we can Mutex or RwLock. Although if we&amp;rsquo;re using the Mutex or RwLock to just wrap a primitive type it&amp;rsquo;s often better to use the atomic primitive types provided by the standard library such as AtomicBool, AtomicI32, AtomicUsize, and so on.
That almost all types are Sync might be a surprise to some people, but yup, it&amp;rsquo;s true even for types without any internal synchronization. This is possible thanks to Rust&amp;rsquo;s strict borrowing rules.
We can pass many immutable references to the same data to many threads and we&amp;rsquo;re guaranteed there are no data races because as long as any immutable references exist Rust statically guarantees the underlying data cannot be mutated:
use crossbeam::thread; fn main() { let mut greeting = String::from(&amp;#34;Hello&amp;#34;); let greeting_ref = &amp;amp;greeting; thread::scope(|scoped_thread| { // spawn 3 threads  for n in 1..=3 { // greeting_ref copied into every thread  scoped_thread.spawn(move |_| { println!(&amp;#34;{} {}&amp;#34;, greeting_ref, n); // prints &amp;#34;Hello {n}&amp;#34;  }); } // line below could cause UB or data races but compiler rejects it  greeting &#43;= &amp;#34; world&amp;#34;; // ❌ cannot mutate greeting while immutable refs exist  }); // can mutate greeting after every thread has joined  greeting &#43;= &amp;#34; world&amp;#34;; // ✅  println!(&amp;#34;{}&amp;#34;, greeting); // prints &amp;#34;Hello world&amp;#34; } Likewise we can pass a single mutable reference to some data to a single thread and we&amp;rsquo;re guaranteed there will be no data races because Rust statically guarantees aliased mutable references cannot exist and the underlying data cannot be mutated through anything other than the single existing mutable reference:
use crossbeam::thread; fn main() { let mut greeting = String::from(&amp;#34;Hello&amp;#34;); let greeting_ref = &amp;amp;mut greeting; thread::scope(|scoped_thread| { // greeting_ref moved into thread  scoped_thread.spawn(move |_| { *greeting_ref &#43;= &amp;#34; world&amp;#34;; println!(&amp;#34;{}&amp;#34;, greeting_ref); // prints &amp;#34;Hello world&amp;#34;  }); // line below could cause UB or data races but compiler rejects it  greeting &#43;= &amp;#34;!!!&amp;#34;; // ❌ cannot mutate greeting while mutable refs exist  }); // can mutate greeting after the thread has joined  greeting &#43;= &amp;#34;!!!&amp;#34;; // ✅  println!(&amp;#34;{}&amp;#34;, greeting); // prints &amp;#34;Hello world!!!&amp;#34; } This is why most types are Sync without requiring any explicit synchronization. In the event we need to simultaneously mutate some data T across multiple threads the compiler won&amp;rsquo;t let us until we wrap the data in a Arc&amp;lt;Mutex&amp;lt;T&amp;gt;&amp;gt; or Arc&amp;lt;RwLock&amp;lt;T&amp;gt;&amp;gt; so the compiler enforces that explicit synchronization is used when it&amp;rsquo;s needed.
Sized Prerequisites
 Marker Traits Auto Traits  If a type is Sized that means its size in bytes is known at compile-time and it&amp;rsquo;s possible to put instances of the type on the stack.
Sizedness of types and its implications is a subtle yet huge topic that affects a lot of different aspects of the language. It&amp;rsquo;s so important that I wrote an entire article on it called Sizedness in Rust which I highly recommend reading for anyone who would like to understand sizedness in-depth. I&amp;rsquo;ll summarize a few key things which are relevant to this article.
 All generic types get an implicit Sized bound.  fn func&amp;lt;T&amp;gt;(t: &amp;amp;T) {} // example above desugared fn func&amp;lt;T: Sized&amp;gt;(t: &amp;amp;T) {} Since there&amp;rsquo;s an implicit Sized bound on all generic types, if we want to opt-out of this implicit bound we need to use the special &amp;ldquo;relaxed bound&amp;rdquo; syntax ?Sized which currently only exists for the Sized trait:  // now T can be unsized fn func&amp;lt;T: ?Sized&amp;gt;(t: &amp;amp;T) {} There&amp;rsquo;s an implicit ?Sized bound on all traits.  trait Trait {} // example above desugared trait Trait: ?Sized {} This is so that trait objects can impl the trait. Again, all of the nitty gritty details are in Sizedness in Rust.
General traits Default Prerequisites
 Self Functions Derive Macros  trait Default { fn default() -&amp;gt; Self; } It&amp;rsquo;s possible to construct default values of Default types.
struct Color { r: u8, g: u8, b: u8, } impl Default for Color { // default color is black  fn default() -&amp;gt; Self { Color { r: 0, g: 0, b: 0, } } } This is useful for quick prototyping but also in any instance where we just need an instance of a type and aren&amp;rsquo;t picky about what it is:
fn main() { // just give me some color!  let color = Color::default(); } This is also an option we may want to explicitly expose to the users of our functions:
struct Canvas; enum Shape { Circle, Rectangle, } impl Canvas { // let user optionally pass a color  fn paint(&amp;amp;mut self, shape: Shape, color: Option&amp;lt;Color&amp;gt;) { // if no color is passed use the default color  let color = color.unwrap_or_default(); // etc  } } Default is also useful in generic contexts where we need to construct generic types:
fn guarantee_length&amp;lt;T: Default&amp;gt;(mut vec: Vec&amp;lt;T&amp;gt;, min_len: usize) -&amp;gt; Vec&amp;lt;T&amp;gt; { for _ in 0..min_len.saturating_sub(vec.len()) { vec.push(T::default()); } vec } Another way we can take advantage of Default types is for partial initialization of structs using Rust&amp;rsquo;s struct update syntax. We may have a new constructor for Color which takes every member as an argument:
impl Color { fn new(r: u8, g: u8, b: u8) -&amp;gt; Self { Color { r, g, b, } } } However we can also have convenience constructors that only accept a particular struct member each and fall back to the default values for the other struct members:
impl Color { fn red(r: u8) -&amp;gt; Self { Color { r, ..Color::default() } } fn green(g: u8) -&amp;gt; Self { Color { g, ..Color::default() } } fn blue(b: u8) -&amp;gt; Self { Color { b, ..Color::default() } } } There&amp;rsquo;s also a Default derive macro for so we can write Color like this:
// default color is still black // because u8::default() == 0 #[derive(Default)] struct Color { r: u8, g: u8, b: u8 } Clone Prerequisites
 Self Methods Default Impls Derive Macros  trait Clone { fn clone(&amp;amp;self) -&amp;gt; Self; // provided default impls  fn clone_from(&amp;amp;mut self, source: &amp;amp;Self); } We can convert immutable references of Clone types into owned values, i.e. &amp;amp;T -&amp;gt; T. Clone makes no promises about the efficiency of this conversion so it can be slow and expensive. To quickly impl Clone on a type we can use the derive macro:
#[derive(Clone)] struct SomeType { cloneable_member1: CloneableType1, cloneable_member2: CloneableType2, // etc } // macro generates impl below impl Clone for SomeType { fn clone(&amp;amp;self) -&amp;gt; Self { SomeType { cloneable_member1: self.cloneable_member1.clone(), cloneable_member2: self.cloneable_member2.clone(), // etc  } } } Clone can also be useful in constructing instances of a type within a generic context. Here&amp;rsquo;s an example from the previous section except using Clone instead of Default:
fn guarantee_length&amp;lt;T: Clone&amp;gt;(mut vec: Vec&amp;lt;T&amp;gt;, min_len: usize, fill_with: &amp;amp;T) -&amp;gt; Vec&amp;lt;T&amp;gt; { for _ in 0..min_len.saturating_sub(vec.len()) { vec.push(fill_with.clone()); } vec } People also commonly use cloning as an escape hatch to avoid dealing with the borrow checker. Managing structs with references can be challenging, but we can turn the references into owned values by cloning them.
// oof, we gotta worry about lifetimes 😟 struct SomeStruct&amp;lt;&amp;#39;a&amp;gt; { data: &amp;amp;&amp;#39;a Vec&amp;lt;u8&amp;gt;, } // now we&amp;#39;re on easy street 😎 struct SomeStruct { data: Vec&amp;lt;u8&amp;gt;, } If we&amp;rsquo;re working on a program where performance is not the utmost concern then we don&amp;rsquo;t need to sweat cloning data. Rust is a low-level language that exposes a lot of low-level details so it&amp;rsquo;s easy to get caught up in premature optimizations instead of actually solving the problem at hand. For many programs the best order of priorities is usually to build for correctness first, elegance second, and performance third, and only focus on performance after the program has been profiled and the performance bottlenecks have been identified. This is good general advice to follow, and if it doesn&amp;rsquo;t apply to your particular program then you would know.
Copy Prerequisites
 Marker Traits Subtraits &amp;amp; Supertraits Derive Macros  trait Copy: Clone {} We copy Copy types, e.g. T -&amp;gt; T. Copy promises the copy operation will be a simple bitwise copy so it will be very fast and efficient. We cannot impl Copy ourselves, only the compiler can provide an impl, but we can tell it to do so by using the Copy derive macro, together with the Clone derive macro since Copy is a subtrait of Clone:
#[derive(Copy, Clone)] struct SomeType; Copy refines Clone. A clone may be slow and expensive but a copy is guaranteed to be fast and cheap, so a copy is just a fast clone. If a type impls Copy that makes the Clone impl trivial:
// this is what the derive macro generates impl&amp;lt;T: Copy&amp;gt; Clone for T { // the clone method becomes just a copy  fn clone(&amp;amp;self) -&amp;gt; Self { *self } } Impling Copy for a type changes its behavior when it gets moved. By default all types have move semantics but once a type impls Copy it gets copy semantics. To explain the difference between the two let&amp;rsquo;s examine these simple scenarios:
// a &amp;#34;move&amp;#34;, src: !Copy let dest = src; // a &amp;#34;copy&amp;#34;, src: Copy let dest = src; In both cases, dest = src performs a simple bitwise copy of src&#39;s contents and moves the result into dest, the only difference is that in the case of &amp;ldquo;a move&amp;rdquo; the borrow checker invalidates the src variable and makes sure it&amp;rsquo;s not used anywhere else later and in the case of &amp;ldquo;a copy&amp;rdquo; src remains valid and usable.
In a nutshell: Copies are moves. Moves are copies. The only difference is how they&amp;rsquo;re treated by the borrow checker.
For a more concrete example of a move, imagine src was a Vec&amp;lt;i32&amp;gt; and its contents looked something like this:
{ data: *mut [i32], length: usize, capacity: usize } When we write dest = src we end up with:
src = { data: *mut [i32], length: usize, capacity: usize } dest = { data: *mut [i32], length: usize, capacity: usize } At this point both src and dest have aliased mutable references to the same data, which is a big no-no, so the borrow checker invalidates the src variable so it can&amp;rsquo;t be used again without throwing a compile error.
For a more concrete example of a copy, imagine src was an Option&amp;lt;i32&amp;gt; and its contents looked something like this:
{ is_valid: bool, data: i32 } Now when we write dest = src we end up with:
src = { is_valid: bool, data: i32 } dest = { is_valid: bool, data: i32 } These are both usable simultaneously! Hence Option&amp;lt;i32&amp;gt; is Copy.
Although Copy could be an auto trait the Rust language designers decided it&amp;rsquo;s simpler and safer for types to explicitly opt into copy semantics rather than silently inheriting copy semantics whenever the type is eligible, as the latter can cause surprising confusing behavior which often leads to bugs.
Any Prerequisites
 Self Generic Blanket Impls Subtraits &amp;amp; Supertraits Trait Objects  trait Any: &amp;#39;static { fn type_id(&amp;amp;self) -&amp;gt; TypeId; } Rust&amp;rsquo;s style of polymorphism is parametric, but if we&amp;rsquo;re looking to use a more ad-hoc style of polymorphism similar to dynamically-typed languages then we can emulate that using the Any trait. We don&amp;rsquo;t have to manually impl this trait for our types because that&amp;rsquo;s already covered by this generic blanket impl:
impl&amp;lt;T: &amp;#39;static &#43; ?Sized&amp;gt; Any for T { fn type_id(&amp;amp;self) -&amp;gt; TypeId { TypeId::of::&amp;lt;T&amp;gt;() } } The way we get a T out of a dyn Any is by using the downcast_ref::&amp;lt;T&amp;gt;() and downcast_mut::&amp;lt;T&amp;gt;() methods:
use std::any::Any; #[derive(Default)] struct Point { x: i32, y: i32, } impl Point { fn inc(&amp;amp;mut self) { self.x &#43;= 1; self.y &#43;= 1; } } fn map_any(mut any: Box&amp;lt;dyn Any&amp;gt;) -&amp;gt; Box&amp;lt;dyn Any&amp;gt; { if let Some(num) = any.downcast_mut::&amp;lt;i32&amp;gt;() { *num &#43;= 1; } else if let Some(string) = any.downcast_mut::&amp;lt;String&amp;gt;() { *string &#43;= &amp;#34;!&amp;#34;; } else if let Some(point) = any.downcast_mut::&amp;lt;Point&amp;gt;() { point.inc(); } any } fn main() { let mut vec: Vec&amp;lt;Box&amp;lt;dyn Any&amp;gt;&amp;gt; = vec![ Box::new(0), Box::new(String::from(&amp;#34;a&amp;#34;)), Box::new(Point::default()), ]; // vec = [0, &amp;#34;a&amp;#34;, Point { x: 0, y: 0 }]  vec = vec.into_iter().map(map_any).collect(); // vec = [1, &amp;#34;a!&amp;#34;, Point { x: 1, y: 1 }] } This trait rarely needs to be used because on top of parametric polymorphism being superior to ad-hoc polymorphism in most scenarios the latter can also be emulated using enums which are more type-safe and require less indirection. For example, we could have written the above example like this:
#[derive(Default)] struct Point { x: i32, y: i32, } impl Point { fn inc(&amp;amp;mut self) { self.x &#43;= 1; self.y &#43;= 1; } } enum Stuff { Integer(i32), String(String), Point(Point), } fn map_stuff(mut stuff: Stuff) -&amp;gt; Stuff { match &amp;amp;mut stuff { Stuff::Integer(num) =&amp;gt; *num &#43;= 1, Stuff::String(string) =&amp;gt; *string &#43;= &amp;#34;!&amp;#34;, Stuff::Point(point) =&amp;gt; point.inc(), } stuff } fn main() { let mut vec = vec![ Stuff::Integer(0), Stuff::String(String::from(&amp;#34;a&amp;#34;)), Stuff::Point(Point::default()), ]; // vec = [0, &amp;#34;a&amp;#34;, Point { x: 0, y: 0 }]  vec = vec.into_iter().map(map_stuff).collect(); // vec = [1, &amp;#34;a!&amp;#34;, Point { x: 1, y: 1 }] } Despite Any rarely being needed it can still be convenient to use sometimes, as we&amp;rsquo;ll later see in the Error Handling section.
Formatting Traits We can serialize types into strings using the formatting macros in std::fmt, the most well-known of the bunch being println!. We can pass formatting parameters to the {} placeholders used within format strs which are then used to select which trait impl to use to serialize the placeholder&amp;rsquo;s argument.
   Trait Placeholder Description     Display {} display representation   Debug {:?} debug representation   Octal {:o} octal representation   LowerHex {:x} lowercase hex representation   UpperHex {:X} uppercase hex representation   Pointer {:p} memory address   Binary {:b} binary representation   LowerExp {:e} lowercase exponential representation   UpperExp {:E} uppercase exponential representation    Display &amp;amp; ToString Prerequisites
 Self Methods Generic Blanket Impls  trait Display { fn fmt(&amp;amp;self, f: &amp;amp;mut Formatter&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; Result; } Display types can be serialized into Strings which are friendly to the end users of the program. Example impl for Point:
use std::fmt; #[derive(Default)] struct Point { x: i32, y: i32, } impl fmt::Display for Point { fn fmt(&amp;amp;self, f: &amp;amp;mut fmt::Formatter&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; fmt::Result { write!(f, &amp;#34;({}, {})&amp;#34;, self.x, self.y) } } fn main() { println!(&amp;#34;origin: {}&amp;#34;, Point::default()); // prints &amp;#34;origin: (0, 0)&amp;#34;  // get Point&amp;#39;s Display representation as a String  let stringified_point = format!(&amp;#34;{}&amp;#34;, Point::default()); assert_eq!(&amp;#34;(0, 0)&amp;#34;, stringified_point); // ✅ } Aside from using the format! macro to get a type&amp;rsquo;s display representation as a String we can use the ToString trait:
trait ToString { fn to_string(&amp;amp;self) -&amp;gt; String; } There&amp;rsquo;s no need for us to impl this ourselves. In fact we can&amp;rsquo;t, because of this generic blanket impl that automatically impls ToString for any type which impls Display:
impl&amp;lt;T: Display &#43; ?Sized&amp;gt; ToString for T; Using ToString with Point:
#[test] // ✅ fn display_point() { let origin = Point::default(); assert_eq!(format!(&amp;#34;{}&amp;#34;, origin), &amp;#34;(0, 0)&amp;#34;); } #[test] // ✅ fn point_to_string() { let origin = Point::default(); assert_eq!(origin.to_string(), &amp;#34;(0, 0)&amp;#34;); } #[test] // ✅ fn display_equals_to_string() { let origin = Point::default(); assert_eq!(format!(&amp;#34;{}&amp;#34;, origin), origin.to_string()); } Debug Prerequisites
 Self Methods Derive Macros Display &amp;amp; ToString  trait Debug { fn fmt(&amp;amp;self, f: &amp;amp;mut Formatter&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; Result; } Debug has an identical signature to Display. The only difference is that the Debug impl is called when we use the {:?} formatting specifier. Debug can be derived:
use std::fmt; #[derive(Debug)] struct Point { x: i32, y: i32, } // derive macro generates impl below impl fmt::Debug for Point { fn fmt(&amp;amp;self, f: &amp;amp;mut fmt::Formatter&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; fmt::Result { f.debug_struct(&amp;#34;Point&amp;#34;) .field(&amp;#34;x&amp;#34;, &amp;amp;self.x) .field(&amp;#34;y&amp;#34;, &amp;amp;self.y) .finish() } } Impling Debug for a type also allows it to be used within the dbg! macro which is superior to println! for quick and dirty print logging. Some of its advantages:
 dbg! prints to stderr instead of stdout so the debug logs are easy to separate from the actual stdout output of our program. dbg! prints the expression passed to it as well as the value the expression evaluated to. dbg! takes ownership of its arguments and returns them so you can use it within expressions:  fn some_condition() -&amp;gt; bool { true } // no logging fn example() { if some_condition() { // some code  } } // println! logging fn example_println() { // 🤦  let result = some_condition(); println!(&amp;#34;{}&amp;#34;, result); // just prints &amp;#34;true&amp;#34;  if result { // some code  } } // dbg! logging fn example_dbg() { // 😍  if dbg!(some_condition()) { // prints &amp;#34;[src/main.rs:22] some_condition() = true&amp;#34;  // some code  } } The only downside is that dbg! isn&amp;rsquo;t automatically stripped in release builds so we have to manually remove it from our code if we don&amp;rsquo;t want to ship it in the final executable.
Operator Traits All operators in Rust are associated with traits. If we&amp;rsquo;d like to impl operators for our types we have to impl the associated traits.
   Trait(s) Category Operator(s) Description     Eq, PartialEq comparison == equality   Ord, PartialOrd comparison &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;= comparison   Add arithmetic &#43; addition   AddAssign arithmetic &#43;= addition assignment   BitAnd arithmetic &amp;amp; bitwise AND   BitAndAssign arithmetic &amp;amp;= bitwise assignment   BitXor arithmetic ^ bitwise XOR   BitXorAssign arithmetic ^= bitwise XOR assignment   Div arithmetic / division   DivAssign arithmetic /= division assignment   Mul arithmetic * multiplication   MulAssign arithmetic *= multiplication assignment   Neg arithmetic - unary negation   Not arithmetic ! unary logical negation   Rem arithmetic % remainder   RemAssign arithmetic %= remainder assignment   Shl arithmetic &amp;lt;&amp;lt; left shift   ShlAssign arithmetic &amp;lt;&amp;lt;= left shift assignment   Shr arithmetic &amp;gt;&amp;gt; right shift   ShrAssign arithmetic &amp;gt;&amp;gt;= right shift assignment   Sub arithmetic - subtraction   SubAssign arithmetic -= subtraction assignment   Fn closure (...args) immutable closure invocation   FnMut closure (...args) mutable closure invocation   FnOnce closure (...args) one-time closure invocation   Deref other * immutable dereference   DerefMut other * mutable derenence   Drop other - type destructor   Index other [] immutable index   IndexMut other [] mutable index   RangeBounds other .. range    Comparison Traits    Trait(s) Category Operator(s) Description     Eq, PartialEq comparison == equality   Ord, PartialOrd comparison &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;= comparison    PartialEq &amp;amp; Eq Prerequisites
 Self Methods Generic Parameters Default Impls Generic Blanket Impls Marker Traits Subtraits &amp;amp; Supertraits Sized  trait PartialEq&amp;lt;Rhs = Self&amp;gt; where Rhs: ?Sized, { fn eq(&amp;amp;self, other: &amp;amp;Rhs) -&amp;gt; bool; // provided default impls  fn ne(&amp;amp;self, other: &amp;amp;Rhs) -&amp;gt; bool; } PartialEq&amp;lt;Rhs&amp;gt; types can be checked for equality to Rhs types using the == operator.
All PartialEq&amp;lt;Rhs&amp;gt; impls must ensure that equality is symmetric and transitive. That means for all a, b, and c:
 a == b implies b == a (symmetry) a == b &amp;amp;&amp;amp; b == c implies a == c (transitivity)  By default Rhs = Self because we almost always want to compare instances of a type to each other, and not to instances of different types. This also automatically guarantees our impl is symmetric and transitive.
struct Point { x: i32, y: i32 } // Rhs == Self == Point impl PartialEq for Point { // impl automatically symmetric &amp;amp; transitive  fn eq(&amp;amp;self, other: &amp;amp;Point) -&amp;gt; bool { self.x == other.x &amp;amp;&amp;amp; self.y == other.y } } If all the members of a type impl PartialEq then it can be derived:
#[derive(PartialEq)] struct Point { x: i32, y: i32 } #[derive(PartialEq)] enum Suit { Spade, Heart, Club, Diamond, } Once we impl PartialEq for our type we also get equality comparisons between references of our type for free thanks to these generic blanket impls:
// this impl only gives us: Point == Point #[derive(PartialEq)] struct Point { x: i32, y: i32 } // all of the generic blanket impls below // are provided by the standard library  // this impl gives us: &amp;amp;Point == &amp;amp;Point impl&amp;lt;A, B&amp;gt; PartialEq&amp;lt;&amp;amp;&amp;#39;_ B&amp;gt; for &amp;amp;&amp;#39;_ A where A: PartialEq&amp;lt;B&amp;gt; &#43; ?Sized, B: ?Sized; // this impl gives us: &amp;amp;mut Point == &amp;amp;Point impl&amp;lt;A, B&amp;gt; PartialEq&amp;lt;&amp;amp;&amp;#39;_ B&amp;gt; for &amp;amp;&amp;#39;_ mut A where A: PartialEq&amp;lt;B&amp;gt; &#43; ?Sized, B: ?Sized; // this impl gives us: &amp;amp;Point == &amp;amp;mut Point impl&amp;lt;A, B&amp;gt; PartialEq&amp;lt;&amp;amp;&amp;#39;_ mut B&amp;gt; for &amp;amp;&amp;#39;_ A where A: PartialEq&amp;lt;B&amp;gt; &#43; ?Sized, B: ?Sized; // this impl gives us: &amp;amp;mut Point == &amp;amp;mut Point impl&amp;lt;A, B&amp;gt; PartialEq&amp;lt;&amp;amp;&amp;#39;_ mut B&amp;gt; for &amp;amp;&amp;#39;_ mut A where A: PartialEq&amp;lt;B&amp;gt; &#43; ?Sized, B: ?Sized; Since this trait is generic we can define equality between different types. The standard library leverages this to allow checking equality between the many string-like types such as String, &amp;amp;str, PathBuf, &amp;amp;Path, OsString, &amp;amp;OsStr, and so on.
Generally, we should only impl equality between different types if they contain the same kind of data and the only difference between the types is how they represent the data or how they allow interacting with the data.
Here&amp;rsquo;s a cute but bad example of how someone might be tempted to impl PartialEq to check equality between different types that don&amp;rsquo;t meet the above criteria:
#[derive(PartialEq)] enum Suit { Spade, Club, Heart, Diamond, } #[derive(PartialEq)] enum Rank { Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King, } #[derive(PartialEq)] struct Card { suit: Suit, rank: Rank, } // check equality of Card&amp;#39;s suit impl PartialEq&amp;lt;Suit&amp;gt; for Card { fn eq(&amp;amp;self, other: &amp;amp;Suit) -&amp;gt; bool { self.suit == *other } } // check equality of Card&amp;#39;s rank impl PartialEq&amp;lt;Rank&amp;gt; for Card { fn eq(&amp;amp;self, other: &amp;amp;Rank) -&amp;gt; bool { self.rank == *other } } fn main() { let AceOfSpades = Card { suit: Suit::Spade, rank: Rank::Ace, }; assert!(AceOfSpades == Suit::Spade); // ✅  assert!(AceOfSpades == Rank::Ace); // ✅ } It works and kinda makes sense. A card which is an Ace of Spades is both an Ace and a Spade, and if we&amp;rsquo;re writing a library to handle playing cards it&amp;rsquo;s reasonable that we&amp;rsquo;d want to make it easy and convenient to individually check the suit and rank of a card. However, something&amp;rsquo;s missing: symmetry! We can Card == Suit and Card == Rank but we cannot Suit == Card or Rank == Card so let&amp;rsquo;s fix that:
// check equality of Card&amp;#39;s suit impl PartialEq&amp;lt;Suit&amp;gt; for Card { fn eq(&amp;amp;self, other: &amp;amp;Suit) -&amp;gt; bool { self.suit == *other } } // added for symmetry impl PartialEq&amp;lt;Card&amp;gt; for Suit { fn eq(&amp;amp;self, other: &amp;amp;Card) -&amp;gt; bool { *self == other.suit } } // check equality of Card&amp;#39;s rank impl PartialEq&amp;lt;Rank&amp;gt; for Card { fn eq(&amp;amp;self, other: &amp;amp;Rank) -&amp;gt; bool { self.rank == *other } } // added for symmetry impl PartialEq&amp;lt;Card&amp;gt; for Rank { fn eq(&amp;amp;self, other: &amp;amp;Card) -&amp;gt; bool { *self == other.rank } } We have symmetry! Great. Adding symmetry just broke transitivity! Oops. This is now possible:
fn main() { // Ace of Spades  let a = Card { suit: Suit::Spade, rank: Rank::Ace, }; let b = Suit::Spade; // King of Spades  let c = Card { suit: Suit::Spade, rank: Rank::King, }; assert!(a == b &amp;amp;&amp;amp; b == c); // ✅  assert!(a == c); // ❌ } A good example of impling PartialEq to check equality between different types would be a program that works with distances and uses different types to represent different units of measurement.
#[derive(PartialEq)] struct Foot(u32); #[derive(PartialEq)] struct Yard(u32); #[derive(PartialEq)] struct Mile(u32); impl PartialEq&amp;lt;Mile&amp;gt; for Foot { fn eq(&amp;amp;self, other: &amp;amp;Mile) -&amp;gt; bool { self.0 == other.0 * 5280 } } impl PartialEq&amp;lt;Foot&amp;gt; for Mile { fn eq(&amp;amp;self, other: &amp;amp;Foot) -&amp;gt; bool { self.0 * 5280 == other.0 } } impl PartialEq&amp;lt;Mile&amp;gt; for Yard { fn eq(&amp;amp;self, other: &amp;amp;Mile) -&amp;gt; bool { self.0 == other.0 * 1760 } } impl PartialEq&amp;lt;Yard&amp;gt; for Mile { fn eq(&amp;amp;self, other: &amp;amp;Yard) -&amp;gt; bool { self.0 * 1760 == other.0 } } impl PartialEq&amp;lt;Foot&amp;gt; for Yard { fn eq(&amp;amp;self, other: &amp;amp;Foot) -&amp;gt; bool { self.0 * 3 == other.0 } } impl PartialEq&amp;lt;Yard&amp;gt; for Foot { fn eq(&amp;amp;self, other: &amp;amp;Yard) -&amp;gt; bool { self.0 == other.0 * 3 } } fn main() { let a = Foot(5280); let b = Yard(1760); let c = Mile(1); // symmetry  assert!(a == b &amp;amp;&amp;amp; b == a); // ✅  assert!(b == c &amp;amp;&amp;amp; c == b); // ✅  assert!(a == c &amp;amp;&amp;amp; c == a); // ✅  // transitivity  assert!(a == b &amp;amp;&amp;amp; b == c &amp;amp;&amp;amp; a == c); // ✅  assert!(c == b &amp;amp;&amp;amp; b == a &amp;amp;&amp;amp; c == a); // ✅ } Eq is a marker trait and a subtrait of PartialEq&amp;lt;Self&amp;gt;.
trait Eq: PartialEq&amp;lt;Self&amp;gt; {} If we impl Eq for a type, on top of the symmetry &amp;amp; transitivity properties required by PartialEq, we&amp;rsquo;re also guaranteeing reflexivity, i.e. a == a for all a. In this sense Eq refines PartialEq because it represents a stricter version of equality. If all members of a type impl Eq then the Eq impl can be derived for the type.
Floats are PartialEq but not Eq because NaN != NaN. Almost all other PartialEq types are trivially Eq, unless of course if they contain floats.
Once a type impls PartialEq and Debug we can use it in the assert_eq! macro. We can also compare collections of PartialEq types.
#[derive(PartialEq, Debug)] struct Point { x: i32, y: i32, } fn example_assert(p1: Point, p2: Point) { assert_eq!(p1, p2); } fn example_compare_collections&amp;lt;T: PartialEq&amp;gt;(vec1: Vec&amp;lt;T&amp;gt;, vec2: Vec&amp;lt;T&amp;gt;) { // if T: PartialEq this now works!  if vec1 == vec2 { // some code  } else { // other code  } } Hash Prerequisites
 Self Methods Generic Parameters Default Impls Derive Macros PartialEq &amp;amp; Eq  trait Hash { fn hash&amp;lt;H: Hasher&amp;gt;(&amp;amp;self, state: &amp;amp;mut H); // provided default impls  fn hash_slice&amp;lt;H: Hasher&amp;gt;(data: &amp;amp;[Self], state: &amp;amp;mut H); } This trait is not associated with any operator, but the best time to talk about it is right after PartialEq &amp;amp; Eq so here it is. Hash types can be hashed using a Hasher.
use std:#️⃣:Hasher; use std:#️⃣:Hash; struct Point { x: i32, y: i32, } impl Hash for Point { fn hash&amp;lt;H: Hasher&amp;gt;(&amp;amp;self, hasher: &amp;amp;mut H) { hasher.write_i32(self.x); hasher.write_i32(self.y); } } There&amp;rsquo;s a derive macro which generates the same impl as above:
#[derive(Hash)] struct Point { x: i32, y: i32, } If a type impls both Hash and Eq those impls must agree with each other such that for all a and b if a == b then a.hash() == b.hash(). So we should always use the derive macro to impl both or manually impl both, but not mix the two, otherwise we risk breaking the above invariant.
The main benefit of impling Eq and Hash for a type is that it allows us to store that type as keys in HashMaps and HashSets.
use std::collections::HashSet; // now our type can be stored // in HashSets and HashMaps! #[derive(PartialEq, Eq, Hash)] struct Point { x: i32, y: i32, } fn example_hashset() { let mut points = HashSet::new(); points.insert(Point { x: 0, y: 0 }); // ✅ } PartialOrd &amp;amp; Ord Prerequisites
 Self Methods Generic Parameters Default Impls Subtraits &amp;amp; Supertraits Derive Macros Sized PartialEq &amp;amp; Eq  enum Ordering { Less, Equal, Greater, } trait PartialOrd&amp;lt;Rhs = Self&amp;gt;: PartialEq&amp;lt;Rhs&amp;gt; where Rhs: ?Sized, { fn partial_cmp(&amp;amp;self, other: &amp;amp;Rhs) -&amp;gt; Option&amp;lt;Ordering&amp;gt;; // provided default impls  fn lt(&amp;amp;self, other: &amp;amp;Rhs) -&amp;gt; bool; fn le(&amp;amp;self, other: &amp;amp;Rhs) -&amp;gt; bool; fn gt(&amp;amp;self, other: &amp;amp;Rhs) -&amp;gt; bool; fn ge(&amp;amp;self, other: &amp;amp;Rhs) -&amp;gt; bool; } PartialOrd&amp;lt;Rhs&amp;gt; types can be compared to Rhs types using the &amp;lt;, &amp;lt;=, &amp;gt;, and &amp;gt;= operators.
All PartialOrd impls must ensure that comparisons are asymmetric and transitive. That means for all a, b, and c:
 a &amp;lt; b implies !(a &amp;gt; b) (asymmetry) a &amp;lt; b &amp;amp;&amp;amp; b &amp;lt; c implies a &amp;lt; c (transitivity)  PartialOrd is a subtrait of PartialEq and their impls must always agree with each other.
fn must_always_agree&amp;lt;T: PartialOrd &#43; PartialEq&amp;gt;(t1: T, t2: T) { assert_eq!(t1.partial_cmp(&amp;amp;t2) == Some(Ordering::Equal), t1 == t2); } PartialOrd refines PartialEq in the sense that when comparing PartialEq types we can check if they are equal or not equal, but when comparing PartialOrd types we can check if they are equal or not equal, and if they are not equal we can check if they are unequal because the first item is less than or greater than the second item.
By default Rhs = Self because we almost always want to compare instances of a type to each other, and not to instances of different types. This also automatically guarantees our impl is symmetric and transitive.
use std::cmp::Ordering; #[derive(PartialEq, PartialOrd)] struct Point { x: i32, y: i32 } // Rhs == Self == Point impl PartialOrd for Point { // impl automatically symmetric &amp;amp; transitive  fn partial_cmp(&amp;amp;self, other: &amp;amp;Point) -&amp;gt; Option&amp;lt;Ordering&amp;gt; { Some(match self.x.cmp(&amp;amp;other.x) { Ordering::Equal =&amp;gt; self.y.cmp(&amp;amp;other.y), ordering =&amp;gt; ordering, }) } } If all the members of a type impl PartialOrd then it can be derived:
#[derive(PartialEq, PartialOrd)] struct Point { x: i32, y: i32, } #[derive(PartialEq, PartialOrd)] enum Stoplight { Red, Yellow, Green, } The PartialOrd derive macro orders types based on the lexicographical order of their members:
// generates PartialOrd impl which orders // Points based on x member first and // y member second because that&amp;#39;s the order // they appear in the source code #[derive(PartialOrd, PartialEq)] struct Point { x: i32, y: i32, } // generates DIFFERENT PartialOrd impl // which orders Points based on y member // first and x member second #[derive(PartialOrd, PartialEq)] struct Point { y: i32, x: i32, } Ord is a subtrait of Eq and PartialOrd&amp;lt;Self&amp;gt;:
trait Ord: Eq &#43; PartialOrd&amp;lt;Self&amp;gt; { fn cmp(&amp;amp;self, other: &amp;amp;Self) -&amp;gt; Ordering; // provided default impls  fn max(self, other: Self) -&amp;gt; Self; fn min(self, other: Self) -&amp;gt; Self; fn clamp(self, min: Self, max: Self) -&amp;gt; Self; } If we impl Ord for a type, on top of the asymmetry &amp;amp; transitivity properties required by PartialOrd, we&amp;rsquo;re also guaranteeing that the asymmetry is total, i.e. exactly one of a &amp;lt; b, a == b or a &amp;gt; b is true for any given a and b. In this sense Ord refines Eq and PartialOrd because it represents a stricter version of comparisons. If a type impls Ord we can use that impl to trivially impl PartialOrd, PartialEq, and Eq:
use std::cmp::Ordering; // of course we can use the derive macros here #[derive(Ord, PartialOrd, Eq, PartialEq)] struct Point { x: i32, y: i32, } // note: as with PartialOrd, the Ord derive macro // orders a type based on the lexicographical order // of its members  // but here&amp;#39;s the impls if we wrote them out by hand impl Ord for Point { fn cmp(&amp;amp;self, other: &amp;amp;Self) -&amp;gt; Ordering { match self.x.cmp(&amp;amp;self.y) { Ordering::Equal =&amp;gt; self.y.cmp(&amp;amp;self.y), ordering =&amp;gt; ordering, } } } impl PartialOrd for Point { fn partial_cmp(&amp;amp;self, other: &amp;amp;Self) -&amp;gt; Option&amp;lt;Ordering&amp;gt; { Some(self.cmp(other)) } } impl PartialEq for Point { fn eq(&amp;amp;self, other: &amp;amp;Self) -&amp;gt; bool { self.cmp(other) == Ordering::Equal } } impl Eq for Point {} Floats impl PartialOrd but not Ord because both NaN &amp;lt; 0 == false and NaN &amp;gt;= 0 == false are simultaneously true. Almost all other PartialOrd types are trivially Ord, unless of course if they contain floats.
Once a type impls Ord we can store it in BTreeMaps and BTreeSets as well as easily sort it using the sort() method on slices and any types which deref to slices such as arrays, Vecs, and VecDeques.
use std::collections::BTreeSet; // now our type can be stored // in BTreeSets and BTreeMaps! #[derive(Ord, PartialOrd, PartialEq, Eq)] struct Point { x: i32, y: i32, } fn example_btreeset() { let mut points = BTreeSet::new(); points.insert(Point { x: 0, y: 0 }); // ✅ } // we can also .sort() Ord types in collections! fn example_sort&amp;lt;T: Ord&amp;gt;(mut sortable: Vec&amp;lt;T&amp;gt;) -&amp;gt; Vec&amp;lt;T&amp;gt; { sortable.sort(); sortable } Arithmetic Traits    Trait(s) Category Operator(s) Description     Add arithmetic &#43; addition   AddAssign arithmetic &#43;= addition assignment   BitAnd arithmetic &amp;amp; bitwise AND   BitAndAssign arithmetic &amp;amp;= bitwise assignment   BitXor arithmetic ^ bitwise XOR   BitXorAssign arithmetic ^= bitwise XOR assignment   Div arithmetic / division   DivAssign arithmetic /= division assignment   Mul arithmetic * multiplication   MulAssign arithmetic *= multiplication assignment   Neg arithmetic - unary negation   Not arithmetic ! unary logical negation   Rem arithmetic % remainder   RemAssign arithmetic %= remainder assignment   Shl arithmetic &amp;lt;&amp;lt; left shift   ShlAssign arithmetic &amp;lt;&amp;lt;= left shift assignment   Shr arithmetic &amp;gt;&amp;gt; right shift   ShrAssign arithmetic &amp;gt;&amp;gt;= right shift assignment   Sub arithmetic - subtraction   SubAssign arithmetic -= subtraction assignment    Going over all of these would be very redundant. Most of these only apply to number types anyway. We&amp;rsquo;ll only go over Add and AddAssign since the &#43; operator is commonly overloaded to do other stuff like adding items to collections or concatenating things together, that way we cover the most interesting ground and don&amp;rsquo;t repeat ourselves.
Add &amp;amp; AddAssign Prerequisites
 Self Methods Associated Types Generic Parameters Generic Types vs Associated Types Derive Macros  trait Add&amp;lt;Rhs = Self&amp;gt; { type Output; fn add(self, rhs: Rhs) -&amp;gt; Self::Output; } Add&amp;lt;Rhs, Output = T&amp;gt; types can be added to Rhs types and will produce T as output.
Example Add&amp;lt;Point, Output = Point&amp;gt; impl for Point:
#[derive(Clone, Copy)] struct Point { x: i32, y: i32, } impl Add for Point { type Output = Point; fn add(self, rhs: Point) -&amp;gt; Point { Point { x: self.x &#43; rhs.x, y: self.y &#43; rhs.y, } } } fn main() { let p1 = Point { x: 1, y: 2 }; let p2 = Point { x: 3, y: 4 }; let p3 = p1 &#43; p2; assert_eq!(p3.x, p1.x &#43; p2.x); // ✅  assert_eq!(p3.y, p1.y &#43; p2.y); // ✅ } But what if we only had references to Points? Can we still add them then? Let&amp;rsquo;s try:
fn main() { let p1 = Point { x: 1, y: 2 }; let p2 = Point { x: 3, y: 4 }; let p3 = &amp;amp;p1 &#43; &amp;amp;p2; // ❌ } Unfortunately not. The compiler throws:
error[E0369]: cannot add `&amp;amp;Point` to `&amp;amp;Point` --&amp;gt; src/main.rs:50:25 | 50 | let p3: Point = &amp;amp;p1 &#43; &amp;amp;p2; | --- ^ --- &amp;amp;Point | | | &amp;amp;Point | = note: an implementation of `std::ops::Add` might be missing for `&amp;amp;Point` Within Rust&amp;rsquo;s type system, for some type T, the types T, &amp;amp;T, and &amp;amp;mut T are all treated as unique distinct types which means we have to provide trait impls for each of them separately. Let&amp;rsquo;s define an Add impl for &amp;amp;Point:
impl Add for &amp;amp;Point { type Output = Point; fn add(self, rhs: &amp;amp;Point) -&amp;gt; Point { Point { x: self.x &#43; rhs.x, y: self.y &#43; rhs.y, } } } fn main() { let p1 = Point { x: 1, y: 2 }; let p2 = Point { x: 3, y: 4 }; let p3 = &amp;amp;p1 &#43; &amp;amp;p2; // ✅  assert_eq!(p3.x, p1.x &#43; p2.x); // ✅  assert_eq!(p3.y, p1.y &#43; p2.y); // ✅ } However, something still doesn&amp;rsquo;t feel quite right. We have two separate impls of Add for Point and &amp;amp;Point and they happen to do the same thing currently but there&amp;rsquo;s no guarantee that they will in the future! For example, let&amp;rsquo;s say we decide that when we add two Points together we want to create a Line containing those two Points instead of creating a new Point, we&amp;rsquo;d update our Add impl like this:
use std::ops::Add; #[derive(Copy, Clone)] struct Point { x: i32, y: i32, } #[derive(Copy, Clone)] struct Line { start: Point, end: Point, } // we updated this impl impl Add for Point { type Output = Line; fn add(self, rhs: Point) -&amp;gt; Line { Line { start: self, end: rhs, } } } // but forgot to update this impl, uh oh! impl Add for &amp;amp;Point { type Output = Point; fn add(self, rhs: &amp;amp;Point) -&amp;gt; Point { Point { x: self.x &#43; rhs.x, y: self.y &#43; rhs.y, } } } fn main() { let p1 = Point { x: 1, y: 2 }; let p2 = Point { x: 3, y: 4 }; let line: Line = p1 &#43; p2; // ✅  let p1 = Point { x: 1, y: 2 }; let p2 = Point { x: 3, y: 4 }; let line: Line = &amp;amp;p1 &#43; &amp;amp;p2; // ❌ expected Line, found Point } Our current impl of Add for &amp;amp;Point creates an unnecessary maintenance burden, we want the impl to match Point&#39;s impl without having to manually update it every time we change Point&#39;s impl. We&amp;rsquo;d like to keep our code as DRY (Don&amp;rsquo;t Repeat Yourself) as possible. Luckily this is achievable:
// updated, DRY impl impl Add for &amp;amp;Point { type Output = &amp;lt;Point as Add&amp;gt;::Output; fn add(self, rhs: &amp;amp;Point) -&amp;gt; Self::Output { Point::add(*self, *rhs) } } fn main() { let p1 = Point { x: 1, y: 2 }; let p2 = Point { x: 3, y: 4 }; let line: Line = p1 &#43; p2; // ✅  let p1 = Point { x: 1, y: 2 }; let p2 = Point { x: 3, y: 4 }; let line: Line = &amp;amp;p1 &#43; &amp;amp;p2; // ✅ } AddAssign&amp;lt;Rhs&amp;gt; types allow us to add &#43; assign Rhs types to them. The trait declaration:
trait AddAssign&amp;lt;Rhs = Self&amp;gt; { fn add_assign(&amp;amp;mut self, rhs: Rhs); } Example impls for Point and &amp;amp;Point:
use std::ops::AddAssign; #[derive(Copy, Clone)] struct Point { x: i32, y: i32 } impl AddAssign for Point { fn add_assign(&amp;amp;mut self, rhs: Point) { self.x &#43;= rhs.x; self.y &#43;= rhs.y; } } impl AddAssign&amp;lt;&amp;amp;Point&amp;gt; for Point { fn add_assign(&amp;amp;mut self, rhs: &amp;amp;Point) { Point::add_assign(self, *rhs); } } fn main() { let mut p1 = Point { x: 1, y: 2 }; let p2 = Point { x: 3, y: 4 }; p1 &#43;= &amp;amp;p2; p1 &#43;= p2; assert!(p1.x == 7 &amp;amp;&amp;amp; p1.y == 10); } Closure Traits    Trait(s) Category Operator(s) Description     Fn closure (...args) immutable closure invocation   FnMut closure (...args) mutable closure invocation   FnOnce closure (...args) one-time closure invocation    FnOnce, FnMut, &amp;amp; Fn Prerequisites
 Self Methods Associated Types Generic Parameters Generic Types vs Associated Types Subtraits &amp;amp; Supertraits  trait FnOnce&amp;lt;Args&amp;gt; { type Output; fn call_once(self, args: Args) -&amp;gt; Self::Output; } trait FnMut&amp;lt;Args&amp;gt;: FnOnce&amp;lt;Args&amp;gt; { fn call_mut(&amp;amp;mut self, args: Args) -&amp;gt; Self::Output; } trait Fn&amp;lt;Args&amp;gt;: FnMut&amp;lt;Args&amp;gt; { fn call(&amp;amp;self, args: Args) -&amp;gt; Self::Output; } Although these traits exist it&amp;rsquo;s not possible to impl them for our own types in stable Rust. The only types we can create which impl these traits are closures. Depending on what the closure captures from its environment determines whether it impls FnOnce, FnMut, or Fn.
An FnOnce closure can only be called once because it consumes some value as part of its execution:
fn main() { let range = 0..10; let get_range_count = || range.count(); assert_eq!(get_range_count(), 10); // ✅  get_range_count(); // ❌ } The .count() method on iterators consumes the iterator so it can only be called once. Hence our closure can only be called once. Which is why when we try to call it a second time we get this error:
error[E0382]: use of moved value: `get_range_count` --&amp;gt; src/main.rs:5:5 | 4 | assert_eq!(get_range_count(), 10); | ----------------- `get_range_count` moved due to this call 5 | get_range_count(); | ^^^^^^^^^^^^^^^ value used here after move | note: closure cannot be invoked more than once because it moves the variable `range` out of its environment --&amp;gt; src/main.rs:3:30 | 3 | let get_range_count = || range.count(); | ^^^^^ note: this value implements `FnOnce`, which causes it to be moved when called --&amp;gt; src/main.rs:4:16 | 4 | assert_eq!(get_range_count(), 10); | ^^^^^^^^^^^^^^^ An FnMut closure can be called multiple times and can also mutate variables it has captured from its environment. We might say FnMut closures perform side-effects or are stateful. Here&amp;rsquo;s an example of a closure that filters out all non-ascending values from an iterator by keeping track of the smallest value it has seen so far:
fn main() { let nums = vec![0, 4, 2, 8, 10, 7, 15, 18, 13]; let mut min = i32::MIN; let ascending = nums.into_iter().filter(|&amp;amp;n| { if n &amp;lt;= min { false } else { min = n; true } }).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;(); assert_eq!(vec![0, 4, 8, 10, 15, 18], ascending); // ✅ } FnMut refines FnOnce in the sense that FnOnce requires taking ownership of its arguments and can only be called once, but FnMut requires only taking mutable references and can be called multiple times. FnMut can be used anywhere FnOnce can be used.
An Fn closure can be called multiple times and does not mutate any variables it has captured from its environment. We might say Fn closures have no side-effects or are stateless. Here&amp;rsquo;s an example closure that filters out all values less than some stack variable it captures from its environment from an iterator:
fn main() { let nums = vec![0, 4, 2, 8, 10, 7, 15, 18, 13]; let min = 9; let greater_than_9 = nums.into_iter().filter(|&amp;amp;n| n &amp;gt; min).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;(); assert_eq!(vec![10, 15, 18, 13], greater_than_9); // ✅ } Fn refines FnMut in the sense that FnMut requires mutable references and can be called multiple times, but Fn only requires immutable references and can be called multiple times. Fn can be used anywhere FnMut can be used, which includes anywhere FnOnce can be used.
If a closure doesn&amp;rsquo;t capture anything from its environment it&amp;rsquo;s technically not a closure, but just an anonymously declared inline function, and can be casted to, used, and passed around as a regular function pointer, i.e. fn. Function pointers can be used anywhere Fn can be used, which includes anwhere FnMut and FnOnce can be used.
fn add_one(x: i32) -&amp;gt; i32 { x &#43; 1 } fn main() { let mut fn_ptr: fn(i32) -&amp;gt; i32 = add_one; assert_eq!(fn_ptr(1), 2); // ✅  // capture-less closure cast to fn pointer  fn_ptr = |x| x &#43; 1; // same as add_one  assert_eq!(fn_ptr(1), 2); // ✅ } Example of passing a regular function pointer in place of a closure:
fn main() { let nums = vec![-1, 1, -2, 2, -3, 3]; let absolutes: Vec&amp;lt;i32&amp;gt; = nums.into_iter().map(i32::abs).collect(); assert_eq!(vec![1, 1, 2, 2, 3, 3], absolutes); // ✅ } Other Traits    Trait(s) Category Operator(s) Description     Deref other * immutable dereference   DerefMut other * mutable derenence   Drop other - type destructor   Index other [] immutable index   IndexMut other [] mutable index   RangeBounds other .. range    Deref &amp;amp; DerefMut Prerequisites
 Self Methods Associated Types Subtraits &amp;amp; Supertraits Sized  trait Deref { type Target: ?Sized; fn deref(&amp;amp;self) -&amp;gt; &amp;amp;Self::Target; } trait DerefMut: Deref { fn deref_mut(&amp;amp;mut self) -&amp;gt; &amp;amp;mut Self::Target; } Deref&amp;lt;Target = T&amp;gt; types can dereferenced to T types using the dereference operator *. This has obvious use-cases for smart pointer types like Box and Rc. However, we rarely see the dereference operator explicitly used in Rust code, and that&amp;rsquo;s because of a Rust feature called deref coercion.
Rust automatically dereferences types when they&amp;rsquo;re being passed as function arguments, returned from a function, or used as part of a method call. This is the reason why we can pass &amp;amp;String and &amp;amp;Vec&amp;lt;T&amp;gt; to functions expecting &amp;amp;str and &amp;amp;[T] because String impls Deref&amp;lt;Target = str&amp;gt; and Vec&amp;lt;T&amp;gt; impls Deref&amp;lt;Target = [T]&amp;gt;.
Deref and DerefMut should only be implemented for smart pointer types. The most common way people attempt to misuse and abuse these traits is to try to shoehorn some kind of OOP-style data inheritance into Rust. This does not work. Rust is not OOP. Let&amp;rsquo;s examine a few different situations where, how, and why it does not work. Let&amp;rsquo;s start with this example:
use std::ops::Deref; struct Human { health_points: u32, } enum Weapon { Spear, Axe, Sword, } // a Soldier is just a Human with a Weapon struct Soldier { human: Human, weapon: Weapon, } impl Deref for Soldier { type Target = Human; fn deref(&amp;amp;self) -&amp;gt; &amp;amp;Human { &amp;amp;self.human } } enum Mount { Horse, Donkey, Cow, } // a Knight is just a Soldier with a Mount struct Knight { soldier: Soldier, mount: Mount, } impl Deref for Knight { type Target = Soldier; fn deref(&amp;amp;self) -&amp;gt; &amp;amp;Soldier { &amp;amp;self.soldier } } enum Spell { MagicMissile, FireBolt, ThornWhip, } // a Mage is just a Human who can cast Spells struct Mage { human: Human, spells: Vec&amp;lt;Spell&amp;gt;, } impl Deref for Mage { type Target = Human; fn deref(&amp;amp;self) -&amp;gt; &amp;amp;Human { &amp;amp;self.human } } enum Staff { Wooden, Metallic, Plastic, } // a Wizard is just a Mage with a Staff struct Wizard { mage: Mage, staff: Staff, } impl Deref for Wizard { type Target = Mage; fn deref(&amp;amp;self) -&amp;gt; &amp;amp;Mage { &amp;amp;self.mage } } fn borrows_human(human: &amp;amp;Human) {} fn borrows_soldier(soldier: &amp;amp;Soldier) {} fn borrows_knight(knight: &amp;amp;Knight) {} fn borrows_mage(mage: &amp;amp;Mage) {} fn borrows_wizard(wizard: &amp;amp;Wizard) {} fn example(human: Human, soldier: Soldier, knight: Knight, mage: Mage, wizard: Wizard) { // all types can be used as Humans  borrows_human(&amp;amp;human); borrows_human(&amp;amp;soldier); borrows_human(&amp;amp;knight); borrows_human(&amp;amp;mage); borrows_human(&amp;amp;wizard); // Knights can be used as Soldiers  borrows_soldier(&amp;amp;soldier); borrows_soldier(&amp;amp;knight); // Wizards can be used as Mages  borrows_mage(&amp;amp;mage); borrows_mage(&amp;amp;wizard); // Knights &amp;amp; Wizards passed as themselves  borrows_knight(&amp;amp;knight); borrows_wizard(&amp;amp;wizard); } So at first glance the above looks pretty good! However it quickly breaks down to scrutiny. First of all, deref coercion only works on references, so it doesn&amp;rsquo;t work when we actually want to pass ownership:
fn takes_human(human: Human) {} fn example(human: Human, soldier: Soldier, knight: Knight, mage: Mage, wizard: Wizard) { // all types CANNOT be used as Humans  takes_human(human); takes_human(soldier); // ❌  takes_human(knight); // ❌  takes_human(mage); // ❌  takes_human(wizard); // ❌ } Furthermore, deref coercion doesn&amp;rsquo;t work in generic contexts. Let&amp;rsquo;s say we impl some trait only on humans:
trait Rest { fn rest(&amp;amp;self); } impl Rest for Human { fn rest(&amp;amp;self) {} } fn take_rest&amp;lt;T: Rest&amp;gt;(rester: &amp;amp;T) { rester.rest() } fn example(human: Human, soldier: Soldier, knight: Knight, mage: Mage, wizard: Wizard) { // all types CANNOT be used as Rest types, only Human  take_rest(&amp;amp;human); take_rest(&amp;amp;soldier); // ❌  take_rest(&amp;amp;knight); // ❌  take_rest(&amp;amp;mage); // ❌  take_rest(&amp;amp;wizard); // ❌ } Also, although deref coercion works in a lot of places it doesn&amp;rsquo;t work everywhere. It doesn&amp;rsquo;t work on operands, even though operators are just syntax sugar for method calls. Let&amp;rsquo;s say, to be cute, we wanted Mages to learn Spells using the &#43;= operator:
impl DerefMut for Wizard { fn deref_mut(&amp;amp;mut self) -&amp;gt; &amp;amp;mut Mage { &amp;amp;mut self.mage } } impl AddAssign&amp;lt;Spell&amp;gt; for Mage { fn add_assign(&amp;amp;mut self, spell: Spell) { self.spells.push(spell); } } fn example(mut mage: Mage, mut wizard: Wizard, spell: Spell) { mage &#43;= spell; wizard &#43;= spell; // ❌ wizard not coerced to mage here  wizard.add_assign(spell); // oof, we have to call it like this 🤦 } In languages with OOP-style data inheritance the value of self within a method is always equal to the type which called the method but in the case of Rust the value of self is always equal to the type which implemented the method:
struct Human { profession: &amp;amp;&amp;#39;static str, health_points: u32, } impl Human { // self will always be a Human here, even if we call it on a Soldier  fn state_profession(&amp;amp;self) { println!(&amp;#34;I&amp;#39;m a {}!&amp;#34;, self.profession); } } struct Soldier { profession: &amp;amp;&amp;#39;static str, human: Human, weapon: Weapon, } fn example(soldier: &amp;amp;Soldier) { assert_eq!(&amp;#34;servant&amp;#34;, soldier.human.profession); assert_eq!(&amp;#34;spearman&amp;#34;, soldier.profession); soldier.human.state_profession(); // prints &amp;#34;I&amp;#39;m a servant!&amp;#34;  soldier.state_profession(); // still prints &amp;#34;I&amp;#39;m a servant!&amp;#34; 🤦 } The above gotcha is especially damning when impling Deref or DerefMut on a newtype. Let&amp;rsquo;s say we want to create a SortedVec type which is just a Vec but it&amp;rsquo;s always in sorted order. Here&amp;rsquo;s how we might do that:
struct SortedVec&amp;lt;T: Ord&amp;gt;(Vec&amp;lt;T&amp;gt;); impl&amp;lt;T: Ord&amp;gt; SortedVec&amp;lt;T&amp;gt; { fn new(mut vec: Vec&amp;lt;T&amp;gt;) -&amp;gt; Self { vec.sort(); SortedVec(vec) } fn push(&amp;amp;mut self, t: T) { self.0.push(t); self.0.sort(); } } Obviously we cannot impl DerefMut&amp;lt;Target = Vec&amp;lt;T&amp;gt;&amp;gt; here or anyone using SortedVec would be able to trivially break the sorted order. However, impling Deref&amp;lt;Target = Vec&amp;lt;T&amp;gt;&amp;gt; surely must be safe, right? Try to spot the bug in the program below:
use std::ops::Deref; struct SortedVec&amp;lt;T: Ord&amp;gt;(Vec&amp;lt;T&amp;gt;); impl&amp;lt;T: Ord&amp;gt; SortedVec&amp;lt;T&amp;gt; { fn new(mut vec: Vec&amp;lt;T&amp;gt;) -&amp;gt; Self { vec.sort(); SortedVec(vec) } fn push(&amp;amp;mut self, t: T) { self.0.push(t); self.0.sort(); } } impl&amp;lt;T: Ord&amp;gt; Deref for SortedVec&amp;lt;T&amp;gt; { type Target = Vec&amp;lt;T&amp;gt;; fn deref(&amp;amp;self) -&amp;gt; &amp;amp;Vec&amp;lt;T&amp;gt; { &amp;amp;self.0 } } fn main() { let sorted = SortedVec::new(vec![2, 8, 6, 3]); sorted.push(1); let sortedClone = sorted.clone(); sortedClone.push(4); } We never implemented Clone for SortedVec so when we call the .clone() method the compiler is using deref coercion to resolve that method call on Vec and so it returns a Vec and not a SortedVec!
fn main() { let sorted: SortedVec&amp;lt;i32&amp;gt; = SortedVec::new(vec![2, 8, 6, 3]); sorted.push(1); // still sorted  // calling clone on SortedVec actually returns a Vec 🤦  let sortedClone: Vec&amp;lt;i32&amp;gt; = sorted.clone(); sortedClone.push(4); // sortedClone no longer sorted 💀 } Anyway, none of the above limitations, constraints, or gotchas are faults of Rust because Rust was never designed to be an OO language or to support any OOP patterns in the first place.
The main takeaway from this section is do not try to be cute or clever with Deref and DerefMut impls. They&amp;rsquo;re really only appropriate for smart pointer types, which can only be implemented within the standard library for now as smart pointer types currently require unstable features and compiler magic to work. If we want functionality and behavior similar to Deref and DerefMut then what we&amp;rsquo;re actually probably looking for is AsRef and AsMut which we&amp;rsquo;ll get to later.
Index &amp;amp; IndexMut Prerequisites
 Self Methods Associated Types Generic Parameters Generic Types vs Associated Types Subtraits &amp;amp; Supertraits Sized  trait Index&amp;lt;Idx: ?Sized&amp;gt; { type Output: ?Sized; fn index(&amp;amp;self, index: Idx) -&amp;gt; &amp;amp;Self::Output; } trait IndexMut&amp;lt;Idx&amp;gt;: Index&amp;lt;Idx&amp;gt; where Idx: ?Sized { fn index_mut(&amp;amp;mut self, index: Idx) -&amp;gt; &amp;amp;mut Self::Output; } We can index [] into Index&amp;lt;T, Output = U&amp;gt; types with T values and the index operation will return &amp;amp;U values. For syntax sugar, the compiler auto inserts a deref operator * in front of any value returned from an index operation:
fn main() { // Vec&amp;lt;i32&amp;gt; impls Index&amp;lt;usize, Output = i32&amp;gt; so  // indexing Vec&amp;lt;i32&amp;gt; should produce &amp;amp;i32s and yet...  let vec = vec![1, 2, 3, 4, 5]; let num_ref: &amp;amp;i32 = vec[0]; // ❌ expected &amp;amp;i32 found i32  // above line actually desugars to  let num_ref: &amp;amp;i32 = *vec[0]; // ❌ expected &amp;amp;i32 found i32  // both of these alternatives work  let num: i32 = vec[0]; // ✅  let num_ref = &amp;amp;vec[0]; // ✅ } It&amp;rsquo;s kinda confusing at first, because it seems like the Index trait does not follow its own method signature, but really it&amp;rsquo;s just questionable syntax sugar.
Since Idx is a generic type the Index trait can be implemented many times for a given type, and in the case of Vec&amp;lt;T&amp;gt; not only can we index into it using usize but we can also index into its using Range&amp;lt;usize&amp;gt;s to get slices.
fn main() { let vec = vec![1, 2, 3, 4, 5]; assert_eq!(&amp;amp;vec[..], &amp;amp;[1, 2, 3, 4, 5]); // ✅  assert_eq!(&amp;amp;vec[1..], &amp;amp;[2, 3, 4, 5]); // ✅  assert_eq!(&amp;amp;vec[..4], &amp;amp;[1, 2, 3, 4]); // ✅  assert_eq!(&amp;amp;vec[1..4], &amp;amp;[2, 3, 4]); // ✅ } To show off how we might impl Index ourselves here&amp;rsquo;s a fun example which shows how we can use a newtype and the Index trait to impl wrapping indexes and negative indexes on a Vec:
use std::ops::Index; struct WrappingIndex&amp;lt;T&amp;gt;(Vec&amp;lt;T&amp;gt;); impl&amp;lt;T&amp;gt; Index&amp;lt;usize&amp;gt; for WrappingIndex&amp;lt;T&amp;gt; { type Output = T; fn index(&amp;amp;self, index: usize) -&amp;gt; &amp;amp;T { &amp;amp;self.0[index % self.0.len()] } } impl&amp;lt;T&amp;gt; Index&amp;lt;i128&amp;gt; for WrappingIndex&amp;lt;T&amp;gt; { type Output = T; fn index(&amp;amp;self, index: i128) -&amp;gt; &amp;amp;T { let self_len = self.0.len() as i128; let idx = (((index % self_len) &#43; self_len) % self_len) as usize; &amp;amp;self.0[idx] } } #[test] // ✅ fn indexes() { let wrapping_vec = WrappingIndex(vec![1, 2, 3]); assert_eq!(1, wrapping_vec[0_usize]); assert_eq!(2, wrapping_vec[1_usize]); assert_eq!(3, wrapping_vec[2_usize]); } #[test] // ✅ fn wrapping_indexes() { let wrapping_vec = WrappingIndex(vec![1, 2, 3]); assert_eq!(1, wrapping_vec[3_usize]); assert_eq!(2, wrapping_vec[4_usize]); assert_eq!(3, wrapping_vec[5_usize]); } #[test] // ✅ fn neg_indexes() { let wrapping_vec = WrappingIndex(vec![1, 2, 3]); assert_eq!(1, wrapping_vec[-3_i128]); assert_eq!(2, wrapping_vec[-2_i128]); assert_eq!(3, wrapping_vec[-1_i128]); } #[test] // ✅ fn wrapping_neg_indexes() { let wrapping_vec = WrappingIndex(vec![1, 2, 3]); assert_eq!(1, wrapping_vec[-6_i128]); assert_eq!(2, wrapping_vec[-5_i128]); assert_eq!(3, wrapping_vec[-4_i128]); } There&amp;rsquo;s no requirement that the Idx type has to be a number type or a Range, it could be an enum! Here&amp;rsquo;s an example using basketball positions to index into a basketball team to retrieve players on the team:
use std::ops::Index; enum BasketballPosition { PointGuard, ShootingGuard, Center, PowerForward, SmallForward, } struct BasketballPlayer { name: &amp;amp;&amp;#39;static str, position: BasketballPosition, } struct BasketballTeam { point_guard: BasketballPlayer, shooting_guard: BasketballPlayer, center: BasketballPlayer, power_forward: BasketballPlayer, small_forward: BasketballPlayer, } impl Index&amp;lt;BasketballPosition&amp;gt; for BasketballTeam { type Output = BasketballPlayer; fn index(&amp;amp;self, position: BasketballPosition) -&amp;gt; &amp;amp;BasketballPlayer { match position { BasketballPosition::PointGuard =&amp;gt; &amp;amp;self.point_guard, BasketballPosition::ShootingGuard =&amp;gt; &amp;amp;self.shooting_guard, BasketballPosition::Center =&amp;gt; &amp;amp;self.center, BasketballPosition::PowerForward =&amp;gt; &amp;amp;self.power_forward, BasketballPosition::SmallForward =&amp;gt; &amp;amp;self.small_forward, } } } Drop Prerequisites
 Self Methods  trait Drop { fn drop(&amp;amp;mut self); } If a type impls Drop then drop will be called on the type when it goes out of scope but before it&amp;rsquo;s destroyed. We will rarely need to impl this for our types but a good example of where it&amp;rsquo;s useful is if a type holds on to some external resources which needs to be cleaned up when the type is destroyed.
There&amp;rsquo;s a BufWriter type in the standard library that allows us to buffer writes to Write types. However, what if the BufWriter gets destroyed before the content in its buffer has been flushed to the underlying Write type? Thankfully that&amp;rsquo;s not possible! The BufWriter impls the Drop trait so that flush is always called on it whenever it goes out of scope!
impl&amp;lt;W: Write&amp;gt; Drop for BufWriter&amp;lt;W&amp;gt; { fn drop(&amp;amp;mut self) { self.flush_buf(); } } Also, Mutexs in Rust don&amp;rsquo;t have unlock() methods because they don&amp;rsquo;t need them! Calling lock() on a Mutex returns a MutexGuard which automatically unlocks the Mutex when it goes out of scope thanks to its Drop impl:
impl&amp;lt;T: ?Sized&amp;gt; Drop for MutexGuard&amp;lt;&amp;#39;_, T&amp;gt; { fn drop(&amp;amp;mut self) { unsafe { self.lock.inner.raw_unlock(); } } } In general, if you&amp;rsquo;re impling an abstraction over some resource that needs to be cleaned up after use then that&amp;rsquo;s a great reason to make use of the Drop trait.
Conversion Traits From &amp;amp; Into Prerequisites
 Self Functions Methods Generic Parameters Generic Blanket Impls  trait From&amp;lt;T&amp;gt; { fn from(T) -&amp;gt; Self; } From&amp;lt;T&amp;gt; types allow us to convert T into Self.
trait Into&amp;lt;T&amp;gt; { fn into(self) -&amp;gt; T; } Into&amp;lt;T&amp;gt; types allow us to convert Self into T.
These traits are two different sides of the same coin. We can only impl From&amp;lt;T&amp;gt; for our types because the Into&amp;lt;T&amp;gt; impl is automatically provided by this generic blanket impl:
impl&amp;lt;T, U&amp;gt; Into&amp;lt;U&amp;gt; for T where U: From&amp;lt;T&amp;gt;, { fn into(self) -&amp;gt; U { U::from(self) } } The reason both traits exist is because it allows us to write trait bounds on generic types slightly differently:
fn function&amp;lt;T&amp;gt;(t: T) where // these bounds are equivalent  T: From&amp;lt;i32&amp;gt;, i32: Into&amp;lt;T&amp;gt; { // these examples are equivalent  let example: T = T::from(0); let example: T = 0.into(); } There are no hard rules about when to use one or the other, so go with whatever makes the most sense for each situation. Now let&amp;rsquo;s look at some example impls on Point:
struct Point { x: i32, y: i32, } impl From&amp;lt;(i32, i32)&amp;gt; for Point { fn from((x, y): (i32, i32)) -&amp;gt; Self { Point { x, y } } } impl From&amp;lt;[i32; 2]&amp;gt; for Point { fn from([x, y]: [i32; 2]) -&amp;gt; Self { Point { x, y } } } fn example() { // using From  let origin = Point::from((0, 0)); let origin = Point::from([0, 0]); // using Into  let origin: Point = (0, 0).into(); let origin: Point = [0, 0].into(); } The impl is not symmetric, so if we&amp;rsquo;d like to convert Points into tuples and arrays we have to explicitly add those as well:
struct Point { x: i32, y: i32, } impl From&amp;lt;(i32, i32)&amp;gt; for Point { fn from((x, y): (i32, i32)) -&amp;gt; Self { Point { x, y } } } impl From&amp;lt;Point&amp;gt; for (i32, i32) { fn from(Point { x, y }: Point) -&amp;gt; Self { (x, y) } } impl From&amp;lt;[i32; 2]&amp;gt; for Point { fn from([x, y]: [i32; 2]) -&amp;gt; Self { Point { x, y } } } impl From&amp;lt;Point&amp;gt; for [i32; 2] { fn from(Point { x, y }: Point) -&amp;gt; Self { [x, y] } } fn example() { // from (i32, i32) into Point  let point = Point::from((0, 0)); let point: Point = (0, 0).into(); // from Point into (i32, i32)  let tuple = &amp;lt;(i32, i32)&amp;gt;::from(point); let tuple: (i32, i32) = point.into(); // from [i32; 2] into Point  let point = Point::from([0, 0]); let point: Point = [0, 0].into(); // from Point into [i32; 2]  let array = &amp;lt;[i32; 2]&amp;gt;::from(point); let array: [i32; 2] = point.into(); } A popular use of From&amp;lt;T&amp;gt; is to trim down boilerplate code. Let&amp;rsquo;s say we add a Triangle type to our program which contains three Points, here&amp;rsquo;s some of the many ways we can construct it:
struct Point { x: i32, y: i32, } impl Point { fn new(x: i32, y: i32) -&amp;gt; Point { Point { x, y } } } impl From&amp;lt;(i32, i32)&amp;gt; for Point { fn from((x, y): (i32, i32)) -&amp;gt; Point { Point { x, y } } } struct Triangle { p1: Point, p2: Point, p3: Point, } impl Triangle { fn new(p1: Point, p2: Point, p3: Point) -&amp;gt; Triangle { Triangle { p1, p2, p3 } } } impl&amp;lt;P&amp;gt; From&amp;lt;[P; 3]&amp;gt; for Triangle where P: Into&amp;lt;Point&amp;gt; { fn from([p1, p2, p3]: [P; 3]) -&amp;gt; Triangle { Triangle { p1: p1.into(), p2: p2.into(), p3: p3.into(), } } } fn example() { // manual construction  let triangle = Triangle { p1: Point { x: 0, y: 0, }, p2: Point { x: 1, y: 1, }, p3: Point { x: 2, y: 2, }, }; // using Point::new  let triangle = Triangle { p1: Point::new(0, 0), p2: Point::new(1, 1), p3: Point::new(2, 2), }; // using From&amp;lt;(i32, i32)&amp;gt; for Point  let triangle = Triangle { p1: (0, 0).into(), p2: (1, 1).into(), p3: (2, 2).into(), }; // using Triangle::new &#43; From&amp;lt;(i32, i32)&amp;gt; for Point  let triangle = Triangle::new( (0, 0).into(), (1, 1).into(), (2, 2).into(), ); // using From&amp;lt;[Into&amp;lt;Point&amp;gt;; 3]&amp;gt; for Triangle  let triangle: Triangle = [ (0, 0), (1, 1), (2, 2), ].into(); } There are no rules for when, how, or why we should impl From&amp;lt;T&amp;gt; for our types so it&amp;rsquo;s up to us to use our best judgement for every situation.
One popular use of Into&amp;lt;T&amp;gt; is to make functions which need owned values generic over whether they take owned or borrowed values:
struct Person { name: String, } impl Person { // accepts:  // - String  fn new1(name: String) -&amp;gt; Person { Person { name } } // accepts:  // - String  // - &amp;amp;String  // - &amp;amp;str  // - Box&amp;lt;str&amp;gt;  // - Cow&amp;lt;&amp;#39;_, str&amp;gt;  // - char  // since all of the above types can be converted into String  fn new2&amp;lt;N: Into&amp;lt;String&amp;gt;&amp;gt;(name: N) -&amp;gt; Person { Person { name: name.into() } } } Error Handling The best time to talk about error handling and the Error trait is after going over Display, Debug, Any, and From but before getting to TryFrom hence why the Error Handling section awkwardly bisects the Conversion Traits section.
Error Prerequisites
 Self Methods Default Impls Generic Blanket Impls Subtraits &amp;amp; Supertraits Trait Objects Display &amp;amp; ToString Debug Any From &amp;amp; Into  trait Error: Debug &#43; Display { // provided default impls  fn source(&amp;amp;self) -&amp;gt; Option&amp;lt;&amp;amp;(dyn Error &#43; &amp;#39;static)&amp;gt;; fn backtrace(&amp;amp;self) -&amp;gt; Option&amp;lt;&amp;amp;Backtrace&amp;gt;; fn description(&amp;amp;self) -&amp;gt; &amp;amp;str; fn cause(&amp;amp;self) -&amp;gt; Option&amp;lt;&amp;amp;dyn Error&amp;gt;; } In Rust errors are returned, not thrown. Let&amp;rsquo;s look at some examples.
Since dividing integer types by zero panics if we wanted to make our program safer and more explicit we could impl a safe_div function which returns a Result instead like this:
use std::fmt; use std::error; #[derive(Debug, PartialEq)] struct DivByZero; impl fmt::Display for DivByZero { fn fmt(&amp;amp;self, f: &amp;amp;mut fmt::Formatter&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; fmt::Result { write!(f, &amp;#34;division by zero error&amp;#34;) } } impl error::Error for DivByZero {} fn safe_div(numerator: i32, denominator: i32) -&amp;gt; Result&amp;lt;i32, DivByZero&amp;gt; { if denominator == 0 { return Err(DivByZero); } Ok(numerator / denominator) } #[test] // ✅ fn test_safe_div() { assert_eq!(safe_div(8, 2), Ok(4)); assert_eq!(safe_div(5, 0), Err(DivByZero)); } Since errors are returned and not thrown they must be explicitly handled, and if the current function cannot handle an error it should propagate it up to the caller. The most idiomatic way to propagate errors is to use the ? operator, which is just syntax sugar for the now deprecated try! macro which simply does this:
macro_rules! try { ($expr:expr) =&amp;gt; { match $expr { // if Ok just unwrap the value  Ok(val) =&amp;gt; val, // if Err map the err value using From and return  Err(err) =&amp;gt; { return Err(From::from(err)); } } }; } If we wanted to write a function which reads a file into a String we could write it like this, propagating the io::Errors using ? everywhere they can appear:
use std::io::Read; use std::path::Path; use std::io; use std::fs::File; fn read_file_to_string(path: &amp;amp;Path) -&amp;gt; Result&amp;lt;String, io::Error&amp;gt; { let mut file = File::open(path)?; // ⬆️ io::Error  let mut contents = String::new(); file.read_to_string(&amp;amp;mut contents)?; // ⬆️ io::Error  Ok(contents) } But let&amp;rsquo;s say the file we&amp;rsquo;re reading is actually a list of numbers and we want to sum them together, we&amp;rsquo;d update our function like this:
use std::io::Read; use std::path::Path; use std::io; use std::fs::File; fn sum_file(path: &amp;amp;Path) -&amp;gt; Result&amp;lt;i32, /* What to put here? */&amp;gt; { let mut file = File::open(path)?; // ⬆️ io::Error  let mut contents = String::new(); file.read_to_string(&amp;amp;mut contents)?; // ⬆️ io::Error  let mut sum = 0; for line in contents.lines() { sum &#43;= line.parse::&amp;lt;i32&amp;gt;()?; // ⬆️ ParseIntError  } Ok(sum) } But what&amp;rsquo;s the error type of our Result now? It can return either an io::Error or a ParseIntError. We&amp;rsquo;re going to look at three approaches for solving this problem, starting with the most quick &amp;amp; dirty way and finishing with the most robust way.
The first approach is recognizing that all types which impl Error also impl Display so we can map all the errors to Strings and use String as our error type:
use std::fs::File; use std::io; use std::io::Read; use std::path::Path; fn sum_file(path: &amp;amp;Path) -&amp;gt; Result&amp;lt;i32, String&amp;gt; { let mut file = File::open(path) .map_err(|e| e.to_string())?; // ⬆️ io::Error -&amp;gt; String  let mut contents = String::new(); file.read_to_string(&amp;amp;mut contents) .map_err(|e| e.to_string())?; // ⬆️ io::Error -&amp;gt; String  let mut sum = 0; for line in contents.lines() { sum &#43;= line.parse::&amp;lt;i32&amp;gt;() .map_err(|e| e.to_string())?; // ⬆️ ParseIntError -&amp;gt; String  } Ok(sum) } The obvious downside of stringifying every error is that we throw away type information which makes it harder for the caller to handle the errors.
One nonobvious upside to the above approach is we can customize the strings to provide more context-specific information. For example, ParseIntError usually stringifies to &amp;quot;invalid digit found in string&amp;quot; which is very vague and doesn&amp;rsquo;t mention what the invalid string is or what integer type it was trying to parse into. If we were debugging this problem that error message would almost be useless. However we can make it significantly better by providing all the context relevant information ourselves:
sum &#43;= line.parse::&amp;lt;i32&amp;gt;() .map_err(|_| format!(&amp;#34;failed to parse {} into i32&amp;#34;, line))?; The second approach takes advantage of this generic blanket impl from the standard library:
impl&amp;lt;E: error::Error&amp;gt; From&amp;lt;E&amp;gt; for Box&amp;lt;dyn error::Error&amp;gt;; Which means that any Error type can be implicitly converted into a Box&amp;lt;dyn error::Error&amp;gt; by the ? operator, so we can set to error type to Box&amp;lt;dyn error::Error&amp;gt; in the Result return type of any function which produces errors and the ? operator will do the rest of the work for us:
use std::fs::File; use std::io::Read; use std::path::Path; use std::error; fn sum_file(path: &amp;amp;Path) -&amp;gt; Result&amp;lt;i32, Box&amp;lt;dyn error::Error&amp;gt;&amp;gt; { let mut file = File::open(path)?; // ⬆️ io::Error -&amp;gt; Box&amp;lt;dyn error::Error&amp;gt;  let mut contents = String::new(); file.read_to_string(&amp;amp;mut contents)?; // ⬆️ io::Error -&amp;gt; Box&amp;lt;dyn error::Error&amp;gt;  let mut sum = 0; for line in contents.lines() { sum &#43;= line.parse::&amp;lt;i32&amp;gt;()?; // ⬆️ ParseIntError -&amp;gt; Box&amp;lt;dyn error::Error&amp;gt;  } Ok(sum) } While being more concise, this seems to suffer from the same downside of the previous approach by throwing away type information. This is mostly true, but if the caller is aware of the impl details of our function they can still handle the different errors types using the downcast_ref() method on error::Error which works the same as it does on dyn Any types:
fn handle_sum_file_errors(path: &amp;amp;Path) { match sum_file(path) { Ok(sum) =&amp;gt; println!(&amp;#34;the sum is {}&amp;#34;, sum), Err(err) =&amp;gt; { if let Some(e) = err.downcast_ref::&amp;lt;io::Error&amp;gt;() { // handle io::Error  } else if let Some(e) = err.downcast_ref::&amp;lt;ParseIntError&amp;gt;() { // handle ParseIntError  } else { // we know sum_file can only return one of the  // above errors so this branch is unreachable  unreachable!(); } } } } The third approach, which is the most robust and type-safe way to aggregate these different errors would be to build our own custom error type using an enum:
use std::num::ParseIntError; use std::fs::File; use std::io; use std::io::Read; use std::path::Path; use std::error; use std::fmt; #[derive(Debug)] enum SumFileError { Io(io::Error), Parse(ParseIntError), } impl From&amp;lt;io::Error&amp;gt; for SumFileError { fn from(err: io::Error) -&amp;gt; Self { SumFileError::Io(err) } } impl From&amp;lt;ParseIntError&amp;gt; for SumFileError { fn from(err: ParseIntError) -&amp;gt; Self { SumFileError::Parse(err) } } impl fmt::Display for SumFileError { fn fmt(&amp;amp;self, f: &amp;amp;mut fmt::Formatter&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; fmt::Result { match self { SumFileError::Io(err) =&amp;gt; write!(f, &amp;#34;sum file error: {}&amp;#34;, err), SumFileError::Parse(err) =&amp;gt; write!(f, &amp;#34;sum file error: {}&amp;#34;, err), } } } impl error::Error for SumFileError { // the default impl for this method always returns None  // but we can now override it to make it way more useful!  fn source(&amp;amp;self) -&amp;gt; Option&amp;lt;&amp;amp;(dyn error::Error &#43; &amp;#39;static)&amp;gt; { Some(match self { SumFileError::Io(err) =&amp;gt; err, SumFileError::Parse(err) =&amp;gt; err, }) } } fn sum_file(path: &amp;amp;Path) -&amp;gt; Result&amp;lt;i32, SumFileError&amp;gt; { let mut file = File::open(path)?; // ⬆️ io::Error -&amp;gt; SumFileError  let mut contents = String::new(); file.read_to_string(&amp;amp;mut contents)?; // ⬆️ io::Error -&amp;gt; SumFileError  let mut sum = 0; for line in contents.lines() { sum &#43;= line.parse::&amp;lt;i32&amp;gt;()?; // ⬆️ ParseIntError -&amp;gt; SumFileError  } Ok(sum) } fn handle_sum_file_errors(path: &amp;amp;Path) { match sum_file(path) { Ok(sum) =&amp;gt; println!(&amp;#34;the sum is {}&amp;#34;, sum), Err(SumFileError::Io(err)) =&amp;gt; { // handle io::Error  }, Err(SumFileError::Parse(err)) =&amp;gt; { // handle ParseIntError  }, } } Conversion Traits Continued TryFrom &amp;amp; TryInto Prerequisites
 Self Functions Methods Associated Types Generic Parameters Generic Types vs Associated Types Generic Blanket Impls From &amp;amp; Into Error  TryFrom and TryInto are the fallible versions of From and Into.
trait TryFrom&amp;lt;T&amp;gt; { type Error; fn try_from(value: T) -&amp;gt; Result&amp;lt;Self, Self::Error&amp;gt;; } trait TryInto&amp;lt;T&amp;gt; { type Error; fn try_into(self) -&amp;gt; Result&amp;lt;T, Self::Error&amp;gt;; } Similarly to Into we cannot impl TryInto because its impl is provided by this generic blanket impl:
impl&amp;lt;T, U&amp;gt; TryInto&amp;lt;U&amp;gt; for T where U: TryFrom&amp;lt;T&amp;gt;, { type Error = U::Error; fn try_into(self) -&amp;gt; Result&amp;lt;U, U::Error&amp;gt; { U::try_from(self) } } Let&amp;rsquo;s say that in the context of our program it doesn&amp;rsquo;t make sense for Points to have x and y values that are less than -1000 or greater than 1000. This is how we&amp;rsquo;d rewrite our earlier From impls using TryFrom to signal to the users of our type that this conversion can now fail:
use std::convert::TryFrom; use std::error; use std::fmt; struct Point { x: i32, y: i32, } #[derive(Debug)] struct OutOfBounds; impl fmt::Display for OutOfBounds { fn fmt(&amp;amp;self, f: &amp;amp;mut fmt::Formatter&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; fmt::Result { write!(f, &amp;#34;out of bounds&amp;#34;) } } impl error::Error for OutOfBounds {} // now fallible impl TryFrom&amp;lt;(i32, i32)&amp;gt; for Point { type Error = OutOfBounds; fn try_from((x, y): (i32, i32)) -&amp;gt; Result&amp;lt;Point, OutOfBounds&amp;gt; { if x.abs() &amp;gt; 1000 || y.abs() &amp;gt; 1000 { return Err(OutOfBounds); } Ok(Point { x, y }) } } // still infallible impl From&amp;lt;Point&amp;gt; for (i32, i32) { fn from(Point { x, y }: Point) -&amp;gt; Self { (x, y) } } And here&amp;rsquo;s the refactored TryFrom&amp;lt;[TryInto&amp;lt;Point&amp;gt;; 3]&amp;gt; impl for Triangle:
use std::convert::{TryFrom, TryInto}; use std::error; use std::fmt; struct Point { x: i32, y: i32, } #[derive(Debug)] struct OutOfBounds; impl fmt::Display for OutOfBounds { fn fmt(&amp;amp;self, f: &amp;amp;mut fmt::Formatter&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; fmt::Result { write!(f, &amp;#34;out of bounds&amp;#34;) } } impl error::Error for OutOfBounds {} impl TryFrom&amp;lt;(i32, i32)&amp;gt; for Point { type Error = OutOfBounds; fn try_from((x, y): (i32, i32)) -&amp;gt; Result&amp;lt;Self, Self::Error&amp;gt; { if x.abs() &amp;gt; 1000 || y.abs() &amp;gt; 1000 { return Err(OutOfBounds); } Ok(Point { x, y }) } } struct Triangle { p1: Point, p2: Point, p3: Point, } impl&amp;lt;P&amp;gt; TryFrom&amp;lt;[P; 3]&amp;gt; for Triangle where P: TryInto&amp;lt;Point&amp;gt;, { type Error = P::Error; fn try_from([p1, p2, p3]: [P; 3]) -&amp;gt; Result&amp;lt;Self, Self::Error&amp;gt; { Ok(Triangle { p1: p1.try_into()?, p2: p2.try_into()?, p3: p3.try_into()?, }) } } fn example() -&amp;gt; Result&amp;lt;Triangle, OutOfBounds&amp;gt; { let t: Triangle = [(0, 0), (1, 1), (2, 2)].try_into()?; Ok(t) } FromStr Prerequisites
 Self Functions Associated Types Error TryFrom &amp;amp; TryInto  trait FromStr { type Err; fn from_str(s: &amp;amp;str) -&amp;gt; Result&amp;lt;Self, Self::Err&amp;gt;; } FromStr types allow performing a fallible conversion from &amp;amp;str into Self. The idiomatic way to use FromStr is to call the .parse() method on &amp;amp;strs:
use std::str::FromStr; fn example&amp;lt;T: FromStr&amp;gt;(s: &amp;amp;&amp;#39;static str) { // these are all equivalent  let t: Result&amp;lt;T, _&amp;gt; = FromStr::from_str(s); let t = T::from_str(s); let t: Result&amp;lt;T, _&amp;gt; = s.parse(); let t = s.parse::&amp;lt;T&amp;gt;(); // most idiomatic } Example impl for Point:
use std::error; use std::fmt; use std::iter::Enumerate; use std::num::ParseIntError; use std::str::{Chars, FromStr}; #[derive(Debug, Eq, PartialEq)] struct Point { x: i32, y: i32, } impl Point { fn new(x: i32, y: i32) -&amp;gt; Self { Point { x, y } } } #[derive(Debug, PartialEq)] struct ParsePointError; impl fmt::Display for ParsePointError { fn fmt(&amp;amp;self, f: &amp;amp;mut fmt::Formatter&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; fmt::Result { write!(f, &amp;#34;failed to parse point&amp;#34;) } } impl From&amp;lt;ParseIntError&amp;gt; for ParsePointError { fn from(_e: ParseIntError) -&amp;gt; Self { ParsePointError } } impl error::Error for ParsePointError {} impl FromStr for Point { type Err = ParsePointError; fn from_str(s: &amp;amp;str) -&amp;gt; Result&amp;lt;Self, Self::Err&amp;gt; { let is_num = |(_, c): &amp;amp;(usize, char)| matches!(c, &amp;#39;0&amp;#39;..=&amp;#39;9&amp;#39; | &amp;#39;-&amp;#39;); let isnt_num = |t: &amp;amp;(_, _)| !is_num(t); let get_num = |char_idxs: &amp;amp;mut Enumerate&amp;lt;Chars&amp;lt;&amp;#39;_&amp;gt;&amp;gt;| -&amp;gt; Result&amp;lt;(usize, usize), ParsePointError&amp;gt; { let (start, _) = char_idxs .skip_while(isnt_num) .next() .ok_or(ParsePointError)?; let (end, _) = char_idxs .skip_while(is_num) .next() .ok_or(ParsePointError)?; Ok((start, end)) }; let mut char_idxs = s.chars().enumerate(); let (x_start, x_end) = get_num(&amp;amp;mut char_idxs)?; let (y_start, y_end) = get_num(&amp;amp;mut char_idxs)?; let x = s[x_start..x_end].parse::&amp;lt;i32&amp;gt;()?; let y = s[y_start..y_end].parse::&amp;lt;i32&amp;gt;()?; Ok(Point { x, y }) } } #[test] // ✅ fn pos_x_y() { let p = &amp;#34;(4, 5)&amp;#34;.parse::&amp;lt;Point&amp;gt;(); assert_eq!(p, Ok(Point::new(4, 5))); } #[test] // ✅ fn neg_x_y() { let p = &amp;#34;(-6, -2)&amp;#34;.parse::&amp;lt;Point&amp;gt;(); assert_eq!(p, Ok(Point::new(-6, -2))); } #[test] // ✅ fn not_a_point() { let p = &amp;#34;not a point&amp;#34;.parse::&amp;lt;Point&amp;gt;(); assert_eq!(p, Err(ParsePointError)); } FromStr has the same signature as TryFrom&amp;lt;&amp;amp;str&amp;gt;. It doesn&amp;rsquo;t matter which one we impl for a type first as long as we forward the impl to the other one. Here&amp;rsquo;s a TryFrom&amp;lt;&amp;amp;str&amp;gt; impl for Point assuming it already has a FromStr impl:
impl TryFrom&amp;lt;&amp;amp;str&amp;gt; for Point { type Error = &amp;lt;Point as FromStr&amp;gt;::Err; fn try_from(s: &amp;amp;str) -&amp;gt; Result&amp;lt;Point, Self::Error&amp;gt; { &amp;lt;Point as FromStr&amp;gt;::from_str(s) } } AsRef &amp;amp; AsMut Prerequisites
 Self Methods Sized Generic Parameters Sized Deref &amp;amp; DerefMut  trait AsRef&amp;lt;T: ?Sized&amp;gt; { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;T; } trait AsMut&amp;lt;T: ?Sized&amp;gt; { fn as_mut(&amp;amp;mut self) -&amp;gt; &amp;amp;mut T; } AsRef is for cheap reference to reference conversions. However, one of the most common ways it&amp;rsquo;s used is to make functions generic over whether they take ownership or not:
// accepts: // - &amp;amp;str // - &amp;amp;String fn takes_str(s: &amp;amp;str) { // use &amp;amp;str } // accepts: // - &amp;amp;str // - &amp;amp;String // - String fn takes_asref_str&amp;lt;S: AsRef&amp;lt;str&amp;gt;&amp;gt;(s: S) { let s: &amp;amp;str = s.as_ref(); // use &amp;amp;str } fn example(slice: &amp;amp;str, borrow: &amp;amp;String, owned: String) { takes_str(slice); takes_str(borrow); takes_str(owned); // ❌  takes_asref_str(slice); takes_asref_str(borrow); takes_asref_str(owned); // ✅ } The other most common use-case is returning a reference to inner private data wrapped by a type which protects some invariant. A good example from the standard library is String which is just a wrapper around Vec&amp;lt;u8&amp;gt;:
struct String { vec: Vec&amp;lt;u8&amp;gt;, } This inner Vec cannot be made public because if it was people could mutate any byte and break the String&#39;s valid UTF-8 encoding. However, it&amp;rsquo;s safe to expose an immutable read-only reference to the inner byte array, hence this impl:
impl AsRef&amp;lt;[u8]&amp;gt; for String; Generally, it often only makes sense to impl AsRef for a type if it wraps some other type to either provide additional functionality around the inner type or protect some invariant on the inner type.
Let&amp;rsquo;s examine a example of bad AsRef impls:
struct User { name: String, age: u32, } impl AsRef&amp;lt;String&amp;gt; for User { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;String { &amp;amp;self.name } } impl AsRef&amp;lt;u32&amp;gt; for User { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;u32 { &amp;amp;self.age } } This works and kinda makes sense at first, but quickly falls apart if we add more members to User:
struct User { name: String, email: String, age: u32, height: u32, } impl AsRef&amp;lt;String&amp;gt; for User { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;String { // uh, do we return name or email here?  } } impl AsRef&amp;lt;u32&amp;gt; for User { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;u32 { // uh, do we return age or height here?  } } A User is composed of Strings and u32s but it&amp;rsquo;s not really the same thing as a String or a u32. Even if we had much more specific types:
struct User { name: Name, email: Email, age: Age, height: Height, } It wouldn&amp;rsquo;t make much sense to impl AsRef for any of those because AsRef is for cheap reference to reference conversions between semantically equivalent things, and Name, Email, Age, and Height by themselves are not the same thing as a User.
A good example where we would impl AsRef would be if we introduced a new type Moderator that just wrapped a User and added some moderation specific privileges:
struct User { name: String, age: u32, } // unfortunately the standard library cannot provide // a generic blanket impl to save us from this boilerplate impl AsRef&amp;lt;User&amp;gt; for User { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;User { self } } enum Privilege { BanUsers, EditPosts, DeletePosts, } // although Moderators have some special // privileges they are still regular Users // and should be able to do all the same stuff struct Moderator { user: User, privileges: Vec&amp;lt;Privilege&amp;gt; } impl AsRef&amp;lt;Moderator&amp;gt; for Moderator { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Moderator { self } } impl AsRef&amp;lt;User&amp;gt; for Moderator { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;User { &amp;amp;self.user } } // this should be callable with Users // and Moderators (who are also Users) fn create_post&amp;lt;U: AsRef&amp;lt;User&amp;gt;&amp;gt;(u: U) { let user = u.as_ref(); // etc } fn example(user: User, moderator: Moderator) { create_post(&amp;amp;user); create_post(&amp;amp;moderator); // ✅ } This works because Moderators are just Users. Here&amp;rsquo;s the example from the Deref section except using AsRef instead:
use std::convert::AsRef; struct Human { health_points: u32, } impl AsRef&amp;lt;Human&amp;gt; for Human { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Human { self } } enum Weapon { Spear, Axe, Sword, } // a Soldier is just a Human with a Weapon struct Soldier { human: Human, weapon: Weapon, } impl AsRef&amp;lt;Soldier&amp;gt; for Soldier { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Soldier { self } } impl AsRef&amp;lt;Human&amp;gt; for Soldier { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Human { &amp;amp;self.human } } enum Mount { Horse, Donkey, Cow, } // a Knight is just a Soldier with a Mount struct Knight { soldier: Soldier, mount: Mount, } impl AsRef&amp;lt;Knight&amp;gt; for Knight { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Knight { self } } impl AsRef&amp;lt;Soldier&amp;gt; for Knight { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Soldier { &amp;amp;self.soldier } } impl AsRef&amp;lt;Human&amp;gt; for Knight { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Human { &amp;amp;self.soldier.human } } enum Spell { MagicMissile, FireBolt, ThornWhip, } // a Mage is just a Human who can cast Spells struct Mage { human: Human, spells: Vec&amp;lt;Spell&amp;gt;, } impl AsRef&amp;lt;Mage&amp;gt; for Mage { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Mage { self } } impl AsRef&amp;lt;Human&amp;gt; for Mage { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Human { &amp;amp;self.human } } enum Staff { Wooden, Metallic, Plastic, } // a Wizard is just a Mage with a Staff struct Wizard { mage: Mage, staff: Staff, } impl AsRef&amp;lt;Wizard&amp;gt; for Wizard { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Wizard { self } } impl AsRef&amp;lt;Mage&amp;gt; for Wizard { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Mage { &amp;amp;self.mage } } impl AsRef&amp;lt;Human&amp;gt; for Wizard { fn as_ref(&amp;amp;self) -&amp;gt; &amp;amp;Human { &amp;amp;self.mage.human } } fn borrows_human&amp;lt;H: AsRef&amp;lt;Human&amp;gt;&amp;gt;(human: H) {} fn borrows_soldier&amp;lt;S: AsRef&amp;lt;Soldier&amp;gt;&amp;gt;(soldier: S) {} fn borrows_knight&amp;lt;K: AsRef&amp;lt;Knight&amp;gt;&amp;gt;(knight: K) {} fn borrows_mage&amp;lt;M: AsRef&amp;lt;Mage&amp;gt;&amp;gt;(mage: M) {} fn borrows_wizard&amp;lt;W: AsRef&amp;lt;Wizard&amp;gt;&amp;gt;(wizard: W) {} fn example(human: Human, soldier: Soldier, knight: Knight, mage: Mage, wizard: Wizard) { // all types can be used as Humans  borrows_human(&amp;amp;human); borrows_human(&amp;amp;soldier); borrows_human(&amp;amp;knight); borrows_human(&amp;amp;mage); borrows_human(&amp;amp;wizard); // Knights can be used as Soldiers  borrows_soldier(&amp;amp;soldier); borrows_soldier(&amp;amp;knight); // Wizards can be used as Mages  borrows_mage(&amp;amp;mage); borrows_mage(&amp;amp;wizard); // Knights &amp;amp; Wizards passed as themselves  borrows_knight(&amp;amp;knight); borrows_wizard(&amp;amp;wizard); } Deref didn&amp;rsquo;t work in the prior version of the example above because deref coercion is an implicit conversion between types which leaves room for people to mistakenly formulate the wrong ideas and expectations for how it will behave. AsRef works above because it makes the conversion between types explicit and there&amp;rsquo;s no room leftover to develop any wrong ideas or expectations.
Borrow &amp;amp; BorrowMut Prerequisites
 Self Methods Generic Parameters Subtraits &amp;amp; Supertraits Sized AsRef &amp;amp; AsMut PartialEq &amp;amp; Eq Hash PartialOrd &amp;amp; Ord  trait Borrow&amp;lt;Borrowed&amp;gt; where Borrowed: ?Sized, { fn borrow(&amp;amp;self) -&amp;gt; &amp;amp;Borrowed; } trait BorrowMut&amp;lt;Borrowed&amp;gt;: Borrow&amp;lt;Borrowed&amp;gt; where Borrowed: ?Sized, { fn borrow_mut(&amp;amp;mut self) -&amp;gt; &amp;amp;mut Borrowed; } These traits were invented to solve the very specific problem of looking up String keys in HashSets, HashMaps, BTreeSets, and BTreeMaps using &amp;amp;str values.
We can view Borrow&amp;lt;T&amp;gt; and BorrowMut&amp;lt;T&amp;gt; as stricter versions of AsRef&amp;lt;T&amp;gt; and AsMut&amp;lt;T&amp;gt;, where the returned reference &amp;amp;T has equivalent Eq, Hash, and Ord impls to Self. This is more easily explained with a commented example:
use std::borrow::Borrow; use std:#️⃣:Hasher; use std::collections::hash_map::DefaultHasher; use std:#️⃣:Hash; fn get_hash&amp;lt;T: Hash&amp;gt;(t: T) -&amp;gt; u64 { let mut hasher = DefaultHasher::new(); t.hash(&amp;amp;mut hasher); hasher.finish() } fn asref_example&amp;lt;Owned, Ref&amp;gt;(owned1: Owned, owned2: Owned) where Owned: Eq &#43; Ord &#43; Hash &#43; AsRef&amp;lt;Ref&amp;gt;, Ref: Eq &#43; Ord &#43; Hash { let ref1: &amp;amp;Ref = owned1.as_ref(); let ref2: &amp;amp;Ref = owned2.as_ref(); // refs aren&amp;#39;t required to be equal if owned types are equal  assert_eq!(owned1 == owned2, ref1 == ref2); // ❌  let owned1_hash = get_hash(&amp;amp;owned1); let owned2_hash = get_hash(&amp;amp;owned2); let ref1_hash = get_hash(&amp;amp;ref1); let ref2_hash = get_hash(&amp;amp;ref2); // ref hashes aren&amp;#39;t required to be equal if owned type hashes are equal  assert_eq!(owned1_hash == owned2_hash, ref1_hash == ref2_hash); // ❌  // ref comparisons aren&amp;#39;t required to match owned type comparisons  assert_eq!(owned1.cmp(&amp;amp;owned2), ref1.cmp(&amp;amp;ref2)); // ❌ } fn borrow_example&amp;lt;Owned, Borrowed&amp;gt;(owned1: Owned, owned2: Owned) where Owned: Eq &#43; Ord &#43; Hash &#43; Borrow&amp;lt;Borrowed&amp;gt;, Borrowed: Eq &#43; Ord &#43; Hash { let borrow1: &amp;amp;Borrowed = owned1.borrow(); let borrow2: &amp;amp;Borrowed = owned2.borrow(); // borrows are required to be equal if owned types are equal  assert_eq!(owned1 == owned2, borrow1 == borrow2); // ✅  let owned1_hash = get_hash(&amp;amp;owned1); let owned2_hash = get_hash(&amp;amp;owned2); let borrow1_hash = get_hash(&amp;amp;borrow1); let borrow2_hash = get_hash(&amp;amp;borrow2); // borrow hashes are required to be equal if owned type hashes are equal  assert_eq!(owned1_hash == owned2_hash, borrow1_hash == borrow2_hash); // ✅  // borrow comparisons are required to match owned type comparisons  assert_eq!(owned1.cmp(&amp;amp;owned2), borrow1.cmp(&amp;amp;borrow2)); // ✅ } It&amp;rsquo;s good to be aware of these traits and understand why they exist since it helps demystify some of the methods on HashSet, HashMap, BTreeSet, and BTreeMap but it&amp;rsquo;s very rare that we would ever need to impl these traits for any of our types because it&amp;rsquo;s very rare that we would ever need create a pair of types where one is the &amp;ldquo;borrowed&amp;rdquo; version of the other in the first place. If we have some T then &amp;amp;T will get the job done 99.99% of the time, and T: Borrow&amp;lt;T&amp;gt; is already implemented for all T because of a generic blanket impl, so we don&amp;rsquo;t need to manually impl it and we don&amp;rsquo;t need to create some U such that T: Borrow&amp;lt;U&amp;gt;.
ToOwned Prerequisites
 Self Methods Default Impls Clone Borrow &amp;amp; BorrowMut  trait ToOwned { type Owned: Borrow&amp;lt;Self&amp;gt;; fn to_owned(&amp;amp;self) -&amp;gt; Self::Owned; // provided default impls  fn clone_into(&amp;amp;self, target: &amp;amp;mut Self::Owned); } ToOwned is a more generic version of Clone. Clone allows us to take a &amp;amp;T and turn it into an T but ToOwned allows us to take a &amp;amp;Borrowed and turn it into a Owned where Owned: Borrow&amp;lt;Borrowed&amp;gt;.
In other words, we can&amp;rsquo;t &amp;ldquo;clone&amp;rdquo; a &amp;amp;str into a String, or a &amp;amp;Path into a PathBuf, or an &amp;amp;OsStr into an OsString, since the clone method signature doesn&amp;rsquo;t support this kind of cross-type cloning, and that&amp;rsquo;s what ToOwned was made for.
For similar reasons as Borrow and BorrowMut, it&amp;rsquo;s good to be aware of this trait and understand why it exists but it&amp;rsquo;s very rare we&amp;rsquo;ll ever need to impl it for any of our types.
Iteration Traits Iterator Prerequisites
 Self Methods Associated Types Default Impls  trait Iterator { type Item; fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt;; // provided default impls  fn size_hint(&amp;amp;self) -&amp;gt; (usize, Option&amp;lt;usize&amp;gt;); fn count(self) -&amp;gt; usize; fn last(self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt;; fn advance_by(&amp;amp;mut self, n: usize) -&amp;gt; Result&amp;lt;(), usize&amp;gt;; fn nth(&amp;amp;mut self, n: usize) -&amp;gt; Option&amp;lt;Self::Item&amp;gt;; fn step_by(self, step: usize) -&amp;gt; StepBy&amp;lt;Self&amp;gt;; fn chain&amp;lt;U&amp;gt;( self, other: U ) -&amp;gt; Chain&amp;lt;Self, &amp;lt;U as IntoIterator&amp;gt;::IntoIter&amp;gt; where U: IntoIterator&amp;lt;Item = Self::Item&amp;gt;; fn zip&amp;lt;U&amp;gt;(self, other: U) -&amp;gt; Zip&amp;lt;Self, &amp;lt;U as IntoIterator&amp;gt;::IntoIter&amp;gt; where U: IntoIterator; fn map&amp;lt;B, F&amp;gt;(self, f: F) -&amp;gt; Map&amp;lt;Self, F&amp;gt; where F: FnMut(Self::Item) -&amp;gt; B; fn for_each&amp;lt;F&amp;gt;(self, f: F) where F: FnMut(Self::Item); fn filter&amp;lt;P&amp;gt;(self, predicate: P) -&amp;gt; Filter&amp;lt;Self, P&amp;gt; where P: FnMut(&amp;amp;Self::Item) -&amp;gt; bool; fn filter_map&amp;lt;B, F&amp;gt;(self, f: F) -&amp;gt; FilterMap&amp;lt;Self, F&amp;gt; where F: FnMut(Self::Item) -&amp;gt; Option&amp;lt;B&amp;gt;; fn enumerate(self) -&amp;gt; Enumerate&amp;lt;Self&amp;gt;; fn peekable(self) -&amp;gt; Peekable&amp;lt;Self&amp;gt;; fn skip_while&amp;lt;P&amp;gt;(self, predicate: P) -&amp;gt; SkipWhile&amp;lt;Self, P&amp;gt; where P: FnMut(&amp;amp;Self::Item) -&amp;gt; bool; fn take_while&amp;lt;P&amp;gt;(self, predicate: P) -&amp;gt; TakeWhile&amp;lt;Self, P&amp;gt; where P: FnMut(&amp;amp;Self::Item) -&amp;gt; bool; fn map_while&amp;lt;B, P&amp;gt;(self, predicate: P) -&amp;gt; MapWhile&amp;lt;Self, P&amp;gt; where P: FnMut(Self::Item) -&amp;gt; Option&amp;lt;B&amp;gt;; fn skip(self, n: usize) -&amp;gt; Skip&amp;lt;Self&amp;gt;; fn take(self, n: usize) -&amp;gt; Take&amp;lt;Self&amp;gt;; fn scan&amp;lt;St, B, F&amp;gt;(self, initial_state: St, f: F) -&amp;gt; Scan&amp;lt;Self, St, F&amp;gt; where F: FnMut(&amp;amp;mut St, Self::Item) -&amp;gt; Option&amp;lt;B&amp;gt;; fn flat_map&amp;lt;U, F&amp;gt;(self, f: F) -&amp;gt; FlatMap&amp;lt;Self, U, F&amp;gt; where F: FnMut(Self::Item) -&amp;gt; U, U: IntoIterator; fn flatten(self) -&amp;gt; Flatten&amp;lt;Self&amp;gt; where Self::Item: IntoIterator; fn fuse(self) -&amp;gt; Fuse&amp;lt;Self&amp;gt;; fn inspect&amp;lt;F&amp;gt;(self, f: F) -&amp;gt; Inspect&amp;lt;Self, F&amp;gt; where F: FnMut(&amp;amp;Self::Item); fn by_ref(&amp;amp;mut self) -&amp;gt; &amp;amp;mut Self; fn collect&amp;lt;B&amp;gt;(self) -&amp;gt; B where B: FromIterator&amp;lt;Self::Item&amp;gt;; fn partition&amp;lt;B, F&amp;gt;(self, f: F) -&amp;gt; (B, B) where F: FnMut(&amp;amp;Self::Item) -&amp;gt; bool, B: Default &#43; Extend&amp;lt;Self::Item&amp;gt;; fn partition_in_place&amp;lt;&amp;#39;a, T, P&amp;gt;(self, predicate: P) -&amp;gt; usize where Self: DoubleEndedIterator&amp;lt;Item = &amp;amp;&amp;#39;a mut T&amp;gt;, T: &amp;#39;a, P: FnMut(&amp;amp;T) -&amp;gt; bool; fn is_partitioned&amp;lt;P&amp;gt;(self, predicate: P) -&amp;gt; bool where P: FnMut(Self::Item) -&amp;gt; bool; fn try_fold&amp;lt;B, F, R&amp;gt;(&amp;amp;mut self, init: B, f: F) -&amp;gt; R where F: FnMut(B, Self::Item) -&amp;gt; R, R: Try&amp;lt;Ok = B&amp;gt;; fn try_for_each&amp;lt;F, R&amp;gt;(&amp;amp;mut self, f: F) -&amp;gt; R where F: FnMut(Self::Item) -&amp;gt; R, R: Try&amp;lt;Ok = ()&amp;gt;; fn fold&amp;lt;B, F&amp;gt;(self, init: B, f: F) -&amp;gt; B where F: FnMut(B, Self::Item) -&amp;gt; B; fn fold_first&amp;lt;F&amp;gt;(self, f: F) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; where F: FnMut(Self::Item, Self::Item) -&amp;gt; Self::Item; fn all&amp;lt;F&amp;gt;(&amp;amp;mut self, f: F) -&amp;gt; bool where F: FnMut(Self::Item) -&amp;gt; bool; fn any&amp;lt;F&amp;gt;(&amp;amp;mut self, f: F) -&amp;gt; bool where F: FnMut(Self::Item) -&amp;gt; bool; fn find&amp;lt;P&amp;gt;(&amp;amp;mut self, predicate: P) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; where P: FnMut(&amp;amp;Self::Item) -&amp;gt; bool; fn find_map&amp;lt;B, F&amp;gt;(&amp;amp;mut self, f: F) -&amp;gt; Option&amp;lt;B&amp;gt; where F: FnMut(Self::Item) -&amp;gt; Option&amp;lt;B&amp;gt;; fn try_find&amp;lt;F, R&amp;gt;( &amp;amp;mut self, f: F ) -&amp;gt; Result&amp;lt;Option&amp;lt;Self::Item&amp;gt;, &amp;lt;R as Try&amp;gt;::Error&amp;gt; where F: FnMut(&amp;amp;Self::Item) -&amp;gt; R, R: Try&amp;lt;Ok = bool&amp;gt;; fn position&amp;lt;P&amp;gt;(&amp;amp;mut self, predicate: P) -&amp;gt; Option&amp;lt;usize&amp;gt; where P: FnMut(Self::Item) -&amp;gt; bool; fn rposition&amp;lt;P&amp;gt;(&amp;amp;mut self, predicate: P) -&amp;gt; Option&amp;lt;usize&amp;gt; where Self: ExactSizeIterator &#43; DoubleEndedIterator, P: FnMut(Self::Item) -&amp;gt; bool; fn max(self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; where Self::Item: Ord; fn min(self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; where Self::Item: Ord; fn max_by_key&amp;lt;B, F&amp;gt;(self, f: F) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; where F: FnMut(&amp;amp;Self::Item) -&amp;gt; B, B: Ord; fn max_by&amp;lt;F&amp;gt;(self, compare: F) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; where F: FnMut(&amp;amp;Self::Item, &amp;amp;Self::Item) -&amp;gt; Ordering; fn min_by_key&amp;lt;B, F&amp;gt;(self, f: F) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; where F: FnMut(&amp;amp;Self::Item) -&amp;gt; B, B: Ord; fn min_by&amp;lt;F&amp;gt;(self, compare: F) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; where F: FnMut(&amp;amp;Self::Item, &amp;amp;Self::Item) -&amp;gt; Ordering; fn rev(self) -&amp;gt; Rev&amp;lt;Self&amp;gt; where Self: DoubleEndedIterator; fn unzip&amp;lt;A, B, FromA, FromB&amp;gt;(self) -&amp;gt; (FromA, FromB) where Self: Iterator&amp;lt;Item = (A, B)&amp;gt;, FromA: Default &#43; Extend&amp;lt;A&amp;gt;, FromB: Default &#43; Extend&amp;lt;B&amp;gt;; fn copied&amp;lt;&amp;#39;a, T&amp;gt;(self) -&amp;gt; Copied&amp;lt;Self&amp;gt; where Self: Iterator&amp;lt;Item = &amp;amp;&amp;#39;a T&amp;gt;, T: &amp;#39;a &#43; Copy; fn cloned&amp;lt;&amp;#39;a, T&amp;gt;(self) -&amp;gt; Cloned&amp;lt;Self&amp;gt; where Self: Iterator&amp;lt;Item = &amp;amp;&amp;#39;a T&amp;gt;, T: &amp;#39;a &#43; Clone; fn cycle(self) -&amp;gt; Cycle&amp;lt;Self&amp;gt; where Self: Clone; fn sum&amp;lt;S&amp;gt;(self) -&amp;gt; S where S: Sum&amp;lt;Self::Item&amp;gt;; fn product&amp;lt;P&amp;gt;(self) -&amp;gt; P where P: Product&amp;lt;Self::Item&amp;gt;; fn cmp&amp;lt;I&amp;gt;(self, other: I) -&amp;gt; Ordering where I: IntoIterator&amp;lt;Item = Self::Item&amp;gt;, Self::Item: Ord; fn cmp_by&amp;lt;I, F&amp;gt;(self, other: I, cmp: F) -&amp;gt; Ordering where F: FnMut(Self::Item, &amp;lt;I as IntoIterator&amp;gt;::Item) -&amp;gt; Ordering, I: IntoIterator; fn partial_cmp&amp;lt;I&amp;gt;(self, other: I) -&amp;gt; Option&amp;lt;Ordering&amp;gt; where I: IntoIterator, Self::Item: PartialOrd&amp;lt;&amp;lt;I as IntoIterator&amp;gt;::Item&amp;gt;; fn partial_cmp_by&amp;lt;I, F&amp;gt;( self, other: I, partial_cmp: F ) -&amp;gt; Option&amp;lt;Ordering&amp;gt; where F: FnMut(Self::Item, &amp;lt;I as IntoIterator&amp;gt;::Item) -&amp;gt; Option&amp;lt;Ordering&amp;gt;, I: IntoIterator; fn eq&amp;lt;I&amp;gt;(self, other: I) -&amp;gt; bool where I: IntoIterator, Self::Item: PartialEq&amp;lt;&amp;lt;I as IntoIterator&amp;gt;::Item&amp;gt;; fn eq_by&amp;lt;I, F&amp;gt;(self, other: I, eq: F) -&amp;gt; bool where F: FnMut(Self::Item, &amp;lt;I as IntoIterator&amp;gt;::Item) -&amp;gt; bool, I: IntoIterator; fn ne&amp;lt;I&amp;gt;(self, other: I) -&amp;gt; bool where I: IntoIterator, Self::Item: PartialEq&amp;lt;&amp;lt;I as IntoIterator&amp;gt;::Item&amp;gt;; fn lt&amp;lt;I&amp;gt;(self, other: I) -&amp;gt; bool where I: IntoIterator, Self::Item: PartialOrd&amp;lt;&amp;lt;I as IntoIterator&amp;gt;::Item&amp;gt;; fn le&amp;lt;I&amp;gt;(self, other: I) -&amp;gt; bool where I: IntoIterator, Self::Item: PartialOrd&amp;lt;&amp;lt;I as IntoIterator&amp;gt;::Item&amp;gt;; fn gt&amp;lt;I&amp;gt;(self, other: I) -&amp;gt; bool where I: IntoIterator, Self::Item: PartialOrd&amp;lt;&amp;lt;I as IntoIterator&amp;gt;::Item&amp;gt;; fn ge&amp;lt;I&amp;gt;(self, other: I) -&amp;gt; bool where I: IntoIterator, Self::Item: PartialOrd&amp;lt;&amp;lt;I as IntoIterator&amp;gt;::Item&amp;gt;; fn is_sorted(self) -&amp;gt; bool where Self::Item: PartialOrd&amp;lt;Self::Item&amp;gt;; fn is_sorted_by&amp;lt;F&amp;gt;(self, compare: F) -&amp;gt; bool where F: FnMut(&amp;amp;Self::Item, &amp;amp;Self::Item) -&amp;gt; Option&amp;lt;Ordering&amp;gt;; fn is_sorted_by_key&amp;lt;F, K&amp;gt;(self, f: F) -&amp;gt; bool where F: FnMut(Self::Item) -&amp;gt; K, K: PartialOrd&amp;lt;K&amp;gt;; } Iterator&amp;lt;Item = T&amp;gt; types can be iterated and will produce T types. There&amp;rsquo;s no IteratorMut trait. Each Iterator impl can specify whether it returns immutable references, mutable references, or owned values via the Item associated type.
   Vec&amp;lt;T&amp;gt; method Returns     .iter() Iterator&amp;lt;Item = &amp;amp;T&amp;gt;   .iter_mut() Iterator&amp;lt;Item = &amp;amp;mut T&amp;gt;   .into_iter() Iterator&amp;lt;Item = T&amp;gt;    Something that is not immediately obvious to beginner Rustaceans but that intermediate Rustaceans take for granted is that most types are not their own iterators. If a type is iterable we almost always impl some custom iterator type which iterates over it rather than trying to make it iterate over itself:
struct MyType { items: Vec&amp;lt;String&amp;gt; } impl MyType { fn iter(&amp;amp;self) -&amp;gt; impl Iterator&amp;lt;Item = &amp;amp;String&amp;gt; { MyTypeIterator { index: 0, items: &amp;amp;self.items } } } struct MyTypeIterator&amp;lt;&amp;#39;a&amp;gt; { index: usize, items: &amp;amp;&amp;#39;a Vec&amp;lt;String&amp;gt; } impl&amp;lt;&amp;#39;a&amp;gt; Iterator for MyTypeIterator&amp;lt;&amp;#39;a&amp;gt; { type Item = &amp;amp;&amp;#39;a String; fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; { if self.index &amp;gt;= self.items.len() { None } else { let item = &amp;amp;self.items[self.index]; self.index &#43;= 1; Some(item) } } } For the sake of teaching the above example shows how to impl an Iterator from scratch but the idiomatic solution in this situation would be to just defer to Vec&#39;s iter method:
struct MyType { items: Vec&amp;lt;String&amp;gt; } impl MyType { fn iter(&amp;amp;self) -&amp;gt; impl Iterator&amp;lt;Item = &amp;amp;String&amp;gt; { self.items.iter() } } Also this is a good generic blanket impl to be aware of:
impl&amp;lt;I: Iterator &#43; ?Sized&amp;gt; Iterator for &amp;amp;mut I; It says that any mutable reference to an iterator is also an iterator. This is useful to know because it allows us to use iterator methods with self receivers as if they had &amp;amp;mut self receivers.
As an example, imagine we have a function which processes an iterator of more than three items, but the first step of the function is to take out the first three items of the iterator and process them separately before iterating over the remaining items, here&amp;rsquo;s how a beginner may attempt to write this function:
fn example&amp;lt;I: Iterator&amp;lt;Item = i32&amp;gt;&amp;gt;(mut iter: I) { let first3: Vec&amp;lt;i32&amp;gt; = iter.take(3).collect(); for item in iter { // ❌ iter consumed in line above  // process remaining items  } } Well that&amp;rsquo;s annoying. The take method has a self receiver so it seems like we cannot call it without consuming the whole iterator! Here&amp;rsquo;s what a naive refactor of the above code might look like:
fn example&amp;lt;I: Iterator&amp;lt;Item = i32&amp;gt;&amp;gt;(mut iter: I) { let first3: Vec&amp;lt;i32&amp;gt; = vec![ iter.next().unwrap(), iter.next().unwrap(), iter.next().unwrap(), ]; for item in iter { // ✅  // process remaining items  } } Which is okay. However, the idiomatic refactor is actually:
fn example&amp;lt;I: Iterator&amp;lt;Item = i32&amp;gt;&amp;gt;(mut iter: I) { let first3: Vec&amp;lt;i32&amp;gt; = iter.by_ref().take(3).collect(); for item in iter { // ✅  // process remaining items  } } Not very easy to discover. But anyway, now we know.
Also, there are no rules or conventions on what can or cannot be an iterator. If the type impls Iterator then it&amp;rsquo;s an iterator. Some creative examples from the standard library:
use std::sync::mpsc::channel; use std::thread; fn paths_can_be_iterated(path: &amp;amp;Path) { for part in path { // iterate over parts of a path  } } fn receivers_can_be_iterated() { let (send, recv) = channel(); thread::spawn(move || { send.send(1).unwrap(); send.send(2).unwrap(); send.send(3).unwrap(); }); for received in recv { // iterate over received values  } } IntoIterator Prerequisites
 Self Methods Associated Types Iterator  trait IntoIterator where &amp;lt;Self::IntoIter as Iterator&amp;gt;::Item == Self::Item, { type Item; type IntoIter: Iterator; fn into_iter(self) -&amp;gt; Self::IntoIter; } IntoIterator types can be converted into iterators, hence the name. The into_iter method is called on a type when it&amp;rsquo;s used within a for-in loop:
// vec = Vec&amp;lt;T&amp;gt; for v in vec {} // v = T  // above line desugared for v in vec.into_iter() {} Not only does Vec impl IntoIterator but so does &amp;amp;Vec and &amp;amp;mut Vec if we&amp;rsquo;d like to iterate over immutable or mutable references instead of owned values, respectively.
// vec = Vec&amp;lt;T&amp;gt; for v in &amp;amp;vec {} // v = &amp;amp;T  // above example desugared for v in (&amp;amp;vec).into_iter() {} // vec = Vec&amp;lt;T&amp;gt; for v in &amp;amp;mut vec {} // v = &amp;amp;mut T  // above example desugared for v in (&amp;amp;mut vec).into_iter() {} FromIterator Prerequisites
 Self Functions Generic Parameters Iterator IntoIterator  trait FromIterator&amp;lt;A&amp;gt; { fn from_iter&amp;lt;T&amp;gt;(iter: T) -&amp;gt; Self where T: IntoIterator&amp;lt;Item = A&amp;gt;; } FromIterator types can be created from an iterator, hence the name. FromIterator is most commonly and idiomatically used by calling the collect method on Iterator:
fn collect&amp;lt;B&amp;gt;(self) -&amp;gt; B where B: FromIterator&amp;lt;Self::Item&amp;gt;; Example of collecting an Iterator&amp;lt;Item = char&amp;gt; into a String:
fn filter_letters(string: &amp;amp;str) -&amp;gt; String { string.chars().filter(|c| c.is_alphabetic()).collect() } All the collections in the standard library impl IntoIterator and FromIterator so that makes it easier to convert between them:
use std::collections::{BTreeSet, HashMap, HashSet, LinkedList}; // String -&amp;gt; HashSet&amp;lt;char&amp;gt; fn unique_chars(string: &amp;amp;str) -&amp;gt; HashSet&amp;lt;char&amp;gt; { string.chars().collect() } // Vec&amp;lt;T&amp;gt; -&amp;gt; BTreeSet&amp;lt;T&amp;gt; fn ordered_unique_items&amp;lt;T: Ord&amp;gt;(vec: Vec&amp;lt;T&amp;gt;) -&amp;gt; BTreeSet&amp;lt;T&amp;gt; { vec.into_iter().collect() } // HashMap&amp;lt;K, V&amp;gt; -&amp;gt; LinkedList&amp;lt;(K, V)&amp;gt; fn entry_list&amp;lt;K, V&amp;gt;(map: HashMap&amp;lt;K, V&amp;gt;) -&amp;gt; LinkedList&amp;lt;(K, V)&amp;gt; { map.into_iter().collect() } // and countless more possible examples I/O Traits Read &amp;amp; Write Prerequisites
 Self Methods Scope Generic Blanket Impls  trait Read { fn read(&amp;amp;mut self, buf: &amp;amp;mut [u8]) -&amp;gt; Result&amp;lt;usize&amp;gt;; // provided default impls  fn read_vectored(&amp;amp;mut self, bufs: &amp;amp;mut [IoSliceMut&amp;lt;&amp;#39;_&amp;gt;]) -&amp;gt; Result&amp;lt;usize&amp;gt;; fn is_read_vectored(&amp;amp;self) -&amp;gt; bool; unsafe fn initializer(&amp;amp;self) -&amp;gt; Initializer; fn read_to_end(&amp;amp;mut self, buf: &amp;amp;mut Vec&amp;lt;u8&amp;gt;) -&amp;gt; Result&amp;lt;usize&amp;gt;; fn read_to_string(&amp;amp;mut self, buf: &amp;amp;mut String) -&amp;gt; Result&amp;lt;usize&amp;gt;; fn read_exact(&amp;amp;mut self, buf: &amp;amp;mut [u8]) -&amp;gt; Result&amp;lt;()&amp;gt;; fn by_ref(&amp;amp;mut self) -&amp;gt; &amp;amp;mut Self where Self: Sized; fn bytes(self) -&amp;gt; Bytes&amp;lt;Self&amp;gt; where Self: Sized; fn chain&amp;lt;R: Read&amp;gt;(self, next: R) -&amp;gt; Chain&amp;lt;Self, R&amp;gt; where Self: Sized; fn take(self, limit: u64) -&amp;gt; Take&amp;lt;Self&amp;gt; where Self: Sized; } trait Write { fn write(&amp;amp;mut self, buf: &amp;amp;[u8]) -&amp;gt; Result&amp;lt;usize&amp;gt;; fn flush(&amp;amp;mut self) -&amp;gt; Result&amp;lt;()&amp;gt;; // provided default impls  fn write_vectored(&amp;amp;mut self, bufs: &amp;amp;[IoSlice&amp;lt;&amp;#39;_&amp;gt;]) -&amp;gt; Result&amp;lt;usize&amp;gt;; fn is_write_vectored(&amp;amp;self) -&amp;gt; bool; fn write_all(&amp;amp;mut self, buf: &amp;amp;[u8]) -&amp;gt; Result&amp;lt;()&amp;gt;; fn write_all_vectored(&amp;amp;mut self, bufs: &amp;amp;mut [IoSlice&amp;lt;&amp;#39;_&amp;gt;]) -&amp;gt; Result&amp;lt;()&amp;gt;; fn write_fmt(&amp;amp;mut self, fmt: Arguments&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; Result&amp;lt;()&amp;gt;; fn by_ref(&amp;amp;mut self) -&amp;gt; &amp;amp;mut Self where Self: Sized; } Generic blanket impls worth knowing:
impl&amp;lt;R: Read &#43; ?Sized&amp;gt; Read for &amp;amp;mut R; impl&amp;lt;W: Write &#43; ?Sized&amp;gt; Write for &amp;amp;mut W; These say that any mutable reference to a Read type is also Read, and same with Write. This is useful to know because it allows us to use any method with a self receiver as if it had a &amp;amp;mut self receiver. We already went over how to do this and why it&amp;rsquo;s useful in the Iterator trait section so I&amp;rsquo;m not going to repeat it again here.
I&amp;rsquo;d like to point out that &amp;amp;[u8] impls Read and that Vec&amp;lt;u8&amp;gt; impls Write so we can easily unit test our file handling functions using Strings which are trivial to convert to &amp;amp;[u8] and from Vec&amp;lt;u8&amp;gt;:
use std::path::Path; use std::fs::File; use std::io::Read; use std::io::Write; use std::io; // function we want to test fn uppercase&amp;lt;R: Read, W: Write&amp;gt;(mut read: R, mut write: W) -&amp;gt; Result&amp;lt;(), io::Error&amp;gt; { let mut buffer = String::new(); read.read_to_string(&amp;amp;mut buffer)?; let uppercase = buffer.to_uppercase(); write.write_all(uppercase.as_bytes())?; write.flush()?; Ok(()) } // in actual program we&amp;#39;d pass Files fn example(in_path: &amp;amp;Path, out_path: &amp;amp;Path) -&amp;gt; Result&amp;lt;(), io::Error&amp;gt; { let in_file = File::open(in_path)?; let out_file = File::open(out_path)?; uppercase(in_file, out_file) } // however in unit tests we can use Strings! #[test] // ✅ fn example_test() { let in_file: String = &amp;#34;i am screaming&amp;#34;.into(); let mut out_file: Vec&amp;lt;u8&amp;gt; = Vec::new(); uppercase(in_file.as_bytes(), &amp;amp;mut out_file).unwrap(); let out_result = String::from_utf8(out_file).unwrap(); assert_eq!(out_result, &amp;#34;I AM SCREAMING&amp;#34;); } Conclusion We learned a lot together! Too much in fact. This is us now:
Artist credit: The Jenkins Comic
Discuss Discuss this article on
 Github learnrust subreddit official Rust users forum Twitter lobste.rs rust subreddit  Notifications Get notified when the next blog post get published by
 Following pretzelhammer on Twitter or Watching this repo&amp;rsquo;s releases (click Watch -&amp;gt; click Custom -&amp;gt; select Releases -&amp;gt; click Apply)  Further Reading  Sizedness in Rust Common Rust Lifetime Misconceptions Learning Rust in 2020 Learn Assembly with Entirely Too Many Brainfuck Compilers  </content>
    </entry>
    
     <entry>
        <title>Py Tips for Impatient Dev</title>
        <url>https://zhimoe.github.io/post/py-tips-for-impatient-dev/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>python</tag>
        </tags>
        <content type="html"> python在看似简单的语法中，有很多tricks。
tricks  python的dict中关于equal和hash计算方式会有意外的效果 [&amp;#39;no&amp;#39;, &amp;#39;yes&amp;#39;][True] # output? {True: &amp;#39;yes&amp;#39;, 1: &amp;#39;no&amp;#39;, 1.0: &amp;#39;maybe&amp;#39;} # output?  “布尔类型是整数类型的子类型，布尔值在几乎所有环境中的行为都类似于值 0 和 1，但在转换为字符串时，分别得到的是字符串 False 或 True。”
&amp;ndash; The Standard Type Hierarchy
   由于True，1， 1.0的__eq__和__hash__都一样，所以出现了神奇的结果。
 (1) != (1,) #第一个就是int，第二个是tuple
  避免可变的默认参数, 例如:
def fun(count=[]): count.append(2) #这里count两次调用如果都使用默认参数的话,则是同一个数组,非常危险! return count fun() #[2] fun() #[2,2]   ...和pass几乎等效的，这是一个ellipsis type的单例。
  staticmethod classmethod  staticmethod和classmethod都可以通过Cls.m()或instance.m()方式访问，都可以被继承，都可以访问全局变量。区别是 classmethod访问的class变量信息会自动在Derive子类中改变，而staticmethod因为缺少第一个cls参数，所以访问的全局变量始终是父类的变量。 staticmethod可以理解为Java的StringUtils类，只是和Cls放在一起方便代码阅读和组织。 classmethod则是可以通过cls参数访问到当前类信息的。
 str和bytes  py3.6开始，推荐使用f-string,不要使用 %s或者 &amp;quot;&amp;quot;.format()。如果接收用户输入，使用Template做安全校验 多行string my_very_big_string = ( &amp;#34;For a long time I used to go to bed early. Sometimes, &amp;#34; &amp;#34;when I had put out my candle, my eyes would close so quickly &amp;#34; &amp;#34;that I had not even time to say “I’m going to sleep.”&amp;#34; )  bytes 是不可变的数组，每个元素必须在0～255之间。 bytearray是可变的，可以修改，增加，删除元素。 转换 bytes(ba) 小整数池是[-5，256], string也有 string intern。  pythonic的代码  使用for推导式,不要for..in遍历, 也少用map，filter 多使用destructing,这点在Java/Go都不支持,可以在方法内部省很多代码 long_list = [x for x in range(100)] a, b, *c, d, e, f = long_list #e==98 f=99  with语句可以同时打开多个文件,不要嵌套with，更多功能查看contextlib 使用if x is None,而不是 if x == None  避免可变的默认参数, 例如: def fun(count=[]): count.append(2) #这里count两次调用如果都使用默认参数的话,则是同一个数组,非常危险! return count fun() #[2] fun() #[2,2]  新手多使用格式化,多看pycharm的提示,多在逻辑复杂处使用空行 异常处理: 清楚except和assert场合,logging.error(&amp;lsquo;xxxxxxx&amp;rsquo;, exc_info=True). 自定义异常必须重写__init__() 和 __str__() 使用for i in range(len(a)):或者for i, v in enumerate(a):都是危险的。 # 方法1 # 将list拷贝一下,遍历新数组的过程中,修改原list: num_list = [1, 2, 3, 4, 5] print(num_list) for item in num_list[:]: # 这里list[:]是对原数组的拷贝,trick!!! if item == 2: num_list.remove(item) else: print(item) print(num_list) # 方法2 # 如果数组很大,那应该使用倒序遍历: for i in range(len(num_list)-1, -1, -1): if num_list[i] == 2: num_list.pop(i) else: print(num_list[i]) # 方法3 还是使用for推导式 [4 if x==3 else x for x in num_list]  打印容器可以使用pprint.pprint x if x &amp;lt; 10 else y use reversed(lis) over lis[::-1] use pathlib over os.pathlib。 pathlib的方法不全。 os module is for system, sys this module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. @property make a method to class&amp;rsquo;s property. can not use () when access the method cuz it is prop. use assert protect your code. 不要使用assert检查数据， 断言可能被全局禁用，导致数据检查（或者更恐怖的权限检查）被跳过  容器  dict.get()可以指定missing-key-value 判断key是否存在: if k in d: 带索引遍历: for idx, item in enumerate(x): list(l)等方式构建的list dict set属于浅复制，如果容器的元素还是容器，那么元素属于引用。 深度复制需要使用copy module import copy xs = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] zs = copy.deepcopy(xs) # 对象同样可以使用copy,还有__copy__等魔法方法可以探索  使用namedtuple可以让代码更容易阅读 from collections import namedtuple class Car: &amp;#34;&amp;#34;&amp;#34;you do not modify the name and date attributes &amp;#34;&amp;#34;&amp;#34; def __init__(self, name, date): self._name = name self._date = date # use namedtuple Car = namedtuple(&amp;#39;Car&amp;#39;, &amp;#39;name date&amp;#39;) # 注意，这里多个属性可以一次性传入，使用空格分割 # 然后你可以将Car作为data class使用 #还有一个type hint的版本 from typing import NamedTuple  不常用的一些容器 class CountedObject: num_instances = 0 def init(self): self.__class__.num_instances &#43;= 1 from types import MappingProxyType #对外提供视图 from collections import defaultdict from collections import ChainMap frozenset  list的元素可以不同，更为紧凑的单一类型是array 类型 Counter(string).most_common(3) sort map by key: print(sorted(dic, key=dic.get)), output: key in asc order deque from collections import deque names = deque([&amp;#39;raymond&amp;#39;, &amp;#39;rachel&amp;#39;, &amp;#39;matthew&amp;#39;, &amp;#39;roger&amp;#39;, &amp;#39;betty&amp;#39;, &amp;#39;melissa&amp;#39;, &amp;#39;judith&amp;#39;, &amp;#39;charlie&amp;#39;]) names.popleft() names.appendleft(&amp;#39;mark&amp;#39;)  合并dict system = dict(&amp;#34;path&amp;#34;, &amp;#34;c:/&amp;#34;, &amp;#34;env&amp;#34;, &amp;#34;prd&amp;#34;) user = dict(&amp;#34;path&amp;#34;, &amp;#34;d:/&amp;#34;, &amp;#34;env&amp;#34;, &amp;#34;dev&amp;#34;) system.update(user) # 遍历user，更新到system final = {**system, **user} # 右边的优先级高   dunder方法,函数,oop  @functools.wraps(func) __var 在class环境中会被改写 使用abc模块可以避免抽象类只有在未实现方法被调用时才抛出NotImplementedError 理解python的dunder方法，可以写出超级简洁的方法：  import collections Card = collections.namedtuple(&amp;#39;Card&amp;#39;, [&amp;#39;rank&amp;#39;, &amp;#39;suit&amp;#39;]) class FrenchDeck: ranks = [str(n) for n in range(2, 11)] &#43; list(&amp;#39;JQKA&amp;#39;) suits = &amp;#39;spades diamonds clubs hearts&amp;#39;.split() def __init__(self): self._cards = [Card(rank, suit) for suit in self.suits for rank in self.ranks] def __len__(self): return len(self._cards) def __getitem__(self, position): return self._cards[position] deck = new FrenchDeck() from random import choice choice(deck) # Card(rank=&amp;#39;3&amp;#39;, suit=&amp;#39;hearts&amp;#39;) 上面的例子我们使用了__len__方法和__getitem__方法，好处就是你可以使用python的len(deck)，deck[1]这种语法,也就是说FrenchDeck几乎就是一个容器类型，还可以使用for遍历。
调试与编译  使用help(),dir()获取信息 python中的每个函数都有__code__属性，包含字节码信息 使用dis模块的dis函数可以查看更容易阅读的汇编(dis == disassembler) sys.getsizeof(x)获取对象大小  优秀资料 python 工匠系列 realpython学习路径 一份非常详尽的python小抄
</content>
    </entry>
    
     <entry>
        <title>如何实现一个拼写检查器[翻译]</title>
        <url>https://zhimoe.github.io/post/spell-correct/</url>
        <categories>
          <category>翻译</category>
        </categories>
        <tags>
          <tag>code</tag><tag>python</tag>
        </tags>
        <content type="html"> 谷歌AI负责人norvig在07年写的如何实现一个拼写纠正器的经典博文How to Write a Spelling Corrector。 上面的链接已经是16年更新过了，程序也更新到了python3. 中文版的翻译 如何实现一个拼写纠正器 还是基于07年版本的。
博文最有意思的地方是大牛记录了如何在飞机上面没有网络的条件下徒手写一个准确率超过70%的拼写纠正器.
</content>
    </entry>
    
     <entry>
        <title>Associated Type in Rust</title>
        <url>https://zhimoe.github.io/post/type-in-rust/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>rust</tag>
        </tags>
        <content type="html"> Associated Type and generic diff in rust
type outside impl a type Foo = Bar outside is just type alias. most used in generic type.
like: type Thunk = Box&amp;lt;dyn Fn() &#43; Send &#43; &#39;static&amp;gt;;
type inside impl type in an impl defines an associated type. associated type可以理解为一个类型占位符，在trait的方法声明中使用。
pub trait Iterator { type Item; // or type T: Display;  fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt;; } 这里Iterator的Implementors将会指定Item的具体类型。例如：
impl Iterator for Counter { type Item = u32; fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt; { // --snip--  } } diff in associated type and generic 直接将上面的Iterator声明为如下泛型不是更简单么？
pub trait Iterator&amp;lt;T&amp;gt; { fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;T&amp;gt;; } // with generice, you can set default type: /// trait Generic&amp;lt;T = String&amp;gt; /// where T: Display,  主要的区别就是generic可是有任意多个实现，因为Add&amp;lt;Foo&amp;gt;和Add&amp;lt;Bar&amp;gt;是两个不同的类型。 而associated type只能有一个实现，因为Iterator只有一个类型,所以associated type可以用于限制类型。
when use The quick and dirty answer to when to use generics and when to use associated types is: Use generics if it makes sense to have multiple implementations of a trait for a specific type (such as the From&amp;lt;T&amp;gt; trait). Otherwise, use associated types (like Iterator and Deref).
假设我们实现一个redis 客户端，那么比较适合使用associated types:
trait RedisCommand{ type Response; fn receive(&amp;amp;self, message: String) -&amp;gt; Result&amp;lt;Self::Response&amp;gt;; } impl RedisCommand for PingCommand { type Response = String fn receive(&amp;amp;self, message: String) -&amp;gt; Result&amp;lt;Self::Response&amp;gt;{ // -- snip --  } } </content>
    </entry>
    
     <entry>
        <title>如何正确地系鞋带</title>
        <url>https://zhimoe.github.io/post/how-to-tie-shoelace/</url>
        <categories>
          <category>生活</category>
        </categories>
        <tags>
          <tag>鞋带</tag>
        </tags>
        <content type="html"> Ian安全结是登山系鞋带的首选，它越穿越紧，不会松开。解鞋带轻轻一拉即开。 而且对称美观，上手简单。值得每个人花十分钟学习。 本篇不仅给出Ian安全结示意图，还告诉大家如何让安全结和蝴蝶结水平对称，尽可能美观的秘诀。
以上是Ian结的步骤。下面是重点：
  无论是蝴蝶结还是Ian安全结，如果你发现自己的鞋带系完是斜的而非水平，原因是第一个辅助结和第二个结上下关系反了. 即图1的那个结是辅助结，黄色在上，蓝色在下，那么第二个结必须和图2中一样，黄色在上，蓝色在下， 如果你在第二步黄蓝反了，最后成结就是斜的!!! 这是我毕生绝学了.
  Ian安全结想要好看的诀窍在于，在快要拉紧绳结之前，先拉住鞋带两端松一下结，假装要扯开鞋带，这样安全结内部会变整齐，然后抓住8字环两端拉紧鞋带。注意，是快要拉紧之前扯松一下，扯的时候绳结应该已经有点摩擦了，太松了外扯整理不到结的内部，太紧了外扯结也不会改变形状了,就是拉紧之前反复整理一下，注意，如果这里你辅助结上下关系错了，最后很难整理出来满意的效果。最后的效果应该是最后一幅图的效果，而不是第一幅的图6那么丑的。
  作者：zhimoe 链接：https://www.zhihu.com/question/19728687/answer/501699533
</content>
    </entry>
    
     <entry>
        <title>Java 8 Lambda笔记</title>
        <url>https://zhimoe.github.io/post/java-lambda/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>java</tag><tag>lambda</tag>
        </tags>
        <content type="html"> 问题 Java是OOP语言,使用对象封装。由于函数不是一等公民,无法在方法中传递函数/方法。 在Java 8之前,使用匿名类表示行为：
// 监听器接口 public interface ActionListener { void actionPerformed(ActionEvent e); } // 使用匿名类传递一个行为 button.addActionListener(new ActionListener(){ public void actionPerformed(Event e){ System.out.println(&amp;#34;button clicked&amp;#34;); } }); 上面的代码主要的问题在于addActionListener方法期望的是一个行为,为了描述这个行为（代码即数据的概念）,在Java中不得不传入一个对象. 除了代码冗余,还存在下面问题
 业务逻辑淹没在匿名类语法中,就像Go语言的if err != nil一样 匿名类中的 this 和变量名容易使人产生误解 类型载入和实例创建语义不够灵活 无法捕获非 final 的局部变量  lambda表达式 为了解决上面的问题,Java8推出了lambda表达式——当接口只有一个抽象方法时,称为函数式接口（也叫单抽象方法类型,SAM类型）,可以使用lambda表达式表示这个接口的实现方法。
button.addActionListener(e -&amp;gt; System.out.println(&amp;#34;button clicked&amp;#34;)); 其中的e是actionPerformed(Event e)方法的参数,-&amp;gt; 后面的是方法体。 注意这里我们并没有提供e的类型,这是由类型推导技术实现的——javac根据addActionListener方法签名和actionPerformed方法签名推导出参数类型只能是Event。 不是所有情况都可以省略类型,但是请给IDE表现机会,只有在IDE提醒你有错误时再补充上类型信息。 下面都是合法的lambda表达式：
Runnable tsk = () -&amp;gt; println(&amp;#34;&amp;#34;); Runnable tsk = name -&amp;gt; { println(name);} BinaryOperator&amp;lt;Long&amp;gt; add = (Long x, Long y) -&amp;gt; x &#43; y; BinaryOperator&amp;lt;Long&amp;gt; add = (x, y) -&amp;gt; {return x &#43; y;} //类型推断, return和{}是冗余的 // &amp;lt;!-- 参数括号和大括号省略规则 --&amp;gt; // 1. 参数()：无参数使用(),1个参数可以省略括号,其他使用()。 // 2. 函数体{}：单语句的可以省略{},多条语句必须有{} 在Java中,已经有大量的函数式接口：
 java.lang.Runnable java.util.concurrent.Callable java.security.PrivilegedAction java.util.Comparator java.io.FileFilter java.beans.PropertyChangeListener   this指向调用者,也即是button lambda的类型是根据上下文来决定的, 所以相同入参和返回值情况下，目标类型可能不同，在无法判断时，需要补充目标类型信息:  Callable&amp;lt;String&amp;gt; c = () -&amp;gt; &amp;#34;done&amp;#34;; PrivilegedAction&amp;lt;String&amp;gt; a = () -&amp;gt; &amp;#34;done&amp;#34;; // error var add = (Long x, Long y) -&amp;gt; x &#43; y; // 这里add会报错： // java: cannot infer type for local variable add // (lambda expression needs an explicit target-type) // 因为满足 (Long, Long) -&amp;gt; Long的函数式接口很多,编译器无法知道add目标类型应该是什么。 当涉及到泛型时,类型推导总是有点力不从心,需要添加必要的类型信息：  函数式接口与@FunctionalInterface 有了lambda和函数式接口,框架方法在形参类型上面可以更加泛化了。例如你希望你的框架方法支持一个T-&amp;gt;R的操作,你可能会定义一个
@FunctionalInterface public interface Transfer&amp;lt;T, R&amp;gt; { R apply(T t); } 这里T,R是泛型，这是一个非常泛化的函数式接口。所以Java8在util.function包中新增了43个函数式接口,目的就是方便框架开发者能够减少新建自己的FunctionalInterface。 基础的接口只有6个:
   接口 函数签名 举例     UnaryOperator  R apply(T t);  String::toLocaerCase   BinaryOperator R apply(T t, U u); BigInterger::add    Predicate  boolean test(T t); Collection::isEmpty    Function  R apply(T t);  Arrays::asList    Supplier  T get();  Instant::now    Consumer  void accept(T t);  System.out::println     上面的是基础接口,此外还有：
 Consumer, Function, Predicate各自有一个2个入参的版本,共3个:BiConsumer,BiFunction,BiPredicate. 6个基础接口对应入参为基本类型int,long,double的接口,共18个:IntSupplier,LongFunction&amp;hellip; 6个基础接口对应返回值为基本类型int,long,double的Function和BiFunction,共6个: ToIntBiFunction,ToIntFunction&amp;hellip; int,long,double基本类型互转的Function共6个：DoubleToIntFunction,DoubleToLongFunction,IntToDoubleFunction,IntToLongFuncion,LongToDoubleFunction,LongToIntFunction. Consumer有同时接受一个Object和一个基本类型的版本,共3个: ObjDoubleConsumer{void accept(T t, int value);} 最后还有一个BooleanSupplier{boolean getAsBoolean();}  第一次见到BooleanSupplier可能完全不知道使用场景,毕竟有Supplier不就可以了么？
上面的基础接口虽然非常通用,但是如果有更好的接口名称时,应该使用更合适的那个。例如Comparator{int compare(T o1, T o2);}和ToIntBiFunction&amp;lt;T, U&amp;gt; {int applyAsInt(T t, U u);}签名完全一致,但是还是在比较的时候使用Comparator。
在构建自己的函数式接口时,务必使用注解@FunctionalInterface标注你的接口，这样可以给IDE lint和使用者提供更加充分信息。
方法引用 如果lambda表达式的方法体过长,那么需要抽取方法,Java8提供了更近一步的语法——方法引用。 方法引用表示一个lambda表达式。只需要引用的方法签名和lambda目标类型的抽象方法签名一致即可。 方法引用一共有5种类型,其中,静态方法是最常用的类型。
   方法引用类型 方法引用 对应lambda表达式     静态方法 Integer::parseInt str-&amp;gt; Integer.parseInt(str)   有限制(Bound receiver)实例引用 Instant.now()::isAfter Instant then = Instant.now(); then.isAfter(t)   无限制(Unbound receiver)实例引用 String::toLowerCase str -&amp;gt; str.toLowerCase   类构造器 TreeMap&amp;lt;K,V&amp;gt;::new ()-&amp;gt; new TreeMap&amp;lt;K,V&amp;gt;()   数组构造器 int[]::new  len-&amp;gt;new int[len]     Bound receiver其实很好理解,方法的receiver(上面的then = Instant.now())是固定的。 Unbound receiver的含义是方法的接收者(上面的str)是不确定的, 通过入参的形式传入。 而在方法引用的形式上面反而像静态方法引用(String::toLowerCase， toLowerCase不是静态方法，所以不是静态方法引用)。 更粗暴的理解就是入参是方法的引用对象,所以方法引用对象取决于入参（不确定）。 数组构造器的比较难以理解,可以看成如下代码： IntFunction&amp;lt;int[]&amp;gt; arrayMaker = int[]::new; int[] array = arrayMaker.apply(len) // 创建数组 int[len]   </content>
    </entry>
    
     <entry>
        <title>Python几道常见的笔试题</title>
        <url>https://zhimoe.github.io/post/python-interview-questions/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag>
        </tags>
        <content type="html"> 4道常见的python面试题和解答,以及一些python陷阱的链接。
问题    def change(v): v[1] = 4 return v a = [1, 2, 3] print(change(a)) print(a)   def append1(x=[]): x.append(1) return x def now(n=time.time()): time.sleep(1) return n print(append1(), append1()) #? print(now(), now()) #?   def arr_multi(): x = [[0] * 3] * 3 x[0][0] = 42 return x print(arr_multi())   def fn_for(): f = [lambda x: x * i for i in range(3)] print(f[0](1), f[1](1), f[2](1)) print(fn_for()) 解答    [1, 4, 3] [1, 4, 3] # 就是简单的引用传递,但是很多人不自信,在选择题里面频频出错. # python中所有的都是对象, id(obj)会返回地址.  # 但是如果新建对象是short string,int [-5,256],不可变的空集合(empty tuples) 等情况不会真的创建新对象. from copy import copy, deepcopy arr1 = [1,2,3,[4,5,6]] arr2 = copy(arr1) # shallow copy, new id, but elements in array is same id id(arr1[0]) == id(arr2[0]) #deepcopy arr3 = deepcopy(arr1) # elements id is new    # 结果: [1, 1] [1, 1] 1590544209.9695618 1590544209.9695618 # 不少人认为是: [1] [1, 1].其实还是没有深入理解引用的原理, # 翻译一下就很好理解了: y = append1() # id(y) == id(x), y=[1] y = append1() # id(y) == id(x), y=[1,1] print(y,y) 最好不要使用[]作为默认参数,使用下面的形式: def my_func(working_list=None): if working_list is None: working_list = [] working_list.append(&amp;#34;a&amp;#34;) print(working_list)   [[42, 0, 0], [42, 0, 0], [42, 0, 0]] # list 是mutable, []*3表示是引用复制三次. # 赋值后为什么只改变列的值？   2 2 2 None 本意其实是想得到一个函数列表[0x,1x,2*x]， 但是 Python’s closures are late binding. This means that the values of variables used in closures are looked up at the time the inner function is called. 解决方案是偏函数partial
from functools import partial def fix_fn_for(): f = [partial(lambda y, x: y * x, x=i) for i in range(3)] print(f[0](1), f[1](1), f[2](1)) 或：
fl=[lambda x, i=i: x*i for i in range(3)] 常见python陷阱 The 10 Most Common Mistakes in Python Some Common Gotchas in Python
</content>
    </entry>
    
     <entry>
        <title>Scala Python 文件读取跳过转义字符</title>
        <url>https://zhimoe.github.io/post/scala-python-file-encoding-escape/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>scala</tag><tag>python</tag>
        </tags>
        <content type="html"> 在文件读取的时候，会遇到非法转义字符，导致文件按行读取失败。此时可以通过忽略转义字符来解决。本文记录了scala和python的方法。
背景 有50G的服务器日志，拆分为几千个txt文件，编码是utf8,使用scala和python按行处理：
scala
def main(args: Array[String]): Unit = { for (line &amp;lt;- Source.fromFile(&amp;#34;./txt1.log&amp;#34;,&amp;#34;UTF8&amp;#34;).getLines()) { if (line.contains(&amp;#34;ABC&amp;#34;)) { //do something  } } } python
with open(&amp;#39;./txt1.log&amp;#39;,&amp;#39;r&amp;#39;,encoding=&amp;#39;utf-8&amp;#39;) as f: for line in f: pass #do something 但是文本中有一些行包含非法的转义字符，例如：
http://bbc.com/search.html \xa3\xa9 404 \r\n 李晓明 导致程序异常:
#scala java.nio.charset.MalformedInputException: Input length = 1 #python &amp;#39;utf-8&amp;#39; codec can&amp;#39;t decode byte 0xa3 in position 168: invalid start byte 方案 一般遇到这种非法转义字符，可以跳过这个错误，看成raw string来处理。
scala
import java.nio.charset.CodingErrorAction import scala.io.{Codec, Source} implicit val codec = Codec(&amp;#34;UTF-8&amp;#34;) codec.onMalformedInput(CodingErrorAction.REPLACE) codec.onUnmappableCharacter(CodingErrorAction.REPLACE) // 注意，fromFile方法没有提供&amp;#34;UTF8&amp;#34;参数 def main(args: Array[String]): Unit = { for (line &amp;lt;- Source.fromFile(&amp;#34;./test.file&amp;#34;).getLines()) { if (line.contains(&amp;#34;ABC&amp;#34;)) { //do something  } } } python
with open(&amp;#39;./txt1.log&amp;#39;,&amp;#39;r&amp;#39;,encoding=&amp;#39;utf-8&amp;#39;,errors=&amp;#39;ignore&amp;#39;) as f: for line in f: pass #do something 如果确认文本中没有中文的话，也可以使用下面的方式直接将其转义掉
with open(&amp;#39;./txt1.log&amp;#39;,&amp;#39;r&amp;#39;,encoding=&amp;#39;unicode_escape&amp;#39;) as f: </content>
    </entry>
    
     <entry>
        <title>Matplotlib图例中文乱码解决方案</title>
        <url>https://zhimoe.github.io/post/matplotlib-chinese-garbled-solution/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>python</tag>
        </tags>
        <content type="html"> 很久以前写的一个答案,四年来一直有人评论感谢,说只有我的方法是有效的.非常意外也很高兴. 也放到博客中里备份吧.
zhihu.com
# https://www.zhihu.com/question/25404709/answer/67672003 import matplotlib.font_manager as fm # 微软雅黑,如果需要宋体,可以用simsun.ttc myfont = fm.FontProperties(fname=&amp;#39;C:/Windows/Fonts/msyh.ttc&amp;#39;) # Linux字体在&amp;#34;/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc&amp;#34;,  # 需要先安装字体&amp;#34;&amp;gt;sudo apt install fonts-noto-cjk -y&amp;#34; # MacOS中文字体文件在&amp;#34;/System/Library/Fonts/PingFang.ttc&amp;#34; # Win10,Linux已测试,MacOS未验证 import matplotlib.pyplot as plt plt.clf() # 清空画布 plt.plot([1, 2, 3], [4, 5, 6]) plt.xlabel(&amp;#34;横轴&amp;#34;,fontproperties=myfont) plt.ylabel(&amp;#34;纵轴&amp;#34;,fontproperties=myfont) plt.title(&amp;#34;pythoner.com&amp;#34;,fontproperties=myfont) plt.legend([&amp;#39;图例&amp;#39;],prop=myfont) plt.show() </content>
    </entry>
    
     <entry>
        <title>Rust Ownerships Lifetimes教程</title>
        <url>https://zhimoe.github.io/post/rust-ownership-lifetimes/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>rust</tag>
        </tags>
        <content type="html"> some notes on rust ownership,reference,string and &amp;amp;str, and lifetimes
rust ownership //heap and stack: stack is store data that known,fixed size. //Keeping track of what parts of code are using what data on the heap, minimizing //the amount of duplicate data on the heap, and cleaning up unused data on the heap //so you don’t run out of space are all problems that ownership addresses.  //ownership rules: //Each value in Rust has a variable that’s called its owner. //There can only be one owner at a time. //When the owner goes out of scope, the value will be dropped.  // stack only data assignment(栈上数据) will make a copy operation, since it is fixed size, the copy is fast // use h.clone() make a heap data deeply copy. // impl the Copy trait can make a type still usable after assignment // Copy trait can not use with Drop trait,Drop可以理解为destructor,当数据超过自己的scope时,drop()方法被调用; fn copy() { let x = 5; let y = x; //copy the value(5) in the stack,since it is fixed-size, the copy operation is fast  let s1 = String::from(&amp;#34;hello&amp;#34;); //String 和 &amp;amp;str区别见后文  let s2 = s1; //s1 is invalid  // println!(&amp;#34;{}, world!&amp;#34;, s1); //error, the &amp;#34;hello&amp;#34; ownership move to s2  let s3 = s2.clone(); //copy the heap value(&amp;#34;hello&amp;#34;), impl the Clone trait  println!(&amp;#34;{}, world!&amp;#34;, s2); // s2 still usable } // passing function arguments or return value by function is same as // assigning a value to a variable, you need take care the ownership of heap value, fn ownership() { let x = 5; let x10 = plus10(x);// x still usable since the x is stack data  println!(&amp;#34;{}&amp;#34;, x); println!(&amp;#34;{}&amp;#34;, x10); let s = String::from(&amp;#34;hello&amp;#34;); takes_ownership(s); //s&amp;#39;s value moves into the function and so is no longer valid here  //println!(s) ;//error! } fn plus10(i: i32) -&amp;gt; i32 { // since the i is primitive in stack, so the function return a new value  i &#43; 10 } fn takes_ownership(some_string: String) { // some_string comes into scope  println!(&amp;#34;{}&amp;#34;, some_string); } // Here, some_string goes out of scope and `drop()` is called. The backing memory is freed. 推荐阅读A closer look at Ownership in Rust
References and Borrowing: // since the ownership is too hard to track by coder&amp;#39;s eye, rust introduce the ref and borrowing // a function that accept a ref will not takeover a value&amp;#39;s ownership when the function is called // also will not drop the value&amp;#39;s backend memory when function is return.  // a variable can only have one mut ref or many immutable ref in a same scope;  //dangling reference fn dangle() -&amp;gt; &amp;amp;String { let s = String::from(&amp;#34;dangle ref&amp;#34;); &amp;amp;s //error }// the s is dropped, but the function try to return s reference  ### String vs str vs &amp;amp;String vs &amp;amp;str //1. String is heap string buffer //2. &amp;amp;String is a ref of String //3. str is unknown immutable sequence of utf8 bytes stored somewhere in memory. the memory may be: // 3a. in binary: a string literal &amp;#34;foo&amp;#34; is a &amp;amp;&amp;#39;static str. The data is hardcoded into the executable and loaded into memory when the program runs. // 3b. in heap: Strings implement Deref&amp;lt;Target=str&amp;gt;, and so inherit all of str&amp;#39;s methods. // 3c. in stack: when use str::from_utf8(x).unwrap(); x is stack-value ref  //&amp;gt; the &amp;amp;str param can accept a &amp;amp;String since the String implement Deref&amp;lt;Target=str&amp;gt;. // 即接受&amp;amp;str的地方都可以使用&amp;amp;String  //!!! since the str is unknown size, one can only use it by &amp;amp;str, called slice. slice is a view of some data.  fn str() { let s = &amp;#34;hello str&amp;#34;;//The type of s here is &amp;amp;str: it’s a slice pointing to that specific point of the binary.  // This is also why string literals are immutable; &amp;amp;str is an immutable reference.  let mut string = s.to_string(); //&amp;amp;str to String  string.push_str(&amp;#34; append&amp;#34;); println!(&amp;#34;{}&amp;#34;, string); } //a string slice has static lifetime let s = &amp;#34;hello&amp;#34;; //means let s: &amp;amp;’static str = &amp;#34;hello&amp;#34;; lifetimes are only about reference a ref must die before its referent
in rust:
  A resource can only have one owner at a time. When it goes out of the scope, Rust removes it from the Memory.
  When we want to reuse the same resource, we are referencing it/ borrowing its content.
  When dealing with references, we have to specify lifetime annotations to provide instructions for the compiler to set how long those referenced resources should be alive.
  ⭐ But because of lifetime annotations make the code more verbose, in order to make common patterns more ergonomic, Rust allows lifetimes to be elided/omitted in fn definitions. In this case, the compiler assigns lifetime annotations implicitly.
  // No inputs, return a reference fn function1&amp;lt;&amp;#39;a&amp;gt;() -&amp;gt; &amp;amp;&amp;#39;a str {} // Single input fn function2&amp;lt;&amp;#39;a&amp;gt;(x: &amp;amp;&amp;#39;a str) {} // Single input and output, both have the same lifetime // The output should live at least as long as input exists fn function3&amp;lt;&amp;#39;a&amp;gt;(x: &amp;amp;&amp;#39;a str) -&amp;gt; &amp;amp;&amp;#39;a str {} // no need the lifetime annotation,lifetime elision  // Multiple inputs, only one input and the output share same lifetime // The output should live at least as long as y exists fn function4&amp;lt;&amp;#39;a&amp;gt;(x: i32, y: &amp;amp;&amp;#39;a str) -&amp;gt; &amp;amp;&amp;#39;a str {} // Multiple inputs, both inputs and the output share same lifetime // The output should live at least as long as x and y exist fn function5&amp;lt;&amp;#39;a&amp;gt;(x: &amp;amp;&amp;#39;a str, y: &amp;amp;&amp;#39;a str) -&amp;gt; &amp;amp;&amp;#39;a str {} // Multiple inputs, inputs can have different lifetimes 🔎 // The output should live at least as long as x exists fn function6&amp;lt;&amp;#39;a, &amp;#39;b&amp;gt;(x: &amp;amp;&amp;#39;a str, y: &amp;amp;&amp;#39;b str) -&amp;gt; &amp;amp;&amp;#39;a str {} lifetimes in struct/enum // Single element // Data of x should live at least as long as Struct exists struct Struct1&amp;lt;&amp;#39;a&amp;gt; { x: &amp;amp;&amp;#39;a str } // Multiple elements // Data of x and y should live at least as long as Struct exists struct Struct2&amp;lt;&amp;#39;a&amp;gt; { x: &amp;amp;&amp;#39;a str, y: &amp;amp;&amp;#39;a str } // Variant with a single element // Data of the variant should live at least as long as Enum exists enum Enum&amp;lt;&amp;#39;a&amp;gt; { Variant(&amp;amp;&amp;#39;a Type) } </content>
    </entry>
    
     <entry>
        <title>SpringBoot应用和Rust应用的Dockerfile最佳实践</title>
        <url>https://zhimoe.github.io/post/dockerfile-best-practices/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>docker</tag><tag>spring</tag><tag>rust</tag>
        </tags>
        <content type="html"> 记录spring boot和rust项目的Dockerfile的最佳实践.
spring boot应用Dockerfile spring.io提供了一个boot应用的Dockerfile指导. 不过有个问题,这个Dockerfile使用的maven是项目源码里面copy过去的.在一般项目中显然不规范.
Dockerfile的最终版:
# syntax=docker/Dockerfile:experimentalFROMmaven:3-jdk-8-alpine as buildWORKDIR/workspace/appCOPY pom.xml .COPY src srcRUN --mount=type=cache,target=/root/.m2 mvn package -DskipTests# app base imageFROMopenjdk:8-jdk-alpineVOLUME/tmpARG BUILD=/workspace/app/targetWORKDIR/appCOPY --from=build ${BUILD}/*.jar .RUN jar -xf ./*.jarRUN rm ./*.jarENTRYPOINT [&amp;#34;java&amp;#34;,&amp;#34;-cp&amp;#34;,&amp;#34;/app&amp;#34;,&amp;#34;org.springframework.boot.loader.JarLauncher&amp;#34;]要点:
 # syntax=docker/Dockerfile:experimental表示启用docker实验特性BuildKit的mount cache功能,这样可以利用maven lib的cache提高镜像构建速度. 大家可以搜索docker BuildKit了解. 如果没有这一行,那么下面的--mount=type=cache,target=/root/.m2就是非法的. 由于是实验特性,构建镜像的时候需要设置一个环境变量DOCKER_BUILDKIT=1才能运行: DOCKER_BUILDKIT=1 docker build -t zhimoe/boot-app . spring.io的教程里面使用的build镜像是openjdk:8-jdk-alpine,这个镜像是没有maven的,因为教程中的Dockerfile从源码复制了mvnw,.mvn/到镜像去.所以这里替换为maven:3-jdk-8-alpine 使用了docker的multi-stage build功能,openjdk:8-jdk-alpine由于没有maven,所以会比maven镜像少20M. spring.io的教程里面在ENTRYPOINT里面是直接设置main class启动应用的. 这种硬编码方式不通用也不利于维护(修改main class name后Dockerfile也要修改).只要将应用的jar包解压出来的org目录(即org.springframework.boot.loader.jar解压内容,不到1M)保留,即可通过org.springframework.boot.loader.JarLauncher启动应用. 注意java -cp /app中的classpath:/app 一定是绝对路径,否则java找不到main class,报错:Error: Could not find or load main class org.springframework.boot.loader.JarLauncher  rust应用Dockerfile # pull the latest version of RustFROMrust:latest AS builder# create a new empty shell projectRUN USER=root cargo new --bin prjWORKDIR/prj# copy over your manifestsCOPY ./Cargo.lock ./Cargo.toml ./# change the crate.io sourceCOPY ./config $CARGO_HOME/# this build step will cache your dependenciesRUN cargo build --releaseRUN rm -r src/*# copy your source files to WORKDIR/srcCOPY ./src ./srcCOPY ./static ./static# build for release, note! the Cargo.toml package name in deps is _, not -RUN rm ./target/release/deps/rs_notes*RUN cargo build --releaseRUN mv ./target/release/rs-notes .## 2 stage build# our final baseFROMdebian:stretch-slim AS app# for connecting to postgres and TLS hosts# RUN apt update -y &amp;amp;&amp;amp; apt install -y libpq-dev openssl libssl1.0-dev ca-certificates# copy the build artifact and static resources from the build stageCOPY --from=builder /prj/rs-notes ./COPY --from=builder /prj/static ./static# set the startup command to run your binaryCMD [&amp;#34;./rs-notes&amp;#34;]要点:
 如果使用scratch或者alpine镜像,那么需要将编译目标设置为MUSL,网络上有教程,个人感觉不需要.rust应用使用debian-slim基本在60M左右,只有spring boot应用镜像的一半大小. 在国内由于网络问题,所以修改了cargo的crate.io mirror地址:COPY ./config $CARGO_HOME/. config内容如下:  [source.crates-io] registry = &amp;#34;https://github.com/rust-lang/crates.io-index&amp;#34; replace-with = &amp;#39;ustc&amp;#39; [source.ustc] registry = &amp;#34;git://mirrors.ustc.edu.cn/crates.io-index&amp;#34; build中使用了cargo缓存,即先将项目Cargo.toml和Cargo.lock复制到一个空项目中编译,然后再将源码复制进去编译. RUN rm ./target/release/deps/rs_notes*,注意这里的rs_notes是下划线.cargo中package name转换为crate name的默认规则. </content>
    </entry>
    
     <entry>
        <title>Docker CMD ENTRYPOINT区别</title>
        <url>https://zhimoe.github.io/post/docker-cmd-entrypoint-diff/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>docker</tag>
        </tags>
        <content type="html"> 记录docker中exec form和shell form的区别,CMD和ENTRYPOINT区别,以及最佳实践.
exec form VS shell form # exec form &amp;lt;instruction&amp;gt; [&amp;#34;executable&amp;#34;, &amp;#34;param1&amp;#34;, &amp;#34;param2&amp;#34;, ...] # shell form &amp;lt;instruction&amp;gt; &amp;lt;command&amp;gt;  exec form 以JSON格式解析,所以命令参数必须使用&amp;quot;&amp;quot;双引号包裹; exec form 不会invoke shell. 所以CMD [ &amp;quot;echo&amp;quot;, &amp;quot;$HOME&amp;quot; ]中$HOME变量不会被替换; shell form实际是执行/bin/sh -c &amp;quot;&amp;lt;command&amp;gt;&amp;quot;; 优先使用 exec form,因为在shell form中spawns your application in a new process and you won’t receive signals from Docker,在k8s中会遇到问题; 在shell form也可以使用exec &amp;lt;cmd&amp;gt;形式;  CMD VS ENTRYPOINT 直接翻译SO上面的回答,比较清楚 ENTRYPOINT是容器执行入口,CMD是参数设置.
Docker有默认的 ENTRYPOINT:/bin/sh -c,但是没有默认的CMD.但是一般镜像都会设置一个默认的CMD.(注意是docker的默认 ENTRYPOINT,和镜像的默认CMD,基础镜像一般不设置 ENTRYPOINT) docker run -i -t ubuntu bash the ENTRYPOINT is the default /bin/sh -c, the image is ubuntu and the command is bash. 所以上面的命令实际上在启动容器中执行了/bin/sh -c bash. 不是所有场景都需要&amp;rdquo;/bin/sh&amp;quot;的,所以引入了 ENTRYPOINT and --entrypoint. docker run -i -t ubuntu中 ubuntu(镜像名)后面跟的所有内容都作为参数传递给entrypoint. 这和使用CMD指令是完全一样的,也即是CMD指令可以在docker run中覆盖. 由于ubuntu镜像设置了默认CMD: CMD [&amp;quot;bash&amp;quot;],所以docker run -i -t ubuntu和docker run -i -t ubuntu bash是完全一样的效果.
所以到此,可以总结: ENTRYPOINT 是容器的执行入口,CMD是参数设置,不过参数也可以是bash中的可执行命令(例如,CMD [&amp;quot;echo&amp;quot;,&amp;quot;hello&amp;quot;],实际执行 /bin/sh -c &amp;quot;echo hello&amp;quot;).
ENTRYPOINT和CMD的搭配可以实现将容器作为一个可执行文件启动,这个特性也是我们日常使用docker的主要目的.例如在Dockerfile中设置:
ENTRYPOINT [&amp;#34;/bin/cat&amp;#34;]运行docker run cat-img /etc/passwd,/etc/passwd 是cmd, 实际执行的是/bin/cat /etc/passwd. 恭喜你,得到一个cat程序,假设你安装了一个linux系统,里面没有cat命令,cat-img镜像就可以实现你想要的功能.
再例如你有个redis镜像,与其运行 docker run redis-img redis -H srv-host -u toto get key, 不如设置ENTRYPOINT [&amp;quot;redis&amp;quot;, &amp;quot;-H&amp;quot;, &amp;quot;srv-host&amp;quot;, &amp;quot;-u&amp;quot;, &amp;quot;toto&amp;quot;] 然后运行docker run redis-img get key.
 Dockerfile只有最后一个CMD会生效; 可以使用docker inspect &amp;lt;img-id&amp;gt;查看默认的CMD参数; 取消默认ENTRYPOINT,可以在Dockerfile中设置: ENTRYPOINT [] </content>
    </entry>
    
     <entry>
        <title>scala uniform access principle</title>
        <url>https://zhimoe.github.io/post/scala-uniform-access-principle/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>scala</tag>
        </tags>
        <content type="html"> 虽然代码写的很水,但是我对各种编程语言一直比较感兴趣. 除了工作中使用的Java之外,自己也了解Python,Groovy,Scala,Kotlin,Clojure,Go,Rust.其中Python和Scala在工作中也偶尔使用. 了解不同的编程语言语法对于编程思维的影响还是蛮有意思的. 例如, 只会Java的开发者可能没有听过模式匹配(pattern match).在我学习了Scala之后,我对模式匹配的理解就是更强更优雅的switch&#43;if. 而在我看过rust和elixir语言中关于模式匹配之后,我对模式匹配的理解就完全不一样了.
这些语言中,论说对编程思维改变最大的当属Clojure莫属. Lisp语言是一种非常优雅的语言. 这种优雅的最大特点就是Lisp(Clojure)从语法上面做到了代码即数据.即Clojure的代码形式和其数据结构list的形式是一样的(这也是lisp名字由来,LISt Processor). 这个特点的好处就是Clojure赋予了list这种数据结构强大的表达能力,可以在使用极其简练的语法在list数据结构实现复杂的逻辑.
 &amp;ldquo;It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.&amp;rdquo; —Alan Perlis
 尽可能的减少语法的规则,这种语法特点在Scala上面也有体现.
uniform access principle scala 中统一访问原则将class的方法和属性访问统一,都是通过obj.mbr访问. 这么做的好处是代码更加统一,而且重构更加方便.
 A function that takes no parameters, which is defined without any empty parentheses. Invocations of parameter less functions may not supply parentheses. This supports the uniform access principle, which enables the def to be changed into a val without requiring a change to client code.
 class Person { private var privateName = &amp;#34;&amp;#34; def name = privateName def name_=(value: String) = privateName = value } val john = new Person john.name = &amp;#34;John Doe&amp;#34; println(john.name) 统一也体现在集合访问形式上,在Scala中,Map,List,Array的元素访问都是通过coll(ki)形式. ki表示key或者index.个人非常喜欢这种统一.
</content>
    </entry>
    
     <entry>
        <title>Highlights in Scala for Impatient 2nd</title>
        <url>https://zhimoe.github.io/post/highlights-in-scala-for-impatient-2nd/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>scala</tag>
        </tags>
        <content type="html"> key points in scala-for-impatient 2nd book, best book for java developer to use scala in a rush
Functions • if expression has a value. • A block has a value — the value of its last expression. • The Scala for loop is like an “enhanced” Java for loop. • Semicolons are (mostly) optional. • The void type is Unit. • Avoid using `return` in a function. • Beware of missing = in a function definition. • Exceptions work just like in Java or C&#43;&#43;, but you use a “pattern matching” syntax for catch. • Scala has no checked exceptions. Arrays • Use an Array if the length is fixed, and an ArrayBuffer if the length can vary. • Don’t use new when supplying initial values. • Use () to access elements. • Use for (elem &amp;lt;- arr) to traverse the elements. • Use for (elem &amp;lt;- arr if . . . ) . . . yield . . . to transform into a new array. • Scala and Java arrays are interoperable; with ArrayBuffer, use scala.collection.JavaConverters._ don&amp;#39;t use scala.collection.JavaConversions. import scala.collection.mutable.ArrayBuffer val b = ArrayBuffer[Int]() // Or new ArrayBuffer[Int] // An empty array buffer, ready to hold integers  b &#43;= 1 // ArrayBuffer(1) // Add an element at the end with &#43;=  b &#43;= (1, 2, 3, 5) // ArrayBuffer(1, 1, 2, 3, 5) // Add multiple elements at the end by enclosing them in parentheses  b &#43;&#43;= Array(8, 13, 21) // ArrayBuffer(1, 1, 2, 3, 5, 8, 13, 21) // You can append any collection with the &#43;&#43;= operator  b.trimEnd(5) // ArrayBuffer(1, 1, 2) // Removes the last five elements  b.insert(2, 6) // ArrayBuffer(1, 1, 6, 2) // Insert before index 2  // iterate array with index // use view or use index(it&amp;#39;s faster) for (i&amp;lt;-b.indices){val v = b(i)} Maps &amp;amp; Tuples var scores = Map(&amp;#34;Alice&amp;#34; -&amp;gt; 10, &amp;#34;Bob&amp;#34; -&amp;gt; 3, &amp;#34;Cindy&amp;#34; -&amp;gt; 8) val scores2 = Map((&amp;#34;Alice&amp;#34;, 10), (&amp;#34;Bob&amp;#34;, 3), (&amp;#34;Cindy&amp;#34;, 8)) val bobsScore = scores(&amp;#34;Bob&amp;#34;) // Like scores.get(&amp;#34;Bob&amp;#34;) in Java  val scores1 = scala.collection.mutable.Map(&amp;#34;Alice&amp;#34; -&amp;gt; 10, &amp;#34;Bob&amp;#34; -&amp;gt; 3, &amp;#34;Cindy&amp;#34; -&amp;gt; 8) val scores3 = scala.collection.mutable.Map[String, Int]() scores1(&amp;#34;Bob&amp;#34;) = 10 val v = scores1(&amp;#34;Bob&amp;#34;) // NPE if key is not exists scores1.get(&amp;#34;Bob&amp;#34;) // None if key is not exists scores1.getOrElse(&amp;#34;Bob&amp;#34;,10)// 10 if key is not exists scores1 &#43;= (&amp;#34;Bob&amp;#34; -&amp;gt; 10, &amp;#34;Fred&amp;#34; -&amp;gt; 7) scores1 -= &amp;#34;Alice&amp;#34; // for immutable val newScores = scores &#43; (&amp;#34;Bob&amp;#34; -&amp;gt; 10, &amp;#34;Fred&amp;#34; -&amp;gt; 7) // New map with update val scores4 = scores - &amp;#34;Alice&amp;#34; scores -= &amp;#34;Alice&amp;#34; for ((k, v) &amp;lt;- scores){} for ((k, v) &amp;lt;- scores) yield (v, k) // sorted map val sortedScores = scala.collection.mutable.SortedMap(&amp;#34;Alice&amp;#34; -&amp;gt; 10,&amp;#34;Fred&amp;#34; -&amp;gt; 7, &amp;#34;Bob&amp;#34; -&amp;gt; 3, &amp;#34;Cindy&amp;#34; -&amp;gt; 8) // insert order val months = scala.collection.mutable.LinkedHashMap(&amp;#34;January&amp;#34; -&amp;gt; 1,&amp;#34;February&amp;#34; -&amp;gt; 2, &amp;#34;March&amp;#34; -&amp;gt; 3, &amp;#34;April&amp;#34; -&amp;gt; 4, &amp;#34;May&amp;#34; -&amp;gt; 5) import scala.collection.JavaConverters._ // tuple val t = (1, 3.14, &amp;#34;Fred&amp;#34;) val second = t._2 // Sets second to 3.14  val keys = Array() val values = Array() val kv = keys.zip(values).toMap() Object • Use objects for singletons and utility methods. • A class can have a companion object with the same name. • Objects can extend classes or traits. • The apply method of an object is usually used for constructing new instances of the companion class. • To avoid the main method, use an object that extends the App trait. • You can implement enumerations by extending the Enumeration object. Package The key points of this chapter are: • Packages nest just like inner classes. • Package paths are not absolute. • A chain x.y.z in a package clause leaves the intermediate packages x and x.y invisible. • Package statements without braces at the top of the file extend to the entire file. • A package object can hold functions and variables. • Import statements can import packages, classes, and objects. • Import statements can be anywhere. • Import statements can rename and hide members. • java.lang, scala, and Predef are always imported Inheritance • The `extends` and `final` keywords are as in Java. • You must use `override` when you override a method. • Only the primary constructor can call the primary superclass constructor. • You can `override` fields. Files • Source.fromFile(...).getLines.toArray yields all lines of a file. • Source.fromFile(...).mkString yields the file contents as a string. • To convert a string into a number, use the toInt or toDouble method. • Use the Java PrintWriter to write text files. • &amp;#34;regex&amp;#34;.r is a Regex object. • Use &amp;#34;&amp;#34;&amp;#34;...&amp;#34;&amp;#34;&amp;#34; if your regular expression contains backslashes or quotes. • If a regex pattern has groups, you can extract their contents using the syntax for (regex(var1, ...,varn) &amp;lt;- string). Traits Key points of this chapter: • A class can implement any number of traits. • Traits can require implementing classes to have certain fields, methods, or superclasses. • Unlike Java interfaces, a Scala trait can provide implementations of methods and fields. • When you layer multiple traits, the order matters—the trait whose methods execute first goes to the back. Operators val a = 10 //a: Int = 10  -a // res0: Int = -10 //means the same as a.unary_-.  a.unary_- //res1: Int = -10  High Order Functions Array(3.14, 1.42, 2.0).map{ (x: Double) =&amp;gt; 3 * x } //== Array(3.14, 1.42, 2.0) map { (x: Double) =&amp;gt; 3 * x } // diff method and function Collections The key points of this chapter are: • All collections extend the Iterable trait. • The three major categories of collections are sequences, sets, and maps. • Scala has mutable and immutable versions of most collections. • A Scala list is either empty, or it has a head and a tail which is again a list. • Sets are unordered collections. • Use a LinkedHashSet to retain the insertion order or a SortedSet to iterate in sorted order. • &#43; adds an element to an unordered collection; &#43;: and :&#43; prepend or append to a sequence; &#43;&#43; concatenates two collections; - and -- remove elements. • The Iterable and Seq traits have dozens of useful methods for common operations. Check them out before writing tedious loops. • Mapping, folding, and zipping are useful techniques for applying a function or operation to the elements of a collection Iterable trait methods: head, last, headOption, lastOption tail, init length, isEmpty map(f), flatMap(f), foreach(f), transform(f), collect(pf) reduceLeft(op), reduceRight(op),foldLeft(init)(op), foldRight(init)(op) reduce(op), fold(init)(op),aggregate(init)(op, combineOp) sum, product, max, min count(pred), forall(pred), exists(pred) filter(pred), filterNot(pred), partition(pred) takeWhile(pred), dropWhile(pred), span(pred) take(n), drop(n), splitAt(n) takeRight(n), dropRight(n) slice(from, to), view(from, to) zip(coll2), zipAll(coll2, fill, fill2), zipWithIndex(cation! the 2nd value in tuple is index) grouped(n), sliding(n) groupBy(k) // mkString(before, between, after), addString(sb, before, between, after) toIterable, toSeq, toIndexedSeq, toArray, toBuffer, toList, toStream, toSet, toVector, toMap, to[C] Important Methods of the Seq Trait: contains(elem), containsSlice(seq), startsWith(seq), endsWith(seq) indexOf(elem), lastIndexOf(elem), indexOfSlice(seq), lastIndexOfSlice(seq), indexWhere(pred) prefixLength(pred), segmentLength(pred, n) padTo(n, fill) intersect(seq), diff(seq) reverse sorted, sortWith(less), sortBy(f) permutations, combinations(n) //The map and flatMap methods are important because they are used //for translating for expressions. For example, the expression:  for (i &amp;lt;- 1 to 10) yield i * i //is translated to (1 to 10).map(i =&amp;gt; i * i) //and for (i &amp;lt;- 1 to 10; j &amp;lt;- 1 to i) yield i * j //becomes (1 to 10).flatMap(i =&amp;gt; (1 to i).map(j =&amp;gt; i * j)) val coll = List() coll.par.sum coll.par.count(_ % 2 == 0) for (i &amp;lt;- (0 until 100000).par) print(s&amp;#34; $i&amp;#34;) (for (i &amp;lt;- (0 until 100000).par) yield i) == (0 until 100000) Pattern Matching The key points of this chapter are: • The match expression is a better switch, without fall-through. • If no pattern matches, a MatchError is thrown. Use the case _ pattern to avoid that. • A pattern can include an arbitrary condition, called a guard. • You can match on the type of an expression; prefer this over isInstanceOf/asInstanceOf. • You can match patterns of arrays, tuples, and case classes, and bind parts of the pattern to variables. • In a for expression, nonmatches are silently skipped. • A case class is a class for which the compiler automatically produces the methods that are needed for pattern matching. • The common superclass in a case class hierarchy should be sealed. • Use the Option type for values that may or may not be present—it is safer than using null. Annotations The key points of this chapter are: • You can annotate classes, methods, fields, local variables, parameters,expressions, type parameters, and types. • With expressions and types, the annotation follows the annotated item. • Annotations have the form @Annotation, @Annotation(value), or @Annotation(name1 =value1, ...). • @volatile, @transient, @strictfp, and @native generate the equivalent Java modifiers. • Use @throws to generate Java-compatible throws specifications. • The @tailrec annotation lets you verify that a recursive function uses tail call optimization. • The assert function takes advantage of the @elidable annotation. You can optionally remove assertions from your Scala programs. • Use the @deprecated annotation to mark deprecated features. Future The key points of this chapter are: • A block of code wrapped in a Future { ... } executes concurrently. • A future succeeds with a result or fails with an exception. • You can wait for a future to complete, but you don’t usually want to. • You can use callbacks to get notified when a future completes, but that gets tedious when chaining callbacks. • Use methods such as map/flatMap, or the equivalent for expressions, to compose futures. • A promise has a future whose value can be set (once), which gives added flexibility for implementing tasks that produce results. • Pick an execution context that is suitable for the concurrent workload of your computation. Implicits The key points of this chapter are: • Implicit conversions are used to convert between types. • You must import implicit conversions so that they are in scope. • An implicit parameter list requests objects of a given type. They can be obtained from implicit objects that are in scope, or from the companion object of the desired type. • If an implicit parameter is a single-argument function, it is also used as an implicit conversion. • A context bound of a type parameter requires the existence of an implicit object of the given type. • If it is possible to locate an implicit object, this can serve as evidence that a type conversion is valid. Type Class CanBuildFrom</content>
    </entry>
    
     <entry>
        <title>Rust Packages Crates Mod Notes</title>
        <url>https://zhimoe.github.io/post/rust-packages-crates-mod/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>rust</tag>
        </tags>
        <content type="html"> 初学rust对于项目的package和crate的关系,module和文件的关系有点理不清.做了一点笔记.
packages, crates and modules A Cargo.toml is a package. and must have a package name, like
[package] name = &amp;#34;actix-web&amp;#34; A package(project) contains one or more crates;
A package CAN contain as many binary crates as you’d like, but it must contain at least one crate (either library or binary); use src/main.rs, will build to package-name binary, or use src/bin/b1.rs,src/bin/b2.rs, wil get 2 binaries: b1,b2.
A package must contain zero or one(0或者1个) library crates, and no more.
by convention, package-name is use - (dash,can be _), but lib_name must use _ (underscores, can not be -);
cargo will auto replace the - with _ in package-name to name the default library crate(lib.rs in src root). Also you can name it in [lib]:
[lib] name = &amp;#34;actix_web&amp;#34; path = &amp;#34;src/lib.rs&amp;#34; # also you can rename the binary: # it use [[]], array in toml [[bin]] name = &amp;#34;my-cool-binary&amp;#34; path = &amp;#34;src/my-cool-binary.rs&amp;#34; one package(project) can only have one library crate, when the lib continues to get bigger, you want to split up the lib into multiple packages. cargo introduce you with workspace.
 A workspace is a set of packages that share the same Cargo.lock and output directory.
 here is the actix-web package Cargo.toml file:
[workspace] members = [ &amp;#34;.&amp;#34;, &amp;#34;awc&amp;#34;, &amp;#34;actix-http&amp;#34;, &amp;#34;actix-cors&amp;#34;, &amp;#34;actix-files&amp;#34;, &amp;#34;actix-framed&amp;#34;, &amp;#34;actix-session&amp;#34;, &amp;#34;actix-identity&amp;#34;, &amp;#34;actix-multipart&amp;#34;, &amp;#34;actix-web-actors&amp;#34;, &amp;#34;actix-web-codegen&amp;#34;, &amp;#34;test-server&amp;#34;, ] # awc,actix-http... all are packages that contains their own Cargo.toml and src/lib.rs;  A crate is a compilation unit in Rust.
Whenever rustc some_file.rs is called, some_file.rs is treated as the crate file. If some_file.rs has mod declarations in it, then the contents of the module files would be inserted in places where mod declarations in the crate file are found, before running the compiler it. In other words, modules do not get compiled individually, only crates get compiled.
mod mod_name {} defines a mod.
mod mod_name;  cargo will look for mod_name.rs or mod_name/mod.rs and insert the content to current file.
by default the mod is private; but nested mod is allowed to use any code in super mod;
self and super is to ref the current mod and super mod;
fn main(){ // absolute path crate::music::popular::play(); // relative path music::popular::play(); } the Structs members is all private by default even struct name is pub;
the Enums members is all public by default if the name is pub;
use keyword the use keyword brings path(crate mod path) into scope;
//bring a module into scope with `use` and a relative path need start `self`: use self::music::popular; //!!!the self:: is no needed in rust 2018&#43;  //use the absolute path use crate::music::popular; //make the path to public pub use crate::music::popular; //use use std::{cmp::Ordering,io}; use std::{self,Write}; split up mod into files  the mod can be defined in mod_name.rs or mod_name/mod.rs. and nested mod can be in mod_name/nested_mod.rs. you can ref the nested_mod by use mod nested_mod; in mod_name.rs;  summary   简单粗暴的理解,一个项目 == 一个package, 一个package可以包含多个crate.
  crate是Cargo的编译单元,也是Cargo.toml中[dependencies]的依赖单元.
  一个package只能包含一个lib crate(src/lib.rs),但是可以在src/main.rs或者src/bin/*.rs下面包含任意多个bin crate;
  对于复杂项目,可以通过cargo的[workspace]管理多个crate,这样可以实现一个Cargo.toml管理/构建多个lib crate.
  mod是rust中代码的组织最小单元. mod mod_name {} 是定义一个mod;mod mod_name;  表示将mod_name.rs或者mod_name/mod.rs中的内容插入到当前文件当前位置,并且插入内容被包含在mod mod_name中.
  crate内部的mod引用使用self::开头,引用外部crate则使用crate::开头.
 </content>
    </entry>
    
     <entry>
        <title>git 常用命令备忘录</title>
        <url>https://zhimoe.github.io/post/git-useful-tips/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>git</tag><tag>code</tag>
        </tags>
        <content type="html"> 记录日常开发中偶尔会遇到的但是总是记不住的git命令.
以下技巧都来自于oh shit git 和 stackoverflow. 版权归作者所有.
delete all history commit and commit current content git checkout --orphan tmp_branch &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -am &amp;#34;first commit&amp;#34; &amp;amp;&amp;amp; git branch -D master &amp;amp;&amp;amp; git branch -m master &amp;amp;&amp;amp; git push -f origin master store password in local git config credential.helper store git reflog git reflog # you will see a list of every thing you&amp;#39;ve # done in git, across all branches! # each one has an index HEAD@{index} # find the one before you broke everything git reset HEAD@{index} # magic time machine git commit &amp;ndash;amend # make your change git add . # or add individual files git commit --amend --no-edit # now your last commit contains that change! # WARNING: never amend public(remote) commits!!! # I need to change the message on my last commit! git commit --amend # follow prompts to change the commit message undo a commit # Oh shit, I need to undo a commit from like 5 commits ago! # find the commit you need to undo git log # use the arrow keys to scroll up and down in history # once you&amp;#39;ve found your commit, save the hash git revert [saved hash] # git will create a new commit that undoes that commit # follow prompts to edit the commit message # or just save and commit undo a file&amp;rsquo;s changes # find a hash for a commit before the file was changed git log # use the arrow keys to scroll up and down in history # once you&amp;#39;ve found your commit, save the hash git checkout [saved hash] -- path/to/file # the old version of the file will be in your index git commit -m &amp;#34;Wow, you don&amp;#39;t have to copy-paste to undo&amp;#34; git stash # 如果临时想要将代码恢复到最近一次commit,帮助同事复现他的问题 # 使用git stash 暂存当前修改,这个不是stage,也不是commit git stash # 显示当前暂存历史 git stash list # 找回暂存 git stash apply # or spec which the stash git stash apply stash@{1} git rebase git pull request git cherry-pick commit change in submodule # submodule is a independent repo, # so you need commit/push change in submodule first and then # update(commit) the main project to refer a new submodule commit hash # step 1 cd path/to/submodule git add &amp;lt;stuff&amp;gt; git commit -m &amp;#34;comment&amp;#34; git push # step 2 cd /main/project git add path/to/submodule git commit -m &amp;#34;updated my submodule&amp;#34; git push </content>
    </entry>
    
     <entry>
        <title>DevOps 成熟度检查清单</title>
        <url>https://zhimoe.github.io/post/devops-maturity-model-checklist/</url>
        <categories>
          <category>DevOps</category>
        </categories>
        <tags>
          <tag>code</tag>
        </tags>
        <content type="html"> 之前听说过AWS的软件工程师是需要自己写需求说明书,前后端代码,测试和上线。还有ins的工程师可以做到python的代码提交如果合并到主分支后可以在一个小时内自动部署到生产被用户使用到,感觉这个非常神奇。如果需要做到这个,对组织级可个人都有极高的devops能力成熟度。 下面列出devops的组织级需要提供的一些能力项。主要涉及的一些要点记录下来。
核心要点就是要有统一的管理系统,系统之间需要联动,例如记录故事的系统,如何和你提交记录关联?测试的缺陷问题如何和你的故事关联?生产正在运行的代码,如何和代码库的某个基线对应上?测试报告/需求说明书是否统一管理并和你的迭代有关联?是否可以做到故事的回滚出发代码的回滚?
版本控制 git
分支管理 feature分支开发，pr模式合并
制品管理 含maven,npm(特别是node-sass在windows的问题),python pip,ruby gem,goproxy, rust crate这些的私服和各开发团队的制品，一般使用jfrog。
单一可信数据源 制品来源统一，统一使用jfrog
变更过程 变更追溯 构建环境 构建方式 构建计划 集成服务 jenkins,pipeline,sonar,
反馈周期,方式, 分层方法和策略 金字塔测试模型,冰激凌模型,纺锤模型 接口测试和文档,单元测试的设计和文档?非功能性测试（安全,性能,可靠性,兼容性）,探索性测试, 测试结果自动分析
测试时机 及早介入（TDD即先测试再写代码）
代码质量规约,code review,sonar等 反馈处理 自动化设计 自动化开发 自动化执行 分析 部署方式,过程,策略,质量 协作模式 审批,系统资源等待 团队和系统的关联?是否可以团队独立上线?
过程可视化 pipeline
环境类型 不要开发人员自己搭建开发环境,保证工具版本的统一; 自服务申请的开发环境,测试,UAT环境。 统一的配置管理系统（CMDB)
数据来源,数据覆盖,数据变更,数据向下兼容性,数据回滚,数据监控 binlog,flyway, 向下兼容性：故事需要删除了表字段,那么上线时如何做到应用和数据同时更新,或者数据脚本执行不影响旧应用的运行?
测试数据来源,数据脱敏 度量指标 指标的定义,类型（技术指标,业务指标） 技术指标：团队开发效率,缺陷率,构建时长,上线质量,生产事故, 业务指标：MAU,DAU,用户数量,登录次数
度量数据的管理和共享 度量数据的更新和时效性 反馈改进 </content>
    </entry>
    
     <entry>
        <title>Scala Collection Tips</title>
        <url>https://zhimoe.github.io/post/scala-collection-tips/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>scala</tag>
        </tags>
        <content type="html"> scala collection 提供了一整套独立于Java的高性能集合,使用上非常灵活,所以需要清楚一些常用的方法:
 reduce fold scan 集合的符号方法 数组,tuple 2.13的集合架构  reduce fold scan //reduce是一个二元函数,遍历整个集合 List(1, 3, 5).reduceLeft(_ &#43; _) // == ((1&#43;3)&#43;5) //reduceRight start from end of the collection //also you can given initial argument List(1, 3, 5).foldLeft(&amp;#34;&amp;#34;)(_ &#43; _) // == 135 //foldLeft 等价于 \: 操作符 (0 /: List(1, 3, 5)) (_ - _) //folding 常用于替代for-loop val wf1 = scala.collection.mutable.Map[Char, Int]() for (c &amp;lt;- &amp;#34;Mississippi&amp;#34;) wf1(c) = wf1.getOrElse(c, 0) &#43; 1 // Now freq is Map(&amp;#39;i&amp;#39; -&amp;gt; 4, &amp;#39;M&amp;#39; -&amp;gt; 1, &amp;#39;s&amp;#39; -&amp;gt; 4, &amp;#39;p&amp;#39; -&amp;gt; 2)  //注意使用了不可变map val wf = (Map[Char, Int]() /: &amp;#34;Mississippi&amp;#34;) { (m, c) =&amp;gt; m &#43; (c -&amp;gt; (m.getOrElse(c, 0) &#43; 1)) } //scan 方法可以获得每一步中间结果集 (1 to 10).scanLeft(0)(_ &#43; _) //Vector(0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55)  集合的符号方法 //&#43; 表示添加一个元素到无序集合 // :&#43; &#43;:表示添加到有序集合的首/尾 //elem append or prepend to coll (Seq) coll :&#43; elem elem &#43;: coll //add elem to set/map coll &#43; elem coll &#43; (e1,e2,...) coll &#43;&#43; coll2 coll2 &#43;&#43;: coll // prepend to lst elem :: lst lst2 ::: lst // 等价list &#43;&#43;: list2 list ::: list2 // 含有=的表示修改,必须是mutable的集合  // TIP: As you can see, Scala provides many operators for adding and removing // elements. Here is a summary: // 1. Append (:&#43;) or prepend (&#43;:) to a sequence. // 2. Add (&#43;) to an unordered collection. // 3. Remove with the - operator. // 4. Use &#43;&#43; and -- for bulk add and remove. // 5. Mutations are &#43;= &#43;&#43;= -= --=. // 6. For lists, many Scala programmers prefer the :: and ::: operators. // 7. Stay away from &#43;&#43;: &#43;=: &#43;&#43;=:. NOTE: For lists, you can use &#43;: instead of :: for consistency, with one exception: Pattern matching (case h::t) does not work with the &#43;: operator.
其他 //数组的笔记 val ints = new Array[Int](30) // empty array val ints2 = Array[Int](1, 2, 3, 4) // array with init values val matrix4x9 = Array.ofDim[Double](4, 9) //update ints2(3) = 1000 // or ints2.update(3, 1000) //求和 val ints2Sum = ints2.sum val days = Array(&amp;#34;Monday&amp;#34;, &amp;#34;Tuesday&amp;#34;, &amp;#34;Wednesday&amp;#34;, &amp;#34;Thrusday&amp;#34;, &amp;#34;Friday&amp;#34;, &amp;#34;Saturday&amp;#34;, &amp;#34;Sunday&amp;#34;) //遍历 for (i &amp;lt;- 0 until days.length) println(days(i)) for (day &amp;lt;- days) println(day) days foreach println //遍历中使用index days.zipWithIndex.map { case (e, i) =&amp;gt; (i, e) } //faster for (i &amp;lt;- days.indices) yield (i, days(i)) //Possibly fastest Array.tabulate(days.length) { i =&amp;gt; (i, days(i)) } //肯定最快 val b = new Array[(Int, String)](days.length) var i = 0 while (i &amp;lt; days.length) { b(i) = (i, days(i)) i &#43;= 1 } //filter days.filter(day =&amp;gt; day.length &amp;gt; 4) //map Array(1, 2, 3, 4, 5).map(x =&amp;gt; x * x) //sort Array(3, 6, 2, 0, 8, 5).sortWith((e1, e2) =&amp;gt; e1 &amp;lt; e2) //小的在前 //reduce,下面的会提示使用sum, Array(1, 2, 3, 4, 5).reduce((e1, e2) =&amp;gt; e1 &#43; e2) //不定长数组 import scala.collection.mutable.ArrayBuffer val arr = ArrayBuffer[Int]() //tuple val oneAndTwo = (1, 2) val oneAndTwo1 = Tuple2(1, 2) //Pair is alias of Tuple2 val oneAndTwo2 = Pair(1, &amp;#34;two&amp;#34;) val oneAndTwo3 = 1 -&amp;gt; 2 //访问元素下标是从1开始,这是因为tuple里面每个元素类型不一样,为了能够和list等区分开 //使用了类似Haskell/ML的习惯 val two = oneAndTwo._2 //option val emptyOpt: Option[Int] = None val fullOpt: Option[Int] = Some(42) emptyOpt match { case Some(value) =&amp;gt; println(value) case None =&amp;gt; println(&amp;#34;Empty&amp;#34;) } fullOpt.get //42 emptyOpt.isEmpty //true  //either def divide(a: Double, b: Double): Either[String, Double] = { if (b == 0.0) Left(&amp;#34;Division by zero&amp;#34;) else Right(a / b) } divide(4, 0) def either(flag: Boolean): Either[String, List[Int]] = { if (flag) Right(List(1, 2, 3)) else Left(&amp;#34;Wrong&amp;#34;) } val content = either(true).right.map(_.filter(_ &amp;gt; 0)) //cast Seq(1).toArray Seq(1).toBuffer Seq(1).toList Seq((1, 2)).toMap Seq(1).toStream Seq(1).toString Seq(1).toVector Seq(1).toTraversable Seq(1).toIndexedSeq Seq(1).toIterable Set(1).toSeq Seq(1).toSet //zip, zipAll, zipWithIndex, unzip &amp;#34;abcde&amp;#34; zip 1.to(5) //zipAll:第二个参数是调用者元素缺失使用的默认值,第三个参数是第一个实参不够长的默认值 &amp;#34;abcde&amp;#34;.zipAll(1.to(2), &amp;#34;caller&amp;#34;, &amp;#34;arg&amp;#34;) //尝试自己实现一个zipAll? // &amp;#34;abcde&amp;#34; zipWithIndex Seq((1, 2), (3, 4), (5, 6)) unzip // val s = Seq(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;) scala 2.13 collection 基本重写了.参考这两个文档: collections migration 2.13 the architecture of scala 2.13’s collections
</content>
    </entry>
    
     <entry>
        <title>前端静态资源图片优化</title>
        <url>https://zhimoe.github.io/post/%E5%89%8D%E7%AB%AF%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/</url>
        <categories>
          <category>翻译</category>
        </categories>
        <tags>
          <tag>code</tag>
        </tags>
        <content type="html"> GTmetrix是一个前端页面测试的网站,可以发现你的站点哪些地方速度较慢,并针对性的优化. How to Optimize Images: A Practical Guide
</content>
    </entry>
    
     <entry>
        <title>Spring FactoryBean and ContextAware</title>
        <url>https://zhimoe.github.io/post/spring-factorybean-contextaware/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>spring</tag>
        </tags>
        <content type="html"> FactoryBean 一句话就是FactoryBean用于返回其他对象实例的,而不是自身类型的实例. 例如:
public class Tool { private int id; // standard constructors, getters and setters } public class ToolFactory implements FactoryBean&amp;lt;Tool&amp;gt; { private int factoryId; private int toolId; @Override public Tool getObject() throws Exception { return new Tool(toolId); } @Override public Class&amp;lt;?&amp;gt; getObjectType() { return Tool.class; } @Override public boolean isSingleton() { return false; } // standard setters and getters } 注册Tool:
&amp;lt;!-- factorybean-spring-ctx.xml --&amp;gt; &amp;lt;beans&amp;gt; &amp;lt;bean id=&amp;#34;tool&amp;#34; class=&amp;#34;com.baeldung.factorybean.ToolFactory&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;factoryId&amp;#34; value=&amp;#34;9090&amp;#34;/&amp;gt; &amp;lt;property name=&amp;#34;toolId&amp;#34; value=&amp;#34;1&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; 使用注解注册:
@Bean(name = &amp;#34;tool&amp;#34;) ToolFactory toolFactory() { ToolFactory factory = new ToolFactory(); factory.setFactoryId(7070); factory.setToolId(2); return factory; } 使用Tool:
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = { &amp;#34;classpath:factorybean-spring-ctx.xml&amp;#34; }) public class FactoryBeanXmlConfigTest { @Autowired private Tool tool; @Test public void testConstructWorkerByXml() { assertThat(tool.getId(), equalTo(1)); } } 访问ToolFactory,在bean id前面添加 &amp;amp;:
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = { &amp;#34;classpath:factorybean-spring-ctx.xml&amp;#34; }) public class FactoryBeanXmlConfigTest { @Resource(name = &amp;#34;&amp;amp;tool&amp;#34;) private ToolFactory toolFactory; @Test public void testConstructWorkerByXml() { assertThat(toolFactory.getFactoryId(), equalTo(9090)); } } 和BeanFactory的区别 除了FactoryBean,还有一个BeanFactory的接口及其实现.
</content>
    </entry>
    
     <entry>
        <title>Learn Clojure by Example</title>
        <url>https://zhimoe.github.io/post/learn-clojure-by-example/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>clojure</tag>
        </tags>
        <content type="html"> clojure 入门 这份笔记试图打造最强的clojure小抄,keep refactoring it&amp;hellip;
(ns clj-notes.core (:gen-class)) ;:gen-class generate java class file ;Parameter is variable in the declaration of function. ;Argument is the actual value of this variable that gets passed to function. ; ;install leiningen: ;put lein.bat in your PATH ;open cmder,run: lein repl ;start repl,use exit,(exit),(quit) or ctrl&#43;d to quit repl (println &amp;#34;hello clojure&amp;#34;) ;Symbols are used to bind names to values ;&amp;#39; will prevent a form from being evaluated ;&amp;#39;() same as (quote ()) ;def global variable ;let local variable binding (def object &amp;#34;light&amp;#34;) (println object) (let [x 10 y 20 z 30] (&#43; x y z)) ;=&amp;gt; 60 ;data collection ;seq is abstract for list vector array ;map (def dict {:k1 &amp;#34;v1&amp;#34; :k2 &amp;#34;v2&amp;#34;}) ;keyword as function (:k1 dict) ;return v1 ;map as function (dict :k1) ;return v1 (let [v (dict :k1)] (println v)) ;also you can use get on seq or map (get {:a 1 :b 2} :b) ;=&amp;gt; 2 ;clojure.core/seq is a function that produces a sequence over the given argument.  ;Data types that clojure.core/seq can produce a sequence over are called seqable: ; ;Clojure collections ;Java maps ;All iterable types (types that implement java.util.Iterable) ;Java collections (java.util.Set, java.util.List, etc) ;Java arrays ;All types that implement java.lang.CharSequence interface, including Java strings ;All types that implement clojure.lang.Seqable interface ;nil ;function for seq or collection ;= ;count ;conj ;empty ;seq ;first ;rest ;next ;count ;counted? ;conj ;get ;assoc ;defn 定义函数 ;defn- 定义ns内私有函数 (defn f &amp;#34;the second line is doc-string&amp;#34; {:added &amp;#34;1.2&amp;#34; ;this is attr-map :static true} [param] (print &amp;#34;hello &amp;#34; param)) (meta (var f)) ;#&amp;#39; is the reader macro for var and works the exactly same (meta #&amp;#39;f) ;fn create a function (def f (fn [] (println &amp;#34;this is from fn function&amp;#34;))) ;#() is the shortcut for fn (def plus-one #(&#43; 1 %)) ;% will be replaced with arguments passed to the function ;%1 is for the first argument, %2 is for the second and so on (defn des [{k1 :k1}] ;get :k1 value from argument (map) and binding it to k1(parameter) (println &amp;#34;destructing in map&amp;#34; k1)) (des dict) ;destructing in map v1 ;key don&amp;#39;t have to be keyword (defn currency-of [{currency &amp;#34;currency&amp;#34;}] currency) (defn currency-of [{currency &amp;#39;currency}] currency) ;if want to destructing multi key,use :keys, in this case,parameter name(currency amount)  ;must same as arguments&amp;#39;s keys(:currency :amount),can not use string as key (defn currency-of [{:keys [currency amount]}] (* currency amount)) (currency-of {:currency &amp;#34;RMB&amp;#34; :amount 100000}) ;ok (currency-of {&amp;#34;currency&amp;#34; &amp;#34;RMB&amp;#34; &amp;#34;amount&amp;#34; 100000}) ;currency will be nil,you will need use :strs or syms (defn currency-strs [{:strs [currency amount]}] currency) (currency-strs {&amp;#34;currency&amp;#34; &amp;#34;RMB&amp;#34; &amp;#34;amount&amp;#34; 100000}) ;ok (defn currency-syms [{:syms [currency amount]}] currency) (currency-syms {&amp;#39;currency &amp;#34;CNY&amp;#34; &amp;#39;amount 100000}) ;ok ;use :or to give a default value for parameter (defn currency-or [{:keys [currency amount] :or {currency &amp;#34;USD&amp;#34;}}] currency) (currency-or {:amount 100000}) ;=&amp;gt; &amp;#34;USD&amp;#34; ;use &amp;amp; for Variadic Functions parameters (defn log [message &amp;amp; args] (println &amp;#34;args: &amp;#34; args)) ;named params , achieved by Variadic Functions destructing (defn job-info [&amp;amp; {:keys [name job income] :or {job &amp;#34;unemployed&amp;#34; income &amp;#34;$0.00&amp;#34;}}] (if name [name job income] (println &amp;#34;No name specified&amp;#34;))) ;cation! arguments to job-info is not a map (job-info :name &amp;#34;Robert&amp;#34; :job &amp;#34;Engineer&amp;#34;) ;[&amp;#34;Robert&amp;#34; &amp;#34;Engineer&amp;#34; &amp;#34;$0.00&amp;#34;] ;Without the use of a variadic argument list,  ;you would have to call the function with a single map argument such as (job-info {:name &amp;#34;Robert&amp;#34; :job &amp;#34;Engineer&amp;#34;}) ;destructuring example ;https://gist.github.com/john2x/e1dca953548bfdfb9844 (def my-vec [1 2 3]) (let [[a b c d] my-vec] (println a b c d)) ;1 2 3 nil (let [[a b &amp;amp; the-rest] my-vec] (println &amp;#34;a=&amp;#34; a &amp;#34;b=&amp;#34; b &amp;#34;the-rest=&amp;#34; the-rest)) ;a= 1 b= 2 the-rest= (3) (let [[:as all] my-vec] (println all)) ;[1 2 3] (let [[a :as all] my-vec] (println a all)) ;1 [1 2 3] (let [[a b &amp;amp; the-rest :as all] my-vec] (println a b the-rest all)) ;1 2 (3) [1 2 3] ;note: &amp;amp; the-rest convert vector to list, ;but :as preserves them (as a list, or as a vector) (def my-vec [&amp;#34;first&amp;#34; &amp;#34;second&amp;#34;]) (let [{a 0 b 1} my-vec] (println a b)) ;=&amp;gt; &amp;#34;first second&amp;#34; ;optional arguments to functions (defn foo [a b &amp;amp; more-args] (println a b more-args)) (foo :a :b) ;; =&amp;gt; :a :b nil (foo :a :b :x) ;; =&amp;gt; :a :b (:x) (foo :a :b :x :y :z) ;; =&amp;gt; :a :b (:x :y :z) ;map destructuring (def my-hashmap {:a &amp;#34;A&amp;#34; :b &amp;#34;B&amp;#34; :c &amp;#34;C&amp;#34; :d &amp;#34;D&amp;#34;}) (def my-nested-hashmap {:a &amp;#34;A&amp;#34; :b &amp;#34;B&amp;#34; :c &amp;#34;C&amp;#34; :d &amp;#34;D&amp;#34; :q {:x &amp;#34;X&amp;#34; :y &amp;#34;Y&amp;#34; :z &amp;#34;Z&amp;#34;}}) (let [{a :a d :d} my-hashmap] (println a d)) ;; =&amp;gt; A D (let [{a :a, b :b, {x :x, y :y} :q} my-nested-hashmap] (println a b x y)) ;; =&amp;gt; A B X Y (let [{a :a, b :b, not-found :not-found, :or {not-found &amp;#34;:)&amp;#34;}, :as all} my-hashmap] (println a b not-found all)) ;; =&amp;gt; A B :) {:a A :b B :c C :d D} ;!!! There is no &amp;amp; rest for maps. ;everything but false and nil evaluates to true in Clojure. ;:as bind entire map to param ;See https://github.com/ring-clojure/ring/wiki/File-Uploads for explanation (defn file-handler ;表示入参是一个map,里面有:params这个key,将:params ;[{{{tempfile :tempfile filename :filename} &amp;#34;file&amp;#34;} :params :as request}] [{{{tempfile :tempfile filename :filename} &amp;#34;file&amp;#34;} :params :as request}] (println request) (let [n (num-lines tempfile)] (response (str &amp;#34;File &amp;#34; filename &amp;#34; has &amp;#34; n &amp;#34; lines &amp;#34;)))) ;a simple example (defn first-first [[[i _] _]] i) (first-first [[1 2] [3 4]]) ;return 1 ;(defn name doc-string? attr-map? [params*] prepost-map? body) ;(defn name doc-string? attr-map? ([params*] prepost-map? body) &#43; attr-map?) ;function can have params type hint (defn round &amp;#34;^double here is type hint&amp;#34; [^double d ^long precision] (let [factor (Math/pow 10 precision)] (/ (Math/floor (* d factor)) factor))) ;不定长参数 ;重载函数 (defn bar ([a b] (bar a b 100)) ([a b c] (* a b c))) (bar 5 6) (bar 5 6 3) (defn keyworded-map [&amp;amp; {:keys [function sequence]}] (map function sequence)) (keyworded-map :sequence [1 2 3] :function #(&#43; % 2)) ;trampoline ;trampoline ;namespace ;create-ns create a namespace (create-ns &amp;#39;zhi.moe.clj) ;in-ns move to a namespace ;require loads a namespace and ;refer refers the namespace. ;To do these at once, you can use use (require &amp;#39;clojure.by.example) (clojure.by.example/favorite-language) (use &amp;#39;clojure.by.example) ;you can rename namespace (require &amp;#39;[clojure.by.example :as temp-ns]) ;ns macro creates a new namespace and gives you an opportunity to load other namespaces at the creation time ;import java class (import java.util.Date) (println (str (new Date))) ;Wed Jul 24 22:55:24 CST 2019 ;boolean ;In Clojure, everything except false and nil are true. (if 1 (println &amp;#34;it is true&amp;#34;) (println &amp;#34;will never print&amp;#34;)) ;if (if true (println &amp;#34;executed when true&amp;#34;) (println &amp;#34;executed when false&amp;#34;)) ;use do to execute multi expressions (if true (do (println &amp;#34;one&amp;#34;) (println &amp;#34;two&amp;#34;))) ;if-let: (defn positive-number [numbers] (if-let [pos-nums (not-empty (filter pos? numbers))] pos-nums &amp;#34;no positive numbers&amp;#34;)) ;when when-let case cond condp ; (defn cond-test [n] (cond (= n 1) &amp;#34;n is 1&amp;#34; (and (&amp;gt; n 3) (&amp;lt; n 10)) &amp;#34;n is over 3 and under 10&amp;#34; :else &amp;#34;n is other&amp;#34;)) (cond-test 1000) ;string (let [first &amp;#34;Hirokuni&amp;#34; last &amp;#34;Kim&amp;#34;] (str &amp;#34;My name is &amp;#34; first &amp;#34; &amp;#34; last)) ;format (format &amp;#34;My name is %s %s&amp;#34; &amp;#34;Hirokuni&amp;#34; &amp;#34;Kim&amp;#34;) ;power function (defn power [x n] (reduce * (repeat n x))) ;bigint,N is a literal for bigint (&#43; 9223372036854775807 10N) ;list conj nth count &amp;#39;(1 2 3) ;vector conj nth count .indexOf [1 2 3] (.indexOf [1 2 3] 4) (count [1 2]) ;set conj nth count disj sort contains? subset? superset? #{1 2 3} ;map assoc merge keys vals (let [os {:Apple &amp;#34;Mac&amp;#34; :Microsoft &amp;#34;Windows&amp;#34;}] (get os :Apple)) (assoc {:Apple &amp;#34;Mac&amp;#34; :Microsoft &amp;#34;Windows&amp;#34;} :Commodore &amp;#34;Amiga&amp;#34;) ;Sequences are data types that abstract all more concrete data types with unified functions.  ;These functions are called the Seq library in Clojure. ;seq first rest cons concat map reduce into ;To add an element to the head of sequence, use cons. (cons 4 [1 2 3]) (into [] `(1 2 3)) (reverse [1 2 3]) ;get a sequence of infinite integers with iterate. Be careful,  ;though. Running this example will freeze your terminal since the evaluation of this expression never returns. (doc iterate) (doc range) (repeatedly 5 (fn [] (println &amp;#34;hi!&amp;#34;))) ;for each (doseq [animal [&amp;#34;cat&amp;#34; &amp;#34;dog&amp;#34; &amp;#34;horse&amp;#34;]] (println animal)) (take 5 (range 0 100)) (take-while neg? [-3 -2 -1 0 1 2 3]) ;drop will remove the first n elements (drop 5 (range 0 10)) (drop-while neg? [-3 -2 -1 0 1 2 3]) ;(0 1 2 3) (remove pos? [-1 -2 3 4]) ;(-1 -2) (filter pos? [-1 2 3]) (partition-by #(&amp;lt; 3 %) [1 2 3 4 5 6]) (group-by #(&amp;lt; 3 %) [1 2 3 4 5 6 1 2 3]) (println (take 5 (iterate inc 0))) ;for compression (for [x &amp;#39;(1 2 3)] (&#43; 10 x)) (doc for) ;双重for 循环 (for [x (range 10) y (range 20) :while (&amp;lt; y x)] [x y]) ;&amp;lt;==&amp;gt; {x | x &amp;gt;0} (for [x &amp;#39;(-1 1 2) :when (&amp;gt; x 0)] x) (for [x [0 1 2 3 4 5] :let [y (* x 3)] :when (even? y)] y) ;meta data for function parameters (defn round [^double d ^long precision] (let [factor (Math/pow 10 precision)] (/ (Math/floor (* d factor)) factor))) ;# is Dispatch character that tells the Clojure reader how to interpret the next character using a read table ;set #{1 2 3} ;discard {:a 1, #_#_:b 2, :c 3} ;regular expression (re-matches #&amp;#34;^test$&amp;#34; &amp;#34;test&amp;#34;) ;anonymous function #(println %) ;var quote (read-string &amp;#34;#&amp;#39;foo&amp;#34;) ;symbolic values (/ 1.0 0.0) ;##Inf ;tagged literals (type #inst &amp;#34;2014-05-19T19:12:37.925-00:00&amp;#34;) ;java.util.Date ;meta (meta #&amp;#39;fn-name) ;reader conditionals  #?(:clj (Clojure expression) :cljs (ClojureScript expression) :cljr (Clojure CLR expression) :default (fallthrough expression)) ;#?@ splicing reader conditional (defn build-list [] (list #?@(:clj [5 6 7 8] :cljs [1 2 3 4]))) ;return [5 6 7 8] when run on clojure ;#= allows the reader to evaluate an arbitrary form during read time (read-string &amp;#34;#=(&#43; 3 4)&amp;#34;) ;7 ;Recursion ;simple recursion (defn fibo &amp;#34;this is recursion function&amp;#34; [n] (if (or (= n 0) (= n 1)) n (&#43; (fibo (- n 1)) (fibo (- n 2))))) ;do not do this!!! take a long time to finish (fibo 1000) ;use recur (defn fibo-recur [iteration] (let [fibo (fn [one two n] (if (= iteration n) one (recur two (&#43; one two) (inc n))))] ;recur re-binds it&amp;#39;s arguments to new values and call the function with the new values ;fibo is an inner function (fibo 0N 1N 0))) (fibo-recur 1000) ;it is really fast ;notes ;with simple recursion, each recursive call creates a stack frame which is  ;a data to store the information of the called function on memory. ;Doing deep recursion requires large memory for stack frames, but since it cannot,  ;we get StackOverflowError ;尾递归 ;A function is tail recursive when the recursion is happening at the end of it&amp;#39;s definition ;In other words, a tail recursive function must return itself as it&amp;#39;s returned value. ;When you use recur, it makes sure you are doing tail recursion (doc loop) ;loop/recur is merely a friendly way to write recursion code. ;All imperative loops can be converted to recursions and all recursions can be converted to loops, ;so Clojure chose recursions. ;Although you can write code that looks like an imperative loop with loop/recur, ;Clojure is doing recursion under the hood. ; (defmacro unless [test then] &amp;#34;Evaluates then when test evaluates to be falsey&amp;#34; (list &amp;#39;if (list &amp;#39;not test) then)) (macroexpand &amp;#39;(unless false (println &amp;#34;hi&amp;#34;))) ;&amp;#39; quoting ;` syntax-quoting returns the fully qualified namespace. ;Using fully qualified namespace is very important in order to avoid name conflicts when defining macro. ;~ unquote `(&#43; ~(list 1 2 3)) ;(clojure.core/&#43; (1 2 3)) `(&#43; ~@(list 1 2 3)) ;(clojure.core/&#43; 1 2 3) ;The ~@ unquote splice works just like ~ unquote, ;except it expands a sequence and splice the contents of  ;the sequence into the enclosing syntax-quoted data structure ;thread first macro (-&amp;gt; [] (conj 1) (conj 2) (conj 3)) ;[1 2 3] (first (.split (.replace (.toUpperCase &amp;#34;a b c d&amp;#34;) &amp;#34;A&amp;#34; &amp;#34;X&amp;#34;) &amp;#34; &amp;#34;)) ;&amp;#34;X&amp;#34; ;;Perhaps easier to read: ;-&amp;gt; 后面是初始参数,第2行开始每一行是一个函数调用, ;且上一行的返回值会作为这一行第一个参数(这就是thread first)的first含义 ;这里的thread是管道的意思,而不是并发编程的线程 ;如果省略(),那么野生符号(bare symbol)和keyword都会当作一个函数调用, ;例如,这里的.toUpperCase是bare symbol,等效于(.toUpperCase ,,,) ;clojure中 逗号等于空白符,所以上面用,,,表示将会插入的参数(即&amp;#34;a b c d&amp;#34;) (-&amp;gt; &amp;#34;a b c d&amp;#34; .toUpperCase (.replace &amp;#34;A&amp;#34; &amp;#34;X&amp;#34;) (.split &amp;#34; &amp;#34;) first) ;same as follow, ,,, is equals whitespace (-&amp;gt; &amp;#34;a b c d&amp;#34; (.toUpperCase,,,) (.replace &amp;#34;A&amp;#34; &amp;#34;X&amp;#34;) (.split &amp;#34; &amp;#34;) first) ;suppose a function (defn calculate [] (reduce &#43; (map #(* % %) (filter odd? (range 10))))) ;same as ;上一行的结果作为最后一个参数插入,这叫thread last (defn calculate* [] (-&amp;gt;&amp;gt; (range 10) (filter odd?,,,) (map #(* % %),,,) (reduce &#43;,,,))) ;如果想要指定每次插入的位置那么需要用 as-&amp;gt; ;v是每一行的返回值的名称,这样你可以在下一行任意参数位置指定 (as-&amp;gt; [:foo :bar] v (map name v) (first v) (.substring v 1)) ; ;destructing ({:keys [firstname lastname] :as person} {:firstname &amp;#34;John&amp;#34; :lastname &amp;#34;Smith&amp;#34;}) ;future and deref (let [future-val (future (inc 1))] (println (deref future-val))) ;deref == @ (let [future-val (future (inc 1))] (println @future-val)) (def my-future (future (Thread/sleep 5000))) (repeatedly 6 (fn [] (println (realized? my-future)) (Thread/sleep 1000))) (doc future) ;promise (def my-promise (promise)) ;you define a promise (def listen-and-callback (fn [] (println &amp;#34;Start listening...&amp;#34;) (future (println &amp;#34;Callback fired: &amp;#34; @my-promise)))) (defn do-time-consuming-job [] (Thread/sleep 5000) (deliver my-promise &amp;#34;delivered value&amp;#34;)) (listen-and-callback) (do-time-consuming-job) ;atom is like mutable var in other languages but atom is thread safe ;ref dosync ref-set alter (def my-ref (ref 0)) (dosync (alter my-ref (fn [current_ref] (inc current_ref)))) (print @my-ref) (def user (ref {})) (dosync (alter user merge {:name &amp;#34;Kim&amp;#34;}) (throw (Exception. &amp;#34;something wrong happens!&amp;#34;)) (alter user merge {:age 32})) (def user-record (atom {})) (do (swap! user-record merge {:name &amp;#34;Kim&amp;#34;}) (throw (Exception. &amp;#34;something wrong happens!&amp;#34;)) (swap! user-record merge {:age 32})) ;Java (new java.util.Date &amp;#34;2016/2/19&amp;#34;) (java.util.Date.) (java.util.Date. &amp;#34;2016/2/19&amp;#34;) (Math/pow 2 3) ;static method (def rnd (new java.util.Random)) (. rnd nextInt 10) (let [date1 (new java.util.Date) date2 (new java.util.Date)] (.equals date1 date2)) ;(.instanceMember instance args*) ;(.instanceMember Classname args*) ;(.-instanceField instance) ;(Classname/staticMethod args*) ;Classname/staticField ;;; (defn geohash [lat lng] (println &amp;#34;geohash:&amp;#34; lat lng) ;;this function take two separate values as params. ;;and it return a geohash for that position ) (let [{:strs [lat lng] :as coord} {&amp;#34;lat&amp;#34; 51.503331, &amp;#34;lng&amp;#34; -0.119500}] (println &amp;#34;calculating geohash for coordinates: &amp;#34; coord) (geohash lat lng)) ;assoc-in associate使加入 </content>
    </entry>
    
     <entry>
        <title>Elasticsearch Query DSL</title>
        <url>https://zhimoe.github.io/post/elasticsearch-query-dsl/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>elasticsearch</tag>
        </tags>
        <content type="html">  diffs in es 2.x and es 5.x query dsl aggr query  diffs in es 2.x and es 5.x 没有string类型，改为text和keyword 2个类型了。text字段可以指定fields来不分词。如下： city字段被ingest为city和city.raw2个字段。 { &amp;#34;mappings&amp;#34;: { &amp;#34;_doc&amp;#34;: { &amp;#34;properties&amp;#34;: { &amp;#34;city&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;fields&amp;#34;: { &amp;#34;raw&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;keyword&amp;#34;, &amp;#34;ignore_above&amp;#34;: 256 } } } } } } } default double -&amp;gt; float geo_point //2.x &amp;#34;location&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;geo_point&amp;#34;, &amp;#34;lat_lon&amp;#34;: true, &amp;#34;geohash&amp;#34;: true, &amp;#34;geohash_prefix&amp;#34;: true, &amp;#34;geohash_precision&amp;#34;: &amp;#34;1m&amp;#34; } //5.x &amp;#34;location&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;geo_point&amp;#34; } query dsl basic query 就像砌房子的砖头，基本查询就是ES查询的砖头。基本查询是组合查询(bool查询等)的单元。基本查询有：
//basic query element match, multi_match, common, geoshape, ids, match_all, query_string, simple_query_string, range, prefix, regexp, span_term, term, terms, wildcard 其中common, ids, prefix, span_term, term, terms, wildcard 是不分析(即不能用于text字段)搜索，match,	multi_match,	query_string,	simple_query_string是全文检索，几乎可以确保可以返回结果。而prefix,regexp,wildcard是模式检索。这里分别给一些例子:
multi_match  multi_match 查询为能在多个字段上反复执行相同查询提供了一种便捷方式 既然时多字段查询,则有3中场景:best_fields 、 most_fields 和 cross_fields （最佳字段、多数字段、跨字段）
 { &amp;#34;multi_match&amp;#34;: { &amp;#34;query&amp;#34;: &amp;#34;Quick brown fox&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;best_fields&amp;#34;, //默认的,可不填 &amp;#34;fields&amp;#34;: [ &amp;#34;title&amp;#34;, &amp;#34;body&amp;#34; ], &amp;#34;tie_breaker&amp;#34;: 0.3, &amp;#34;minimum_should_match&amp;#34;: &amp;#34;30%&amp;#34; } } 等价于下面的形式:
{ &amp;#34;dis_max&amp;#34;: { &amp;#34;queries&amp;#34;: [ { &amp;#34;match&amp;#34;: { &amp;#34;title&amp;#34;: { &amp;#34;query&amp;#34;: &amp;#34;Quick brown fox&amp;#34;, &amp;#34;minimum_should_match&amp;#34;: &amp;#34;30%&amp;#34; } } }, { &amp;#34;match&amp;#34;: { &amp;#34;body&amp;#34;: { &amp;#34;query&amp;#34;: &amp;#34;Quick brown fox&amp;#34;, &amp;#34;minimum_should_match&amp;#34;: &amp;#34;30%&amp;#34; } } }, ], &amp;#34;tie_breaker&amp;#34;: 0.3 } } 还可以使用通配符指定字段,以及给某些字段添加权重.
{ &amp;#34;multi_match&amp;#34;: { &amp;#34;query&amp;#34;: &amp;#34;Quick brown fox&amp;#34;, &amp;#34;fields&amp;#34;: [ &amp;#34;*_title&amp;#34;, &amp;#34;chapter_title^2&amp;#34; ] } } query_string 和 simple_query_string 非常灵活的一个查询方式:
GET /_search { &amp;#34;query&amp;#34;: { &amp;#34;query_string&amp;#34; : { &amp;#34;default_field&amp;#34; : &amp;#34;content&amp;#34;, &amp;#34;query&amp;#34; : &amp;#34;(new york city) OR (big apple)&amp;#34; } } } 上面的query字段语法可以参考: query_string_syntax simple_query_string不会抛出异常,直接忽略无效语句.
term terms //不要用于text字段 GET /_search { &amp;#34;query&amp;#34;: { &amp;#34;term&amp;#34;: { &amp;#34;user&amp;#34;: { &amp;#34;value&amp;#34;: &amp;#34;Kimchy&amp;#34;, &amp;#34;boost&amp;#34;: 1.0 } } } } //terms和term一样,不过可以指定多个值, &amp;#34;user&amp;#34; : [&amp;#34;kimchy&amp;#34;, &amp;#34;elasticsearch&amp;#34;]// 返回user为kimchy或elasticsearch的文档 prefix //user字段(不分词字段)中以&amp;#34;ki&amp;#34;开头的文档 { &amp;#34;query&amp;#34;: { &amp;#34;prefix&amp;#34; : { &amp;#34;user&amp;#34; : &amp;#34;ki&amp;#34; } } } 组合查询 bool, boosting, constant_score, dis_max, function_score, has_child, has_parent, indices, nested, span_first, span_multi,span_first, span_multi, span_near, span_not, span_or, span_term, top_children, filtered(废弃,使用bool包含一个must和一个filter替代) bool bool查询的外框架结构为：  { &amp;#34;query&amp;#34;: { &amp;#34;bool&amp;#34;: { &amp;#34;must&amp;#34;: [ {} ], &amp;#34;should&amp;#34;: [ {} ], &amp;#34;must_not&amp;#34;: [ {} ], &amp;#34;filter&amp;#34;: [ {} ] } } } //some other parameter for bool: //boost,minimum_should_match,disable_coord </content>
    </entry>
    
     <entry>
        <title>Useful Scala Code Snippets</title>
        <url>https://zhimoe.github.io/post/useful-scala-code-snippets/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>scala</tag>
        </tags>
        <content type="html"> merge two map and sum its values 多个map合并,key相同时则value相加
val map1 = Map(1 -&amp;gt; 1, 2 -&amp;gt; 2) val map2 = Map(1 -&amp;gt; 11, 3 -&amp;gt; 3) val map3 = Map(1 -&amp;gt; 111, 3 -&amp;gt; 3) val mapList = List(map1, map2, map3) val merged = mapList.reduce((m1, m2) =&amp;gt; m1 &#43;&#43; m2.map { case (k, v) =&amp;gt; k -&amp;gt; (v &#43; m1.getOrElse(k, 0)) } ) 文件读 // &amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;可以避免\\符号 val file = &amp;#34;&amp;#34;&amp;#34;d:\data\file.txt&amp;#34;&amp;#34;&amp;#34; for (line &amp;lt;- Source.fromFile(file, encoding).getLines()) { print(line) } 文件写 //资源管理  def using[A &amp;lt;: {def close() : Unit}, R](resource: A)(fun: A =&amp;gt; R): R = { import scala.language.reflectiveCalls try { fun(resource) } finally { resource.close() } } using(new OutputStreamWriter(new FileOutputStream(outputFile), StandardCharsets.UTF_8)) { writer =&amp;gt; writer.write(s&amp;#34;&amp;#34;&amp;#34;${line}\n&amp;#34;&amp;#34;&amp;#34;) } 统计词频 val nanoUnit = 1000000 //分词并统计词频  def main(args: Array[String]): Unit = { val path = &amp;#34;&amp;#34;&amp;#34;D:\code\ideaProjects\scala-notes\data\src\out&amp;#34;&amp;#34;&amp;#34; val files: List[File] = new File(path).listFiles.filter(_.isFile).toList val start = System.nanoTime() val wfList = ListBuffer[mutable.Map[String, Long]]() val futures = for (file &amp;lt;- files) yield Future { countWrodsInFile(file, &amp;#34;UTF-8&amp;#34;) } for (f &amp;lt;- futures) { val words: mutable.Map[String, Long] = Await.result(f, Duration.Inf) wfList &#43;= words } //merge the word frequency map  val finalWf = wfList.reduce((m1, m2) =&amp;gt; m1 &#43;&#43; m2.map { case (k, v) =&amp;gt; k -&amp;gt; (v &#43; m1.getOrElse(k, 0L)) } ) val end = System.nanoTime() println(s&amp;#34;container size=${finalWf.size}&amp;#34;) // sort map  val wordsFreq = finalWf.toList.sortWith(_._2 &amp;gt; _._2) write2file(wordsFreq, Paths.get(path, &amp;#34;final.txt&amp;#34;).toFile) println(s&amp;#34;total used time = ${(end - start) / nanoUnit}ms&amp;#34;) println(s&amp;#34;cups = ${Runtime.getRuntime.availableProcessors()}&amp;#34;) } def countWrodsInFile(file: File, encoding: String): mutable.Map[String, Long] = { val wf = mutable.Map[String, Long]().withDefaultValue(0) for (line &amp;lt;- Source.fromFile(file, encoding).getLines()) { val l = line.trim wf.update(l, wf(l) &#43; 1) } println(s&amp;#34;${file.getName}has words:${wf.size}&amp;#34;) wf } def write2file(wf: Seq[(String, Long)], out: File): Unit = { using(new OutputStreamWriter(new FileOutputStream(out), StandardCharsets.UTF_8)) { writer =&amp;gt; for (it &amp;lt;- wf) { writer.write(s&amp;#34;&amp;#34;&amp;#34;${it._1}${it._2}\n&amp;#34;&amp;#34;&amp;#34;) } } } </content>
    </entry>
    
     <entry>
        <title>Scala Future</title>
        <url>https://zhimoe.github.io/post/scala-future/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>scala</tag>
        </tags>
        <content type="html"> some notes on scala future, includes:
 future executor context await future result callback recover  future import java.time._ import scala.concurrent._ import ExecutionContext.Implicits.global Future { Thread.sleep(10000) println(s&amp;#34;This is the future at ${LocalTime.now}&amp;#34;) } println(s&amp;#34;This is the present at ${LocalTime.now}&amp;#34;) executor context future need a new thread to execute it task. import ExecutionContext.Implicits.global is a implicit threadpool.
await for future result // for 10.seconds conversion import scala.concurrent.duration._ val f = Future { Thread.sleep(10000); 42 } val result = Await.result(f, Duration.Inf) // if f throw exception, it will rethrow to Await.result // use ready() solve this val f = Future { ... } Await.ready(f, 10.seconds) val Some(t) = f.value // The f.value method returns an Option[Try[T]], // which is None when the future is not completed // and Some(t) when it is is  // t is Try type instance // A Try[T] instance is either a Success(v), where v is a value of type T or a Failure(ex) val t = Some(t).get t match { case Success(v) =&amp;gt; println(s&amp;#34;The answer is $v&amp;#34;) case Failure(ex) =&amp;gt; println(ex.getMessage) } // or if (t.isSuccess) println(s&amp;#34;The answer is ${t.get}&amp;#34;) callback val f = Future { Thread.sleep(10000) if (random() &amp;lt; 0.5) throw new Exception 42 } f.onComplete { case Success(v) =&amp;gt; println(s&amp;#34;The answer is $v&amp;#34;) case Failure(ex) =&amp;gt; println(ex.getMessage) } callback hell val future1 = Future { getData1() } val future2 = Future { getData2() } future1 onComplete { case Success(n1) =&amp;gt; future2 onComplete { case Success(n2) =&amp;gt; { val n = n1 &#43; n2 println(s&amp;#34;Result: $n&amp;#34;) } case Failure(ex) =&amp;gt; ... } case Failure(ex) =&amp;gt; ... } // improve val future1 = Future { getData1() } val combined = future1.map(n1 =&amp;gt; n1 &#43; getData2()) // val future1 = Future { getData1() } val future2 = Future { getData2() } val combined = future1.map(n1 =&amp;gt; future2.map(n2 =&amp;gt; n1 &#43; n2)) // use for-yield  for ( n1 &amp;lt;- future1 n2 &amp;lt;- future2 ) yield n1&#43;n2 </content>
    </entry>
    
     <entry>
        <title>Spring Boot Notes</title>
        <url>https://zhimoe.github.io/post/spring-boot-notes/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>spring</tag>
        </tags>
        <content type="html"> 一些容易忘记的spring boot知识要点.
 注意,.yaml和.yml文件没任何区别.
 配置 SpringBootApplication注解 @SpringBootApplication &amp;lt;=等价=&amp;gt; @Configuration @ComponentScan @EnableAutoConfiguration 自动配置 spring的自动配置依赖以下注解:
配置文件 任何时候硬编码的配置总是不好的,spring支持从很多环境中读取配置: 配置文件,yaml文件,环境变量,命令参数. 配置可以在@Value注解中使用,也可Environment访问,或者通过@ConfigurationProperties将配置属性绑定到特定的bean(例子).
spring boot的配置属性读取顺序为:
 Devtools global settings properties on your home directory (~/.spring-boot-devtools.properties when devtools is active). @TestPropertySource annotations on your tests. @SpringBootTest#properties annotation attribute on your tests. Command line arguments. Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or system property) ServletConfig init parameters. ServletContext init parameters. JNDI attributes from java:comp/env. Java System properties (System.getProperties()). OS environment variables. A RandomValuePropertySource that only has properties in random.*. Profile-specific application properties outside of your packaged jar (application-{profile}.properties and YAML variants) Profile-specific application properties packaged inside your jar (application-{profile}.properties and YAML variants) Application properties outside of your packaged jar (application.properties and YAML variants). Application properties packaged inside your jar (application.properties and YAML variants). @PropertySource annotations on your @Configuration classes. Default properties (specified using SpringApplication.setDefaultProperties).  因为spring-boot主要使用的application.properties/yaml文件,所以后面主要关注这个文件.
此外,spring代码中使用了大约近千个(300多类)默认值,这些默认值都是可以覆盖的.只需你在你的propeties/yaml文件中用相同的key即可. 所有的参考值见: example application.properties
application.properties SpringApplication loads properties from application.properties files in the following locations and adds them to the Spring Environment:
 A /config subdirectory of the current directory The current directory A classpath /config package The classpath root  application.yml yaml是json的超集,相比properties文件,有着简洁灵活的优势 例如可以设置数组,设置group概念等. yaml文件可以配置数组:
# 数组功能,等价 # my.servers[0]=dev.bar.com # my.servers[1]=foo.bar.com my: servers: - dev.bar.com - foo.bar.com #上面的配置可以通过注解绑定到以下bean中,非常强大. @ConfigurationProperties(prefix=&amp;#34;my&amp;#34;) public class Config { private List&amp;lt;String&amp;gt; servers = new ArrayList&amp;lt;String&amp;gt;(); } # 在一个yaml文件设置不同的profile配置,properties文件只能通过拆分文件`application-profiles.properties`实现. server: address: 192.168.1.100 --- spring: profiles: DEV server: address: 127.0.0.1 --- spring: profiles: PRD server: address: 192.168.1.120 yaml缺点:  YAML files cannot be loaded by using the @PropertySource annotation. So, in the case that you need to load values that way, you need to use a properties file.
 当然使用properties文件缺点也明显,不能分组(yaml的&amp;mdash;功能);同时中文显示容易unicode码.
读取配置文件 除了application.properties文件,其他的配置属性文件需要我们自己加载读取.注意,下面的PropertySource无法加载yaml文件.
使用PropertySource cron=0/3 * * * * ? @Configuration @PropertySource(&amp;#34;classpath:foo.properties&amp;#34;) public class PropertiesWithJavaConfig { @Value(${cron}) private String cron; } //or @PropertySource({ &amp;#34;classpath:persistence-${envTarget:mysql}.properties&amp;#34; }) //multi files //java 8&#43; @PropertySource(&amp;#34;classpath:foo.properties&amp;#34;) @PropertySource(&amp;#34;classpath:bar.properties&amp;#34;) public class PropertiesWithJavaConfig { //... } //java 6&#43; @PropertySources({ @PropertySource(&amp;#34;classpath:foo.properties&amp;#34;), @PropertySource(&amp;#34;classpath:bar.properties&amp;#34;) }) public class PropertiesWithJavaConfig { //... } //通过xml加载 //register file in xml &amp;lt;context:property-placeholder location=&amp;#34;classpath:foo.properties&amp;#34; /&amp;gt; //foo.properties in src/main/resources &amp;lt;context:property-placeholder location=&amp;#34;classpath:foo.properties, classpath:bar.properties&amp;#34;/&amp;gt; 如何加载自定义的yaml文件 上面提到spring会默认加载application.yml文件的配置.但是其他文件名的yml文件无法通过@PropertySource加载.可以有以下方法.
 使用xml,然后在Java Config类加载xml. 个人不推荐使用xml文件,脱离spring boot的初衷了. 使用yml加载器: The YamlPropertiesFactoryBean will load YAML as Properties and the YamlMapFactoryBean will load YAML as a Map. 避免使用,尽量将你的所以配置放在application.yml里面,因为yml可以有分组功能. 将你文件命名为application-redis.yml,然后在application.yml使用spring.profiles.include: &#39;redis&#39; 加载.  使用yaml文件的加载可以通过ConfigurationProperties绑定到配置bean中.还要添加2个注解注册到spring:
@Configuration @EnableConfigurationProperties @ConfigurationProperties public class YAMLConfig { private String name; private String environment; private List&amp;lt;String&amp;gt; servers = new ArrayList&amp;lt;&amp;gt;(); // standard getters and setters } spring: profiles: prod name: prod-YAML environment: production servers: - www.abc.com - www.xyz.com profiles 很多配置希望基于环境,spring boot支持application-profile.properties格式的配置,profile可以是DEV,ST,UAT,PRD,TEST等. 例如某个class希望只有在PRD环境才有:
@Profile(&amp;#34;PRD&amp;#34;) @Configuration @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter {} 然后在application.yml/properties设置profile:
spring: profiles: active: PRD properties文件设置profile application.properties文件只能使用application-DEV.properties,application-ST.properties设置profile.
yml文件设置profile application.yml既可以像properties文件使用application-DEV.yml来设置profile,也可以使用---分组.如下示例,logging.level=INFO在所有profile中生效,而在生产环境中增加日志文件设置,DEV环境则使用DEBUG级别日志.
# application.yml logging: level: root: INFO --- spring: profiles: DEV logging: level: root: DEBUG --- spring: profiles: PRD logging: path: /tmp/ file: BookWorm.log level: root: WARN 激活profiles 在application.yml/properties文件中激活某个profile:
spring: profiles: active: DEV 如果你设置了SPRING_PROFILES_ACTIVE环境变量,那么会覆盖上面的profile设置.当然你也可以使用自定义环境变量和默认值:
spring: profiles: active: ${ENV_TYP:PRD} # 读取ENV_TYP环境变量的值作为激活profile,如果没用这个环境变量,那么设置为PRD. 测试 </content>
    </entry>
    
     <entry>
        <title>Pattern Matching Anonymous Function</title>
        <url>https://zhimoe.github.io/post/pattern-matching-anonymous-function/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>scala</tag>
        </tags>
        <content type="html"> Scala中很多使用if的地方都可以用match case来替换.常见的就是下面的这种写法:
val res = msg match { case it if it.contains(&amp;#34;H&amp;#34;) =&amp;gt; &amp;#34;Hello&amp;#34; case _ =&amp;gt; &amp;#34;Other&amp;#34; } //更常见的用法是去匹配参数的模式: case class Player(name: String, score: Int) def message(player: Player) = player match { case Player(_, score) if score &amp;gt; 100000 =&amp;gt; &amp;#34;Get a job, dude!&amp;#34; case Player(name, _) =&amp;gt; &amp;#34;Hey, $name, nice to see you again!&amp;#34; } def printMessage(player: Player) = println(message(player)) 其实case还有一种在匿名函数中的用法,看如下的代码,在词频统计或者过滤中很常见:
val wordFrequencies = (&amp;#34;habitual&amp;#34;, 6) :: (&amp;#34;and&amp;#34;, 56) :: (&amp;#34;consuetudinary&amp;#34;, 2) :: Nil def wordsWithoutOutliers(wordFrequencies: Seq[(String, Int)]): Seq[String] = wordFrequencies.filter(wf =&amp;gt; wf._2 &amp;gt; 3 &amp;amp;&amp;amp; wf._2 &amp;lt; 25).map(_._1) 上面的代码有比较大的问题是访问tuple元素的方式比较难看,Scala提供了一种pattern matching anonymous function解决这个问题:
def wordsWithoutOutliers(wordFrequencies: Seq[(String, Int)]): Seq[String] = wordFrequencies.filter { case (_, f) =&amp;gt; f &amp;gt; 3 &amp;amp;&amp;amp; f &amp;lt; 25 } map { case (w, _) =&amp;gt; w } 注意到省略了最早版本的 wf =&amp;gt;,IDEA其实会提示你省略这个冗余部分. 另一个问题就是上面的操作中我们先过滤想要的序列,然后对序列进行了map映射操作.Scala 集合的 API 有一个叫做 collect 的方法，对于 Seq[A] ，它有如下方法签名：
def collect[B](pf: PartialFunction[A, B]): Seq[B] 这个方法将给定的_偏函数(partial function)_ 应用到序列的每一个元素上， 最后返回一个满足条件并处理后新的序列 ,这里偏函数做了 filter 和 map 要做的事情。 现在，我们来重构 wordsWithoutOutliers ，首先定义需要的偏函数：
val pf: PartialFunction[(String, Int), String] = { case (word, freq) if freq &amp;gt; 3 &amp;amp;&amp;amp; freq &amp;lt; 25 =&amp;gt; word } wordFrequencies.collect(pf) 我们为这个案例加入了 守卫语句，不在区间里的元素就没有定义。 以上来自Scala初学者指南 当然有中文版:Scala初学者指南-gitbook
</content>
    </entry>
    
     <entry>
        <title>Scala Type Class</title>
        <url>https://zhimoe.github.io/post/scala-type-class/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>scala</tag>
        </tags>
        <content type="html"> 关于scala type class非常好的文章
核心知识点 //scala没有专门的type class语法，而是借助trait &#43; implicit &#43; context bound来实现的， //所以很多时候识别type class比较困难。 //type class 由三部分构成 //1. type class: 即下面的Show，定义一个行为toHtml。 //2. type class instances：希望实现toHtml方法的类型实例 //3. user interface: type class中伴生对象的同名方法或者隐式转换方法。  // type class trait Show[A] { def toHtml(a: A): String } // 定义在伴生对象的好处就是implicit变量自动处于scope内 object Show { //利用伴生对象apply特点实现下面Show[A].toHtml调用方式，即隐藏implicit sh  def apply[A](implicit sh: Show[A]): Show[A] = sh //如果没有apply，那么下面的toHtml需要一个隐式参数：  //def toHtml[A](a: A)(implicit sh: Show[A]): String = sh.toHtml(a)  //或者：  //def toHtml[A: Show](a: A): String = implicitly[Show[A]].toHtml(a)  //对外接口，提供toHtml(&amp;#34;type&amp;#34;)的调用形式  def toHtml[A: Show](a: A) = Show[A].toHtml(a) //对外接口，通过隐式转换提供10 toHtml的调用形式  implicit class ShowOps[A: Show](a: A) { // 惯例使用TypeCls&#43;Ops  def toHtml = Show[A].toHtml(a) } //为了避免运行开销，可以将Ops类定义为value class：  // implicit class ShowOps[A](val a: A) extends AnyVal {  // def toHtml(implicit sh: Show[A]) = sh.toHtml(a)  // }  //上面两个对外接口都利用了伴生对象的apply方法和context bound  //type class instance int  implicit val intCanShow: Show[Int] = int =&amp;gt; s&amp;#34;&amp;lt;int&amp;gt;$int&amp;lt;/int&amp;gt;&amp;#34; //type class instance string  implicit val stringCanShow: Show[String] = str =&amp;gt; s&amp;#34;&amp;lt;string&amp;gt;$str&amp;lt;/string&amp;gt;&amp;#34; } //use type class import Show._ print(10 toHtml) print(toHtml(&amp;#34;type&amp;#34;)) 若使用import Show._ 导入全部内容，则用户无法自己实现一些 type class instance则会覆盖默认实例导致歧义。 可以将对外接口移动到单独的ops对象中：
trait Show[A] { def toHtml(a: A): String } object Show { def apply[A](implicit sh: Show[A]): Show[A] = sh object ops { def toHtml[A: Show](a: A) = Show[A].toHtml(a) implicit class ShowOps[A: Show](a: A) { // 惯例使用TypeCls&#43;Ops  def toHtml = Show[A].toHtml(a) } } implicit val intCanShow: Show[Int] = int =&amp;gt; s&amp;#34;&amp;lt;int&amp;gt;$int&amp;lt;/int&amp;gt;&amp;#34; implicit val stringCanShow: Show[String] = str =&amp;gt; s&amp;#34;&amp;lt;string&amp;gt;$str&amp;lt;/string&amp;gt;&amp;#34; } 使用：
import xxx.Show //如果需要实现自定义的type class instance则需要 import xxx.Show.ops._ 自定义 case class Person(name: String, age: Int) implicit val personOps: Show[Person] = p =&amp;gt; s&amp;#34;&amp;lt;person&amp;gt;name=${p.name},age=${p.age}&amp;lt;/person&amp;gt;&amp;#34; print(Person(&amp;#34;lee&amp;#34;, 19) toHtml)//&amp;lt;person&amp;gt;name=lee,age=19&amp;lt;/person&amp;gt;  Simulacrum Simulacrum通过宏为 type class 添加便捷语法，是否使用取决于个人判断。 若使用 Simulacrum，则可以一眼找出代码中所有的 type class，并且可省去很多样板代码。 另一方面，使用 @typeclass（Simulacrum 主要注解）则意味着需要依赖 macro paradise 编译器插件。
使用 Simulacrum 重写我们的 Show type class：
import simulacrum._ @typeclass trait Show[A] { def toHtml(a: A): String } 有了 Simulacrum，type class 定义变得非常简洁，我们在其伴生对象中添加 Show[String] 实例：
//Simulacrum 会为 Show 自动生成 ops 对象，与前面自定义的基本一致。 object Show { implicit val stringShow: Show[String] = s ⇒ s&amp;#34;String: $s&amp;#34; } </content>
    </entry>
    
     <entry>
        <title>Scala 学习笔记</title>
        <url>https://zhimoe.github.io/post/scala-notes/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag>
        </tags>
        <content type="html"> scala-notes some notes on scala, includes:
 setup with maven import == and eq case class for&amp;hellip;yield companion object and class method and function(def val) _ in scala =&amp;gt; in scala () {} in scala implicit string  setup with maven 目前用sbt的项目比较少,maven的更多. 而且sbt烧cpu. maven项目使用scala参考我的gist:scala_maven_pom.xml
学习scala可以使用scala插件的worksheet,这是一个基于脚本互动的REPL. 本文后面的代码全部在worksheet中测试.
import scala的import语句很灵活，可以在任何地方导入class内部外部，方法内部，代码块内部，这样做有一个好处，限制导入方法和对象的scope，防止污染变量。在后面学了implicit隐式转换后，就知道import scope有多重要了。
import scala.math._ // import everything in math package import java.util.{ ArrayList =&amp;gt; _, _} //第一个下划线表示隐藏ArrayList，第二个表示通配符，导入所有  //默认，scala导入: java.lang._ scala._ scala.Predef._ //推荐看一下Predef的源代码包括： //Predef中定义的方法和属性 //常用方法和类 //打印方法 println等 //一些调试和错误方法 //一个特殊的方法表示方法未实现 def ??? : Nothing = throw new NotImplementedError //Predef还有大量的隐式转换和隐式参数  == and eq scala里面==等价于java的equals方法即内容比较,并且可以正确处理null(还记得java规范里面烦人的 &amp;quot;A&amp;quot;.equals(m)规范么?). 而地址(引用)比较使用eq 方法,这个方法其实很少用到,应用代码一般无需比较2个变量的地址.
case class case class类似data class,即java的pojo bean,但是提供了更多的方法.
// 5个特性 // 1.添加companion object,apply方法,unapply方法 // 2.toString, hashCode and equals and copy methods case class Student(name: String, marks: Int) val s1 = Student(&amp;#34;Rams&amp;#34;, 550) val s2 = s1.copy() val s3 = s1.copy(marks = 590) s2 == s1 //true s3 == s1 //false  // 3. 构造函数参数自动成为成员变量,即自动给构造参数添加val前缀 // 4. 可以用于模式匹配 // 5. 默认的,case class和case object是可序列化的(实现Serializable),也即是可以网络传输的  for&amp;hellip;yield  Scala’s “for comprehensions” are syntactic sugar for composition of multiple operations with foreach, map, flatMap, filter or withFilter scala的for推导其实就是组合多个foreach, map, flatMap, filter or withFilter的语法糖. 以下代码结果r1,r2完全一致:
 val c1 = List(1, 2, 3) val c2 = List(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;) val c3 = List(&amp;#34;!&amp;#34;, &amp;#34;@&amp;#34;, &amp;#34;#&amp;#34;) val r1 = for (x &amp;lt;- c1; y &amp;lt;- c2; z &amp;lt;- c3) yield { x &#43; y &#43; z } //&amp;lt;==&amp;gt; val r2 = c1.flatMap(x =&amp;gt; c2.flatMap(y =&amp;gt; c3.map(z =&amp;gt; { x &#43; y &#43; z }))) assert(r1 == r2)//true  companion object Scala中，除了方法，一切都是对象！函数也是对象,根据参数的个数,函数的类型为FunctionN.N为函数参数个数. 伴生对象用于定义一些静态方法(工厂方法),其中apply和unapply方法常用. apply方法用于代替new的工厂方法. 同时,companion objects can access private fields and methods of their companion trait/class.
class Person(name: String, age: Int) { private var skill: String = &amp;#34;no skill&amp;#34; def introduce() = println(s&amp;#34;my name is $name, I am $ageyears old&amp;#34;) } // companion object name should be identical to the class name. object Person { def apply(name: String, age: Int): Person = { new Person(name, age) } //apply method override  def apply(name: String, age: Int, skill: String): Person = { val p = new Person(name, age) p.skill = skill p } } val dahu = Person(&amp;#34;dahu&amp;#34;, 30) dahu.introduce 伴生对象在模式匹配和抽取器的应用
//关于抽取器和unapply方法的进一步示例: trait User class FreeUser( val name: String, val score: Int, val upgradeProbability: Double) extends User class PremiumUser( val name: String, val score: Int) extends User object FreeUser { def unapply(user: FreeUser): Option[(String, Int, Double)] = Some((user.name, user.score, user.upgradeProbability)) } object PremiumUser { def unapply(user: PremiumUser): Option[(String, Int)] = Some((user.name, user.score)) } val freeUsr = new FreeUser(&amp;#34;john&amp;#34;, 70, 0.5) freeUsr match { case FreeUser(name, _, p) =&amp;gt; if (p &amp;gt; 0.75) println(s&amp;#34;what can I do for you,$name&amp;#34;) else println(s&amp;#34;hello,$name&amp;#34;) case _ =&amp;gt; println(&amp;#34;who are you&amp;#34;) } //bool抽取器 object premiumCandidate { def unapply(user: FreeUser): Boolean = user.upgradeProbability &amp;gt; 0.4 } // bool抽取器的用法 freeUsr match { case freeUser@premiumCandidate() =&amp;gt; println(s&amp;#34;恭喜成为黄金会员候选人&amp;#34;) case _ =&amp;gt; println(&amp;#34;欢迎回来&amp;#34;) } //来源: [Scala初学者指南](http://danielwestheide.com/scala/neophytes.html)  method and function(def val) 先看函数定义
 A function can be invoked with a list of arguments to produce a result. A function has a parameter list, a body, and a result type. Functions that are members of a class, trait, or singleton object are called methods. Functions defined inside other functions are called local functions. Functions with the result type of Unit are called procedures. Anonymous functions in source code are called function literals. At run time, function literals are instantiated into objects called function values.
quote from：Martin Odersky - Lex Spoon - Bill Venners
 函数由一个参数列表，一个函数体，一个结果类型构成。函数如果作为class，trait或者object（注意，这里的object是scala特有的单例对象，不是Java中的instance）的成员，那么这个函数叫方法。函数和方法的区别就是函数时FunctionN的一个实例,编译后是一个单独的class文件,而方法是依附对象的,调用方法的格式是obj.method(param),而调用函数的格式本质是将调用函数对象的apply方法. 函数定义在别的函数内部叫局部函数。函数返回值是Unit称为过程（procedures）。 匿名函数是通过函数字面量（ ()=&amp;gt;{函数体} ）定义的函数。在运行时，函数字面量被实例化对象，叫函数值。 函数和方法的区别，大部分情况下不用在意区别： 函数是有类型的： (T1, &amp;hellip;, Tn) =&amp;gt; U，是trait FunctionN的一个实例对象，函数有一个apply方法，用来实际执行function的函数体。函数还有toString， andThen ，conpose等方法。
val fn: Int =&amp;gt; String = i =&amp;gt; i&#43;&amp;#34;123&amp;#34; //声明一个函数 fn(3) //实际背后是fn.apply(3); scala中除了method，一切都是instance method只能用def 声明，function可以是val和def声明 method可以有类型参数[] ,function不能有，函数在声明时就需要知道具体类型。
def fn(p: List[String]): Map[T] = {...} //is function def m[T](t: List[T]): Map[T] = {...} //is method,可以有泛型参数.  将method转换成function有两种方法： val f1 = m1 _ //下划线表示参数列表 eta-expansion val f2: (Int) =&amp;gt; Int = m1 //m1 的入参和返回值要和f2的一样  //scala可以自动将method转换为function，如果一个方法需要一个函数作为参数， //那么可以直接将m1传递给他，不需要 下划线。 //每一次将方法转换成function都是得到一个新的function object。 //function既然是一个instance，那么编译成class文件会有一个class文件。  _ in scala /** * class Reference[T] { * private var contents: T = _ * //使用类型默认值初始化变量，如果T是Int，则contents是0，T是boolean，则是false；Unit则是() * } * * * List(1, 2, 3) foreach (print _ ) //output 123，表示实参 * * //在匿名函数中作为参数占位符： * List(1, 2, 3) map ( _ &#43; 2 ) * // _ &#43; 2是一个匿名函数 * * //模式匹配中的最后一行作为通配符 * case _ =&amp;gt; &amp;#34;this is match anything other than before cases &amp;#34; * * expr match { * * case List(1,_,_) =&amp;gt; &amp;#34; a list with three element and the first element is 1&amp;#34; * case List(_*) =&amp;gt; &amp;#34; a list with zero or more elements &amp;#34; * case Map[_,_] =&amp;gt; &amp;#34; matches a map with any key type and any value type &amp;#34; * case _ =&amp;gt; * } * * * //import中作为通配符和隐藏符 * import java.util.{ ArrayList =&amp;gt; _, _} * //第一个下划线表示隐藏ArrayList，第二个表示通配符，导入所有 * * //将方法变为value * method _ // Eta expansion of method into method value * * //tuple 的访问 * tpl._2 //返回tpl第二个元素，注意，tuple是从1开始的 * * * //还有很多高级的概念，目前还不理解，so上给出的答案 * def f[M[_]] // Higher kinded type parameter * def f(m: M[_]) // Existential type * _ &#43; _ // Anonymous function placeholder parameter * m _ // Eta expansion of method into method value * m(_) // Partial function application * _ =&amp;gt; 5 // Discarded parameter * case _ =&amp;gt; // Wild card pattern -- matches anything * val (a, _) = (1, 2) // same thing * for (_ &amp;lt;- 1 to 10) // same thing * f(xs: _*) // Sequence xs is passed as multiple parameters to f(ys: T*) * case Seq(xs @ _*) // Identifier xs is bound to the whole matched sequence * var i: Int = _ // Initialization to the default value * def abc_&amp;lt;&amp;gt;! // An underscore must separate alphanumerics from symbols on identifiers * t._2 */ =&amp;gt; in scala 函数字面量分隔参数和函数体 在函数字面量中 =&amp;gt;分隔参数和函数体. 也可以表示一个函数类型.
(x: Int) =&amp;gt; x * 2表示一个匿名函数，接收一个整数，返回参数乘以2的结果。 scala&amp;gt; val f: Function1[Int,String] = argInt =&amp;gt; &amp;#34;my int: &amp;#34;&#43;argInt.toString f: Int =&amp;gt; String = &amp;lt;function1&amp;gt; // Int =&amp;gt; String 等价 Function1[Int,String] scala&amp;gt; val f2: Int =&amp;gt; String = myInt =&amp;gt; &amp;#34;my int v2: &amp;#34;&#43;myInt.toString f2: Int =&amp;gt; String = &amp;lt;function1&amp;gt; //注意，匿名函数没有参数也要括号 ()=&amp;gt;{}； //() =&amp;gt; Unit表示没有返回值的函数 call-by-name parameter 在函数的参数声明中使用=&amp;gt;(e.g. def f(arg: =&amp;gt; T))表示这个参数是&amp;quot;by-name parameter&amp;rdquo;,表示这个参数只有在函数体中包含这个参数的语句被执行才会被evaluate。 这个特点叫call-by-name,arg可以是一个代码块，甚至函数，在传递给f时不会evaluate，只有f函数体内部调用arg时，arg才会被执行。
scala&amp;gt; def now()={println(&amp;#34;nano time:&amp;#34;);System.nanoTime} scala&amp;gt; def callByName(p: =&amp;gt; Long):Long = {println(&amp;#34;call-by-name:&amp;#34;&#43;p);p;} callByName: (p: =&amp;gt; Long)Long scala&amp;gt; def justCall(p : Long) :Long = {println(&amp;#34;just-call:&amp;#34;&#43;p);p;} justCall: (p: Long)Long scala&amp;gt; callByName(now()) nano time: call-by-name:5664511571389 nano time: res2: Long = 5664511727048 //now()在callByName的函数体的每个出现的地方都执行了  scala&amp;gt; justCall(now()) nano time: just-call:5667489483159 res3: Long = 5667489483159 //now()只在传递参数的时候被执行了. 模式匹配中分隔case模式和返回值 在case语句中，=&amp;gt; 分隔模式和返回表达式。
var a = 1 a match{ case 1 =&amp;gt; println(&amp;#34;One&amp;#34;) case 2 =&amp;gt; println(&amp;#34;Two&amp;#34;) case _ =&amp;gt; println(&amp;#34;No&amp;#34;) } () {} in method call // 规则1:{}表示code block,你可以在里面放几乎任何语句,block的返回值是由最后一句决定 // 规则2:block内容如果只有一句可以省略{},但是case clause除外:{case ...} // 规则3: 单参数方法如果实参是code block,那么可以省略() { import util.Try println{&amp;#34;hello&amp;#34;} 5 } val tupleList = List[(String, String)]() //规则2 tupleList takeWhile( { case(t1,t2) =&amp;gt; t1==t2 } ) // 规则2 List(1, 2, 3).reduceLeft(_&#43;_) // 一种特殊情况,提示:隐式转换 val r = List(1, 2, 3).foldLeft(0) {_&#43;_} //val l = r{&amp;#34;hello&amp;#34;}  //不要调用这个方法 def loopf(x: Int): Int = loopf {x} //使用{}的特殊情况:for推导可以和()互换,一般建议是除了yield的其他情况都用() for{tpl &amp;lt;-tupleList} yield tpl._2 //不建议 for{tpl &amp;lt;-tupleList} { println(tpl) } //推荐 for(tpl &amp;lt;-tupleList) { println(tpl) } //补充, 方法定义时如果没有返回值可以省略=,称为procedure,scala 2.13已经废弃,不要这么写 //don&amp;#39;t def p(in:String ){ println(s&amp;#34;hello $in&amp;#34;) } implicit implicit分为隐式参数和隐式转换方法.
隐式参数 //1.隐式参数 class Prefixer(val prefix: String) def addPrefix(s: String)(implicit p: Prefixer) = p.prefix &#43; s // addPrefix需要提供一个隐式实际参数,否则报错.当然可以在调用时显式传递一个参数 implicit val myImplicitPrefixer = new Prefixer(&amp;#34;***&amp;#34;) addPrefix(&amp;#34;abc&amp;#34;) // returns &amp;#34;***abc&amp;#34; 隐式转换 //1. 定义一个含有目标方法的class class BlingString(s:String) { def bling = &amp;#34;*&amp;#34;&#43;s&#43;&amp;#34;*&amp;#34; } //2. 定义隐式转换方法 implicit def str2BlingString(s:String) = new BlingString(s) //3. 使用目标方法 val s = &amp;#34;hello&amp;#34; s.bling // *hello*  //在scala.Predef中定义了大量的隐式转换,例如RichInt,StringOps这些,提供类似mkString这些方法 //太阳底下无新事,scala常用对象的灵活丰富的语法都是通过隐式转换添加的. implicit class 可以看到上面的第1,2步非常的繁琐，于是SIP-13提出一个implicit class,将上面的2步合并:
implicit class BlingString(s:String) { def bling = &amp;#34;*&amp;#34;&#43;s&#43;&amp;#34;*&amp;#34; } //implicit def str2BlingString(s:String) = new BlingString(s)  val hi = &amp;#34;hello&amp;#34; hi.bling // *hello* 注意，这个只是一个语法糖。去糖后就是上面的那个形式。 implicit class有3个约束和一个注解问题：
  必须要有主一个构造函数且只能一个构造参数（implicit参数除外）。构造参数就是源类型. 这个构造函数即等价上面第2步的隐式转换方法：
implicit class RichDate(date: java.util.Date) // OK! implicit class Indexer[T](collecton: Seq[T], index: Int) // BAD! implicit class Indexer[T](collecton: Seq[T])(implicit index: Index) // OK!    只能定义在其他trait/class/object中：
object Helpers { implicit class RichInt(x: Int) // OK! } implicit class RichDouble(x: Double) // BAD!    在当前scope内，不允许有和implicit class同名的方法，对象，变量。因为case class会自动生成同名object对象，所以implicit class不能是case class。
object Bar implicit class Bar(x: Int) // BAD!  val x = 5 implicit class x(y: Int) // BAD!  //cuz case class has companion object by default implicit case class Baz(x: Int) // BAD! conflict with the companion object    还有就是implicit class的注解在去语法糖后会自动添加到类和方法，除非在注解中指明范围：
@bar implicit class Foo(n: Int) //desugar @bar implicit def Foo(n: Int): Foo = new Foo(n) @bar class Foo(n:Int) //除非在注解中指明：genClass / method @(bar @genClass) implicit class Foo(n: Int) //desugar得到 @bar class Foo(n: Int) implicit def Foo(n: Int): Foo = new Foo(n)   value class scala 还有一个概念：value class
class Wrapper(val underlying: Int) extends AnyVal //1. 一个public val参数表示runtime类型，这里是Int. 编译时是Wrapper类型，所以value class目的是降低分配开销。 //2. value class 需要 extends AnyVal //3. value class 只能有 defs, 不能有vals, vars, or nested traits, classes or objects， // 因为def是通过静态方法实现的，而val，var这些则必须创建相应类型了。 //4. value class 只能扩展通用trait（universal traits）， // universal traits是A universal trait is a trait that extends Any, only has defs as members, and does no initialization. // extension method 当implicit class类型参数是AnyVal子类时，value class和上面的implicit class形式相近，所以可以通过value class降低implicit class的分配开销。例如RichtInt
implicit class RichInt(val self: Int) extends AnyVal { def toHexString: String = java.lang.Integer.toHexString(self) } 因为RichInt是value class，在运行时（runtime）不会有RichInt这个类，而是Int，而3.toHexString实际是通过静态方法实现的： RichInt$.MODULE$.extension$toHexString(3),这么做好处是减少对象分配开销(avoid the overhead of allocation)。如果implicit class的类型参数不是AnyVal子类，那么在runtime时会有相应类型对象被创建，用户察觉不到区别。 value class还有其他作用和局限性，可以参考上面链接。如果发现错误，请指出，先谢过。
Implicit Design Patterns in Scala​www.lihaoyi.com The Neophyte&amp;rsquo;s Guide to Scala​
集合类的implicit转换 //scala集合和java集合的转换是scala编程最常用的,毕竟java有大量第三方库. //scala提供了两种方法,第一种方法就是隐式转换collection.JavaConversions(scala 2.8) //很快意识到隐式转换对于使用者的代码阅读比较复杂,在2.8.1提供了显示转换collection.JavaConverters, //先看JavaConversions隐式转换: object JavaConversions extends WrapAsScala with WrapAsJava //在WrapAsJava  implicit def mapAsJavaMap[A, B](m: Map[A, B]): ju.Map[A, B] = m match { case null =&amp;gt; null case JMapWrapper(wrapped) =&amp;gt; wrapped.asInstanceOf[ju.Map[A, B]] case _ =&amp;gt; new MapWrapper(m) } //然后看下collection.JavaConverters._,稍微复杂一些,但是换汤不换药,底层还是隐式转换, object JavaConverters extends DecorateAsJava with DecorateAsScala //在DecorateAsJava中有很多隐式转换方法,这些方法将scala集合转换为AsJava对象 //(注意下面的ju,是java.util缩写,详情见[征服scala_1](https://zhuanlan.zhihu.com/p/22670426)) implicit def seqAsJavaListConverter[A](b : Seq[A]): AsJava[ju.List[A]] = new AsJava(seqAsJavaList(b)) // 而AsJava中定义了asJava方法,这样我们就可以在scala集合上面调用asJava class AsJava[A](op: =&amp;gt; A) { /** Converts a Scala collection to the corresponding Java collection */ def asJava: A = op } //并且asJava方法的实现是作为构造参数传入AsJava的 //上面的seqAsJavaList就是将scala.Seq转换为ju.List的具体实现 def seqAsJavaList[A](s: Seq[A]): ju.List[A] = s match { case null =&amp;gt; null case JListWrapper(wrapped) =&amp;gt; wrapped.asInstanceOf[ju.List[A]] case _ =&amp;gt; new SeqWrapper(s) } //综上,JavaConverters用的还是隐式转换,只不过增加了一个中间类AsJava/AsScala. 隐式转换的scope //无论是隐式参数还是隐式转换,编译器都要知道去哪里查找这些implicit参数或者方法, //例如import collection.JavaConverters._ //由于scala import可以出现在任何地方,这为控制implicit的scope提供了灵活性 //这一块我不是完全清楚,只提供一个自己的理解 // 1.首先是当前scope的Implicits定义,例如,当前方法内,class内 // 2.显式导入 import collection.JavaConversions.asScalaIterator // 3.通配符导入 import collection.JavaConverters._ // 4.类型的伴生对象内(这个常用) // 5.参数类型的隐式scope (2.9.1添加):class构造参数的隐式转换搜索返回会被应用到 class A(val n: Int) { def &#43;(other: A) = new A(n &#43; other.n) } object A { implicit def fromInt(n: Int) = new A(n) } new A(1) &#43; 2 // new A(1) &#43; A.fromInt(2) //6.类型参数的隐式转换,下面的sorted方法期望有一个Ordering[A], //在伴生对象中提供了一个 A -&amp;gt; Ordering[A] , class A(val n: Int) object A { implicit val ord = new Ordering[A] { def compare(x: A, y: A) = implicitly[Ordering[Int]].compare(x.n, y.n) } } List(new A(5), new A(2)).sorted // 注意implicitly[Ordering[Int]] 表示在当前scope内搜索一个隐式参数值 def implicitly[T](implicit e: T): T = e string // The s String Interpolator: val name = &amp;#34;James&amp;#34; println(s&amp;#34;Hello, $name&amp;#34;) // Hello, James  // The f Interpolator val height = 1.9d val name = &amp;#34;James&amp;#34; println(f&amp;#34;$name%s is $height%2.2f meters tall&amp;#34;) // James is 1.90 meters tall  // The raw Interpolator // The raw interpolator is similar to the s interpolator except that // it performs no escaping of literals within the string. // Here’s an example processed string // 即不翻译转义字符 scala&amp;gt;raw&amp;#34;a\nb&amp;#34; res1: String = a\nb // &amp;#34;&amp;#34;&amp;#34; triple quotes string // triple quotes &amp;#34;&amp;#34;&amp;#34; to escape characters val donutJson4: String = &amp;#34;&amp;#34;&amp;#34; |{ |&amp;#34;donut_name&amp;#34;:&amp;#34;Glazed Donut&amp;#34;, |&amp;#34;taste_level&amp;#34;:&amp;#34;Very Tasty&amp;#34;, |&amp;#34;price&amp;#34;:2.50 |} &amp;#34;&amp;#34;&amp;#34; .stripMargin // |会被忽略 // &amp;#34;&amp;#34;&amp;#34;还有个很好的用处,正则表达式: // 在java中表示一个或多个空格,&amp;#34;\\s&#43;&amp;#34; // 在scala中只要 &amp;#34;&amp;#34;&amp;#34;\s&#43;&amp;#34;&amp;#34;&amp;#34;,对于复杂正则表达式非常有用. links https://www.btbytes.com/scala.html
https://booksites.artima.com/programming_in_scala_2ed/examples/index.html
http://blog.higher-order.com/assets/fpiscompanion.pdf
https://courses.cs.washington.edu/courses/cse341/09au/notes/scala.html
https://github.com/dnvriend/my-scala-notes
https://gist.github.com/jamesyang124/d65b067327452792287a
</content>
    </entry>
    
     <entry>
        <title>使用redis的hash优化内存使用</title>
        <url>https://zhimoe.github.io/post/%E4%BD%BF%E7%94%A8redis%E7%9A%84hash%E4%BC%98%E5%8C%96%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/</url>
        <categories>
          <category>翻译</category>
        </categories>
        <tags>
          <tag>code</tag><tag>redis</tag>
        </tags>
        <content type="html"> 原文 Understanding Redis hash-max-ziplist-entries
问题和方案 场景: 有3亿张图片放在对象存储(DELL ECS/AMAZON EC2)上面,现在需要保存图片的id-&amp;gt;用户id的映射.最直接的思路是:
set &amp;#34;media:1155220&amp;#34; &amp;#34;user1&amp;#34; set &amp;#34;media:1155221&amp;#34; &amp;#34;user2&amp;#34; 这样设计key之后3亿张图片需要21GB的内存,因为redis的string是线性增长的. 此时可以使用hash优化内存使用.hash是类似java hashmap的数据结构: key field1 value1 field2 value2 &amp;hellip; hash的强大在于它可以只获取一个field的value,而无需返回整个key. 再仔细想想,hash的key可以类比于分库分表的bucket概念.
回到上面的问题,Mike Krieger,Instagram的创始人提出将图片的id除以1000分片(sharding)到1000个hash key上:
HSET &amp;#34;mda-bkt:1155&amp;#34; &amp;#34;1155220&amp;#34; &amp;#34;user1&amp;#34; &amp;#34;1155221&amp;#34; &amp;#34;user2&amp;#34; # mda-bkt:1155 是1155220/1000之后得到的bucket. HGET &amp;#34;mda-bkt:1155&amp;#34; &amp;#34;1155220&amp;#34; # 这里key的前缀*mda-bkt:)只重复了1000次,而上面的string方式重复了3亿次. 因为redis针对hash list zset三种结构使用了ziplist高效存储方案.
新的问题又来了,redis对于ziplist结构的key数量有限制的,即hash-max-ziplist-entries的含义是: 可使用内部空间优化存储的最多hash key
使用ziplist的数据结构有三个list hash zset:
list-max-ziplist-entries 512 list-max-ziplist-value 64 #Limits for ziplist use with LISTs. hash-max-ziplist-entries 512 hash-max-ziplist-value 64 #Limits for ziplist use with HASHes (previous versions of Redis used a different name and encoding for this) #hash-max-zipmap-entries 512 (for Redis &amp;lt; 2.6). zset-max-ziplist-entries 128 zset-max-ziplist-value 64 #Limits for ziplist use with ZSETs. 你可以使用debug_object(key)查看你的key是否使用了ziplist结构. 建议hash-max-ziplist-entries最大设置为1000,过大会影响redis性能.
参考资料 redis moemory optimize 9.1.1 The ziplist representation-EBOOK – REDIS IN ACTION
</content>
    </entry>
    
     <entry>
        <title>Scala Implicit</title>
        <url>https://zhimoe.github.io/post/scala-implicit/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>scala</tag>
        </tags>
        <content type="html"> 隐式参数 //隐式参数是在调用时可以自动填充的参数， 需要在调用范围内（scope)有一个隐式变量可供填充。 def addInt(i:Int)(implicit n: Int) = i &#43; n //需要提供一个隐式变量n implicit val sn = 1 addInt(2) // 3  //如果有两个满足类型的隐式变量，则在编译addInt(2)时报错  //scala的方法中ExecutionContext一般作为implicit参数。 隐式转换方法 如果想要给String实现一个mkStr方法,简单的给String添加一个Ops!前缀再返回。
//1. 首先实现一个包含目标方法的类型，实现该方法 class StrOps(s:String) { def mkStr(): String = { return &amp;#34;Ops! &amp;#34; &#43; s } } //2. 告诉scala编译器String可以通过类型转换获得mkStr这个方法： implicit final def string2StrOps(s: String) = new StrOps(s) //3. 现在用户可以直接认为String有mkStr方法 val s = &amp;#34;who changed my string&amp;#34; s.mkStr() //res2: String = Ops! who changed my string  //在scala.Predef中定义了大量的隐式转换,例如RichInt,RichDouble,StringOps这些 implicit class 可以看到第2步非常的冗余，于是SIP-13提出一个implicit class,将上面的1,2步合并:
implicit class StrOps(s:String) { def mkStr(): String = { return &amp;#34;Ops! &amp;#34; &#43; s } } 注意，这个只是一个语法糖。去糖后就是上面的那个形式。 implicit class有3个约束和一个注解问题：
  必须要有主一个构造函数且只能一个构造参数（implicit参数除外）。构造参数就是源类型. 这个构造函数即等价上面第2步的隐式转换方法：
implicit class RichDate(date: java.util.Date) // OK! implicit class Indexer[T](collecton: Seq[T], index: Int) // BAD! implicit class Indexer[T](collecton: Seq[T])(implicit index: Index) // OK!   只能定义在其他trait/class/object中：
object Helpers { implicit class RichInt(x: Int) // OK! } implicit class RichDouble(x: Double) // BAD!   在当前scope内，不允许有和implicit class同名的方法，对象，变量。因为case class会自动生成同名object对象，所以implicit class不能是case class。
object Bar implicit class Bar(x: Int) // BAD!  val x = 5 implicit class x(y: Int) // BAD!  //cuz case class has companion object by default implicit case class Baz(x: Int) // BAD! conflict with the companion object   还有就是implicit class的注解在去语法糖后会自动添加到类和方法，除非在注解中指明范围：
@bar implicit class Foo(n: Int) //desugar @bar implicit def Foo(n: Int): Foo = new Foo(n) @bar class Foo(n:Int) //除非在注解中指明：genClass / method @(bar @genClass) implicit class Foo(n: Int) //desugar得到 @bar class Foo(n: Int) implicit def Foo(n: Int): Foo = new Foo(n)   implicitly方法 scala的PreDef中有有一个implicitly方法，表示在当前scope征召一个隐式变量并返回该变量。
//PreDef @inline def implicitly[T](implicit e: T) = e  implitly[T] means return implicit value of type T in the context
 implicit class Foo(val i: Int) { def addValue(v: Int): Int = i &#43; v } implicit val foo:Foo = Foo(1) val fooImplicitly = implicitly[Foo] // Foo(1)  value class scala 还有一个概念：value class
class Wrapper(val underlying: Int) extends AnyVal //1. 一个public val参数表示runtime类型，这里是Int. 编译时是Wrapper类型，所以value class目的是降低分配开销。 //2. value class 需要 extends AnyVal //3. value class 只能有 defs, 不能有vals, vars, or nested traits, classes or objects， // 因为def是通过静态方法实现的，而val，var这些则必须创建相应类型了。 //4. value class 只能扩展 通用trait（universal traits）， // universal traits是A universal trait is a trait that extends Any, only has defs as members, and does no initialization. extension method 当implicit class类型参数是AnyVal子类时，value class和上面的implicit class形式相近，所以可以通过value class降低implicit class的分配开销。例如RichtInt
implicit class RichInt(val self: Int) extends AnyVal { def toHexString: String = java.lang.Integer.toHexString(self) } 因为RichInt是value class，在运行时（runtime）不会有RichInt这个类，而是Int，而3.toHexString实际是通过静态方法实现的： RichInt$.MODULE$.extension$toHexString(3),这么做好处是减少对象分配开销（avoid the overhead of allocation）。如果implicit class的类型参数不是AnyVal子类，那么在runtime时会有相应类型对象被创建，用户察觉不到区别。
value class还有其他作用和局限性，可以参考上面链接.
</content>
    </entry>
    
     <entry>
        <title>使用travis自动发布markdown到博客</title>
        <url>https://zhimoe.github.io/post/%E4%BD%BF%E7%94%A8travis%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83markdown%E5%88%B0%E5%8D%9A%E5%AE%A2/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>github</tag>
        </tags>
        <content type="html"> 更新：github开放action功能后，travis-ci已经没有必要了，目前博客使用zhimoe仓库管理源码，使用action编译后将public目录同步到zhimoe.github.io仓库的gh-pages分支。 注意，由于使用了jsdelivr的cdn功能，切换分支后theme的相关静态文件的path也要修改。
github给个人和组织免费提供github pages功能. 就是说如果有个repo的名字为 zhimoe.github.io (zhimoe 为你的github username), 那么这个repo里面的master或者gh-pages分支的内容如果存在index.html, 那么其他人可以通过 https://zhimoe.github.io 访问这个站点.
借助于一些static gen工具,你可以将你的markdown转换为一个静态网站(html,js,css). 然后把静态网站的内容上传到刚说的repo中, 就有一个自己的博客站点了. static gen工具非常多, github推荐的是Jekyll(ruby), 主流的还有hexo(js)和hugo(go), hexo因为是基于js的,所以高质量的主题多(因为做主题是需要js,css技能), hugo的编译快些, 但是好看的主题不多. 高质量的主题除了美观可能还需要考虑移动端(responsive),评论, 访问统计等各种功能. 每个gen工具都有自己的主题站点. hugo的主题在这里找: hugo themes.
制作github pages站点的一般做法是把代码(放图片和markdown)放在master分支,static gen编译后的(html,js,css,image)内容放在gh-pages分支.然后在settings里面设置. 这样就可以得到一个站点了. 这么做有个缺点,就是markdown文件会被别人整个下载过去,之前就遇到过一次. 正好github现在有3个免费私有仓库. 所以我把源码放在私有仓库zhimoe.github.io.src里面,而编译后的内容发布的 https://zhimoe.github.io上面去.
自动编译发布这个过程就是持续集成(continue integration,CI)了, 即我提交一个markdown文件,我的主页会自动看到这篇文章, 不需要我在本地编译再提交编译结果文件.travis-ci 提供了免费的github CI服务. 使用github账号登录就会有提示操作. 这里勾选私有仓库zhimoe.github.io.src, 然后在项目里面添加.travis.yml文件告诉travis如何编译和发布内容到个人站点.
markdown渲染设置 hugo使用BlackFriday渲染markdown文件,默认的设置有几个过于严格:
 没有硬换行,需要使用\来表示换行 标题和#之间必须有空格 代码块前面必须有空行  在config.toml可以修改这些配置:
# markdown解析引擎blackfriday配置,  # extensions : noEmptyLineBeforeBlock-代码块前面无需空行,hardLineBreak-换行无需使用backslash # extensionsmask spaceHeaders-标题之间无需空格 [blackfriday] angledQuotes = true extensions = [&amp;#34;hardLineBreak&amp;#34;,&amp;#34;noEmptyLineBeforeBlock&amp;#34;] extensionsmask = [&amp;#34;spaceHeaders&amp;#34;] fractions = false plainIDAnchors = true travis-ci配置 就是从一个私有的源码仓库编译,然后将编译后的文件强制覆盖到个人主页(即username.github.io这个仓库)的仓库中.具体的配置就不说了,注意是需要一个github的personal-access-key. 下面是.travis.yml内容:
dist: xenial language: python python: 3.7 # Handle git submodules yourself git: submodules: false # Use sed to replace the SSH URL with the public URL, then initialize submodules before_install: - sudo apt update -qq - sudo apt -yq install apt-transport-https - echo -e &amp;#34;Host github.com\n\tStrictHostKeyChecking no\n&amp;#34; &amp;gt;&amp;gt; ~/.ssh/config - git config --global user.email ${GITHUB_EMAIL} - git config --global user.name ${GITHUB_USERNAME} - sed -i &amp;#39;s/git@github.com:/https:\/\/github.com\//&amp;#39; .gitmodules - git submodule update --init --recursive install: # install latest hugo release version # - wget -qO- https://api.github.com/repos/gohugoio/hugo/releases/latest | sed -r -n &amp;#39;/browser_download_url/{/Linux-64bit.deb/{s@[^:]*:[[:space:]]*&amp;#34;([^&amp;#34;]*)&amp;#34;.*@\1@g;p;q}}&amp;#39; | xargs wget # use local hugo pkg for speed - sudo dpkg -i hugo*.deb - rm -rf public 2&amp;gt; /dev/null # compile src to dist script: - hugo -d ./dist/ after_success: - git clone https://zhimoe:${GITHUB_TOKEN}@github.com/zhimoe/zhimoe.github.io.git - cd zhimoe.github.io - git rm -rf . &amp;amp;&amp;amp; git clean -fxd - mv -v ../dist/* . - git add . - git commit -m &amp;#34;update site&amp;#34; - git remote set-url origin https://zhimoe:${GITHUB_TOKEN}@github.com/zhimoe/zhimoe.github.io.git - git remote -v - git push -q -f 要点:
 在项目的源码中放了hugo的deb安装包,省去下载的过程 主题以submodules放在themes目录中,所以编译前一定要git submodule update --init --recursive更新主题到本地. 目标repo的远程仓库一定要在push前重新设置:git remote set-url origin xxx </content>
    </entry>
    
     <entry>
        <title>wsl-docker-environment</title>
        <url>https://zhimoe.github.io/post/wsl-docker-environment/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>wsl</tag><tag>code</tag>
        </tags>
        <content type="html"> 使用wsl,MobaXterm,cmder,docker打造可视化的linux开发环境
离不开Windows的理由很多,作为后端开发需要使用linux的情况也很多,双系统总归是不方便,而且linux下的GUI体验也没用Win 10好. 如果使用虚拟机,那么文件交换和网络等各种问题也需要解决,对系统的内存要求也更高一些.微软为了让更多的开发人员留在Win10上面,开发了wsl功能.目前的实际体验已经很棒,今天介绍一下如何打造一个可视化的linux开发环境&amp;ndash;即在Win10启动linux的GUI软件,例如vs code等.在wsl启动vs code写代码可以有效避免一些Windows和linux的编码和换行问题.
本教程分为2部分:
 配置wsl可视化 在wsl使用docker   以下内容中 wsl和ubuntu含义相同,console和命令行含义相同.
 配置wsl可视化 系统要求是Win 10 1803&#43;版本(低于1803的wsl功能有问题),必须是专业版或教育版才有wsl功能.以下内容的命令行如果开头有&amp;gt;字符请忽略.
windows开启wsl功能 控制面板\程序\程序和功能\开发或关闭Windows功能 &amp;gt; 勾选 &amp;lsquo;适用于linux的Windows子系统&amp;rsquo;和 &amp;lsquo;hyper-V&amp;rsquo;(docker for Windows需要这个功能,也可以使用virtualbox代替), 重启电脑.
windows下载wsl Windows store搜索&amp;quot;wsl&amp;quot;或者&amp;quot;ubuntu&amp;quot;下载ubuntu版本. ubuntu和ubuntu1804是一个版本,ubuntu1604是旧的版本.安装完成你的Windows应用列表会有一个ubuntu应用,点击图标即可打开ubuntu命令行.第一次启动需要等待初始化,然后设置用户名和密码.由于字体难看,所以不用这个自带的命令行而使用下面的cmder.
windws下载cmder软件 cmder是Windows下最强的命令行功能. 不要下载mini那个,里面没用vim和git.第一次启动cmder记得修改cmder启动目录(默认是c盘)和显示中文设置,具体方法请google.
wsl修改软件源,使用阿里云的源. &amp;gt; sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak &amp;gt; sudo sed -i &amp;#39;s/archive.ubuntu.com/mirrors.aliyun.com/g&amp;#39; /etc/apt/sources.list &amp;gt; sudo apt update &amp;gt; sudo apt upgrade -y wsl安装必要软件 # 安装你需要的软件,git和vim是必须的,后面的编辑命令是使用vim &amp;gt;sudo apt install openjdk-8-jdk-headless openjdk-8-jre-headless maven git unzip vim -y 修改wsl下Windows磁盘挂载点 默认的Windows磁盘在wsl的访问方式是/mnt/d/开头,d表示d盘.但是docker on linux的访问路径是 /d,所以这里需要修改挂载点路径.
sudo vim /etc/wsl.conf ##添加3行内容 [automount] root = / options = &amp;#34;metadata&amp;#34; 退出wsl重启,发现/mnt已经没了,当前目录应该是/c/xxx或者/d/xxx.
wsl安装vs code和中文字体 因为wsl没用中文字体将显示豆腐块.
# install chinese fonts for wsl,font name: &amp;#39;Noto Sans Mono CJK SC&amp;#39; sudo apt install -y fonts-noto-cjk fonts-noto-cjk-extra # Win10下载vs code的deb包,cd到该目录,使用下面命令安装 sudo apt install ./code_1.31.1-1549938243_amd64.deb # 在wsl要启动code必要依赖 sudo apt install libgtk2.0-0 libxss1 libasound2 wsl设置SSH功能 这样可以借助VcXsrv的X11转发功能打开GUI软件
&amp;gt;sudo vim /etc/ssh/sshd_config #取消Port的注释,并将端口改为2222 (端口需要大于1000) #将PasswordAuthentication的值改为yes. #重启 ssh server: sudo service ssh --full-restart #将ssh server设置为服务: sudo service ssh start windows安装VcXsrv 用它的X11转发功能.安装后默认选项即可,可以设置为开机启动.
启动wsl的vs code 在wsl输入code .,等待2秒,你会发现Windows任务栏启动了一个vs code,如果没用启动成功,说明你的VcXsrv的X11转发功能有问题.
配置vs code. 上面打开的vs code有2个问题:中文显示豆腐块,和不能全屏. 打开vs code的设置
#在字体里面先设置你想要英文字体,逗号跟上&amp;#39;Noto Sans Mono CJK SC&amp;#39; #搜索titleBarStyle,将&amp;#39;Window: title Bar Style&amp;#39;设置为 native #上面2个设置也可通过直接编辑文件设置,例如我的vs code文件设置是 &amp;gt; cat ~/.config/Code/User/settings.json { &amp;#34;Window.titleBarStyle&amp;#34;: &amp;#34;native&amp;#34;, &amp;#34;editor.fontFamily&amp;#34;: &amp;#34;monospace,&amp;#39;Noto Sans Mono CJK SC&amp;#39;&amp;#34; } 至此,已经可以在linux下面开发了.当然,其他GUI软件没用测试不确定是不是会有小问题.但是vs code已经可以应付很多开发工作了.
在wsl使用docker 目前的wsl是不支持运行docker的,但是可以在wsl使用Windows的docker,在使用上面是无感的.
  安装docker for Windows. 这个就不细说了,注意docker社区版也是需要注册才能下载的.
  启动docker for Windows,右键任务栏的docker图标,&amp;ldquo;settings&amp;rdquo;,勾上 &amp;ldquo;expose the daemon on tcp:/localhost:2375 without TLS&amp;rdquo;,这样在wsl可以访问这个docker服务.
  wsl安装docker,详细内容可以参考官方文档,下面仅列出必要bash命令.
#安装必要组件 sudo apt install -y apt-transport-https ca-certificates curl software-properties-common #gpg签名 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 #添加docker安装源 sudo add-apt-repository &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs)\ stable&amp;#34; sudo apt update sudo apt install -y docker-ce #通过pip安装docker-compose sudo apt install -y python python-pip sudo usermod -aG docker $USER pip install --user docker-compose #验证docker安装是否成功 docker info docker-compose --version #修改docker服务为Windows的docker echo &amp;#34;export DOCKER_HOST=tcp://localhost:2375&amp;#34; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; source ~/.bashrc #验证是否可以访问Windows的docker服务,看image list命令输出和Windows的命令行下面的image list输出是不是完全一样. 可以先在Windows下用docker拉几个镜像.然后在wsl验证 docker image list   至此,wsl的docker服务也配置完成.
</content>
    </entry>
    
     <entry>
        <title>neo4j intro</title>
        <url>https://zhimoe.github.io/post/neo4j-intro/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>neo4j</tag><tag>code</tag><tag>database</tag>
        </tags>
        <content type="html"> neo4j图数据库介绍 neo4j是目前排名最高的图数据库,分为商业和社区版本,社区版只支持单机,而且查询的运行时(runtime)不同(cypher runtime:interpreted(社区版),slotted(企业版)). 数据库排名可以在 https://db-engines.com/en/ranking/graph&#43;dbms 查看,下一代最有前景的开源图数据库是dgraph,目前还积极开发中,生产未就绪,等他的Java客户端再成熟一点可以试用.
neo4j数据库中只有3个概念: Node, Relationship, Properties. Node表示实体类别,使用Label区分,例如一个节点可以有Person/Father等多个标签,Relationship即关系,雇佣关系,父子关系,投资关系,交易关系等. Node和Relationship都可以有Proerties,属性自身不分是属于节点还是属于关系,例如Person可以有属性name,关系也可以用属性name.你可以在neo4j browser左侧看到当前数据库的所有Node Label,Relationship Type,Properties.
本地安装和在线沙箱 neo4j背后的公司为了吸引用户,提供了一些好玩的数据库沙箱,这些沙箱数据库已经提前放了一些主题数据,例如购物数据,国会关系数据.你可以通过注册登录 https://neo4j.com/sandbox-v2/, 选择一个数据沙箱实例进行学习试玩.当然你也可以下载社区版,命令行 neo4j.bat console启动,打开127.0.0.1:7474开始学习.
一个neo4j支持多个数据库但是一次只能激活一个数据库,一个数据库所有文件都在$neo4j_home\data\databases目录的独立文件夹,在conf/neo4j.conf的dbms.active_database=graph.db指定激活那个数据库.
cypher查询语言 neo4j使用cypher语言作为查询语言.这是一种模式匹配的声明式语言.基本语法和SQL相似. cypher中常用的子句(clause)有: MATCH,RETURN,WITH,WHERE,UNWIND,LIMIT,UNION,SKIP,SET. RETURN,LIMIT WHERE和SQL中是一样的,UNWIND这些需要用到再查看文档,这里介绍MATCH和WITH. MTACH用于指定搜索的模式.例如希望找到&amp;rsquo;Tom Hanks&amp;rsquo;在2018演过的所有电影:MATCH (p:ACTOR {name:&#39;Tom Hanks&#39; }) -[r: ACT_IN]-&amp;gt;(m:MOVIE {time: &#39;2018&#39;}),这是一个模式,可以直接REUREN返回p,r,m等变量.可以看到模式中的节点(Node Label)使用();关系类型(Relationship Type)使用[]指定,如果不关心type,那么[]可以省略.使用&amp;ndash;; 属性(Properties) 使用{pname: pvalue}指定. WITH的作用和python的with非常相似(实际上cypher语言借鉴了python的list处理语法),用于修改一些变量,变量一般都是上一个子句的查询结果,修改之后传给下一个子句.例如下面的语句找到和Anders有关系的人的年龄最大的那个人,返回那个人的所有认识的人的名字.
MATCH (n { name: &amp;#39;Anders&amp;#39; })--(m) WITH m ORDER BY m.age DESC LIMIT 1 MATCH (m)--(o) RETURN o.name cypher手册: https://neo4j.com/docs/cypher-manual/3.5/clauses/
cypher的操作符 如果需要进行cypher调优,有必要了解一下cypher的操作符. 一般编程语言的代码在被执行前都会被编译得到抽象语法树(AST). 例如Java代码,一个Java文件会被抽象为一个package,class, method,variable declare等不同部分得到一个Class对象. cypher语句一样会被编译得到一棵语法树(AST),每个树节点是一个操作符. 从叶节点的操作符开始执行,得到的结果依次返回给父节点进一步处理.常见的操作符有:AllNodesScan(全局扫描,只能作为叶节点),NodeByLabelScan,Apply等.例如MATCH (n) return n会得到一个AllNodesScan和ProduceResults操作符构成的AST, 你可以通过PROFILE查看你语句编译后得到的操作符构成的执行计划.
# 执行语句得到下面的表格 PROFILE MATCH (p:Person { name: &amp;#39;Tom Hanks&amp;#39; }) RETURN p # 省略了部分列 &#43;-----------------&#43;----------------&#43;------&#43;---------&#43;-----------------&#43; | Operator | Estimated Rows | Rows | DB Hits | Page Cache Hits | &#43;-----------------&#43;----------------&#43;------&#43;---------&#43;-----------------&#43; | &#43;ProduceResults | 1 | 1 | 0 | 0 | | | &#43;----------------&#43;------&#43;---------&#43;-----------------&#43; | &#43;NodeIndexSeek | 1 | 1 | 2 | 0 | &#43;-----------------&#43;----------------&#43;------&#43;---------&#43;-----------------&#43; cypher runtime pass
neo4j browser介绍 和大多数数据库一样,neo4j是server-client的数据库,支持http和bolt2中协议.neo4j自带一个基于浏览器的客户端,只需在浏览器输入serverIp:7474即可使用. neo4j browser自带一个教程和电影关系的数据库初始化脚本.方便你可以学习.下面介绍几个常用的命令.
 :help help命令显示各种帮助提示. 常见的topic有 :help cypher :help commands :help keys :help param :play 交互式学习命令. 例如,:play movie graph 进入基于电影数据库的教程. :param 命令,设置变量. :param usrname =&amp;gt; &amp;ldquo;zhimoe&amp;rdquo;,注意,变量名和=&amp;gt;之间有空格.设置变量之后可以使用变量MATCH (n:Person) WHERE n.name = $usrname :params 显示当前已经设置的所有变量. 也可以使用:params {name: &amp;lsquo;Stella&amp;rsquo;, age: 24} 覆盖目前的变量. 但是这个命令没用类型安全.  spring-neo4j配置 pass
cypher调优 cypher是一种声明式的,模式匹配的查询语言.模式在cypher语言中非常重要.如何合理地设计查询中的模式是cypher性能可调优空间最大的地方.下面给出常见的优化建议. 需要说明的是,后面的这些建议其实大都可以在cypher手册找到,如果感兴趣,建议通读这份长文档&amp;hellip;
避免全局scan cypher 是一种模式匹配的语言,默认会进行全局扫描,除非你告诉它不要.所以起始节点的label非常重要.起始的模式匹配基数大小也非常重要.
缓存和硬盘IO neo4j数据库将数据文件和Page Cache作了映射,如果在缓存中没有查询到,neo4j会从硬盘加载数据文件.第二次查询就可以走缓存.所以需要充分利用Page Cache.记住第一次查询总是会比较慢,因为没用缓存.neo4j 有2级缓存:string cache和AST cache
 string cache 默认neo4j在cache中保留1000个查询计划,可在conf/neo4j.conf中参数 dbms.query_cache_size修改这个设置.  需要注意的是cache是根据语句的string hash值判断的,所以一样的语句仅仅是大小写不一样或者空白符不一样对缓存来说也是2个语句.
PROFILE/EXPLAIN语句只会cache其去掉PROFILE/EXPLAIN之后的部分.例如:MATCH (n) return COUNT(n);和PROFILE MATCH (n) return COUNT(n);的cache是一致的.
 AST cache 编程语言都有语法树.如果在string cache中没有找到缓存.那么会将查询正规化,得到语法树并将其缓存.正规化的同时也会做一些优化,例如 match (n:Person {id:101}) return n;在正规化之后得到match (n:Person) where n.id={param1} return n; {param1: 101},AST cache不区分大小写,空格等,所以以下查询是一致的:  match (n:Person) where n.id=101 return n; match (n:Person {id:101}) return n; MATCH ( n:Person { id : 101 } ) RETURN n; execution plan 当cypher引擎收到查询语句后如果没用找到对应的缓存,那么Cypher query planner会将语句规范化,优化后编译得到一个执行计划(execution plan).这个执行计划会缓存一切且可以复用. 当查询缓存过多,或者数据库的数据变化大时(设置参数是)这个执行计划则失效被移除.在查询中使用参数而不是字面量值,可以提高一个执行计划的复用率. 更多信息参考文档:https://neo4j.com/docs/cypher-manual/3.5/execution-plans/#execution-plan-introduction
查看查询计划 如果想要查看查询语句的执行计划,可以在查询语句前加上 EXPLANIN OR PROFILE 关键字, 你可以在neo4j browser查看query plan找到性能瓶颈.结果左侧边里面第3个tab会给出详细的性能警告(warn). EXPLAIN只会给出语句的分析结果;而PROFILE则会执行你的查询语句把给出耗时最多的报告,以及每个操作符返回了多少行记录. 注意,profiling会消耗很多资源,所以不要在生产环境中频繁使用.调优的基础是基于cypher的操作符,所以需要你对操作符有基本的了解.
索引 数据库离不开索引.这里有个小陷阱,最早谱系的节点是企业客户(label: COR_CUSTOMER)&#43;和几十个零售客户节点(label:RTL_CUSTOMER),我在查询语句起始节点没有指定label,没用遇到性能问题,后来加入了3百万的个人节点数据后,原来1s的查询变成了1分半钟. 所以在干扰的label比较少时,你不会察觉到性能问题.务必在起始节点指定label,即使目前只有一个label,最好也提前加上.
然而,cypher语句目前不允许在一个节点指定多个label,例如你希望起点label是COR_CUSTOMER|RTL_CUSTOMER,这个是不允许的. 只能在where语句指定.
MATCH n WHERE n:COR_CUSTOMER OR n:RTL_CUSTOMER RETURN n 在3.0之前的neo4j中使用上面的语句,会导致一个AllNodesScan,在3.0之后,该语句则是将2个NodeByLabelScan匹配结果UNION然后DISTINCT的结果. 所以是搜索2次再合并结果.你可以在上面的cypher语句前面添加EXPLAIN查看执行计划,已确定你的语句是否会导致全局扫描. SO上关于多个label匹配的讨论
大结果集 如果你的查询返回结果集太大,例如几M大小,那么你可能需要考虑你的设计了. 过大的结果集会导致查询返回变慢,要注意,这些结果会占用你的缓存空间,而如果在网络情况不好时,情况家更加糟糕了.
目前谱系对这一块并没有优化,最大的谱系的返回接口可能达到1M多,加上ES的数据,前端接收数据会有4M多.
锁 当你修改节点的信息时,节点会被锁定;如果修改关系,关系会被锁定;如果增加/删除关系,那么2个节点和这个关系都会被锁定.而如果此时有节点/关系的相关查询请求,这些请求会等待.所以,如果你需要将50个节点加入一个组(group)&amp;ndash;即添加50个关系,如果你调用50次方法,那么这个group节点被lock的时间较长,此时可以通过UNWIND和列表(list)参数处理这个问题.
MATCH (g:Group { uuid: $groupUuid }) UNWIND $personUuidList as personUuid MATCH (p:Person { uuid : personUuid }) MERGE (p)-[:IS_MEMBER]-&amp;gt;(g) 常见查询错误  变量名 label忘记添加冒号,例如MATCH (Person) 和 MATCH (:Person) 是完全不一样的,前者Person是变量,不走索引. 有过大的中间结果集,优化你的语句时思考:尽早distinct,尽早limit,使用collect减少结果的行数,在正确地方使用order by;  多个UNWIND语句导致笛卡尔积 多个UNWIND会导致一个笛卡尔积的结果,这个结果可能会很大.例如下面的结果会得到3*3=9行,所以尽量避免笛卡尔积.
with [&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;] as lts, [1,2,3] as nrs unwind lts as char unwind nrs as nr return char,nr 在MATCH中使用多个模式笛卡尔积 在MATCH中使用多个模式也会导致笛卡尔积,比较下面的2个结果相同的语句,第一个耗时80s,第二个只需8ms.
# 1. 笛卡尔积 80000 ms w/ ~900 players, ~40 teams, ~1200 games MATCH (pl:Player),(t:Team),(g:Game) RETURN COUNT(DISTINCT pl), COUNT(DISTINCT t), COUNT(DISTINCT g) # 2. 8ms w/~900 players, ~40 teams, ~1200 games MATCH (pl:Player) WITH COUNT(pl) as players MATCH (t:Team) WITH COUNT(t) as teams, players MATCH (g:Game) RETURN COUNT(g) as games, teams, players 模式中的方向 下面的查询中,如果给关系ACTED_IN添加上方向,可以提高查询速度.
MATCH (p:Person)-[:ACTED_IN]-(m) WHERE p.name = &amp;#34;Tom Hanks&amp;#34; RETURN m </content>
    </entry>
    
     <entry>
        <title>Jupyter Notebook Install New Package</title>
        <url>https://zhimoe.github.io/post/jupyter-notebook-install-new-package/</url>
        <categories>
          <category>翻译</category>
        </categories>
        <tags>
          <tag>code</tag><tag>python</tag>
        </tags>
        <content type="html"> 原文 installing new python package from jupyter notebook
笔记 在pycharm写代码中如果使用到新的package，例如numpy，只需要输入import numpy 然后ALT&#43;ENTER在提示中选择install new package即可。
在notebook中，网上的教程都说是!pip install numpy. 但是这个可能有坑。究其原因是因为:
通过bash启动的notebook的python pip conda这几个命令的环境和实际执行notebook代码的python环境可能不是同一个。 这种情况一般发生在系统有好几个python的情况，例如系统自带python和用户安装的anaconda python。 可以通过对比以下两个notebook命令的输出判断pip执行环境和notebook代码执行环境是否一致： # pip执行环境python !type python # notebook 代码执行环境的python import sys sys.executable 如果不一样，那么需要使用下面命令安装才能在notebook中生效： import sys !{sys.executable} -m pip install numpy sys和os区别 os: 操作系统的抽象。 sys: 代码和python解释器交互的接口。提供一系列函数来访问修改python解释器环境设置。 </content>
    </entry>
    
     <entry>
        <title>Java Thread Pool Hierachy</title>
        <url>https://zhimoe.github.io/post/java-threadpool-hierachy/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>java</tag><tag>threadpool</tag>
        </tags>
        <content type="html"> thread pool classes hierachy java thread pool class hierarchy Executor (java.util.concurrent) |---ExecutorService (java.util.concurrent) |---AbstractExecutorService (java.util.concurrent) | |---AbstractEventExecutor (io.netty.util.concurrent) | |---ForkJoinPool (java.util.concurrent) | |---ThreadPoolExecutor (java.util.concurrent) | | |---ScheduledThreadPoolExecutor (java.util.concurrent) |---DelegatedExecutorService in Executors (java.util.concurrent) |---ScheduledExecutorService (java.util.concurrent) three thread pool interfaces Executor, a simple interface that supports launching new tasks. ExecutorService, a subinterface of Executor, which adds features that help manage the life cycle, both of the individual tasks and of the executor itself. ScheduledExecutorService, a subinterface of ExecutorService, supports future and/or periodic execution of tasks.
common thread pool implements ThreadPoolExecutor是thread pool 最常用的实现。 一般通过Executors静态工厂方法来创建。
//Executors.newFixedThreadPool //Executors.newCachedThreadPool //Executors.newSingleThreadExecutor //同样的，Executors还提供了ScheduledExecutorService的工具方法 // Executors.newSingleThreadScheduledExecutor /** * corePoolSize - 保留存活的线程个数 * maximumPoolSize - 最大线程个数 * keepAliveTime - 线程数超过corePoolSize时，空闲线程存活时间 * unit - keepAliveTime的单位，毫秒秒分等 * workQueue – 任务队列，只保存通过 execute()方法提交的 Runnable任务 * threadFactory – 给自己创建一个线程的工厂方法 * handler – 当线程池达到数量限制或者任务队列满了，对新任务提交的处理策略 */ class ThreadPoolExecutor { public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&amp;lt;Runnable&amp;gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {} } JDK默认的拒绝策略RejectedExecutionHandler有：
/** * ThreadPoolExecutor.AbortPolicy - 默认的handler，抛出一个RejectedExecutionException * ThreadPoolExecutor.CallerRunsPolicy - 提交任务的线程自己执行这个任务 * ThreadPoolExecutor.DiscardPolicy - 抛弃这个任务 * ThreadPoolExecutor.DiscardOldestPolicy - 抛弃任务队列中最早提交上来的任务，然后尝试重新提交当前这个任务 */ fork/join 框架 fork/join和上面ThreadPoolExecutor的区别在于使用了任务窃取算法，工作线程完成自己的任务后可以从其他线程偷取任务，提高整体的任务效率。 核心是一个ForkJoinPool class和一个扩展的AbstractExecutorService。 执行ForkJoinTask 任务。 在JDK8中有个java.util.Arrays.parallelSort()使用的就是 fork/join。
当然，不是所有人都满意JDK7引入的Fork/Join框架.
</content>
    </entry>
    
     <entry>
        <title>Spark Basic</title>
        <url>https://zhimoe.github.io/post/spark-basic/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>spark</tag>
        </tags>
        <content type="html"> 引言 大数据计算和普通的程序并无本质区别：数据输入=&amp;gt;计算=&amp;gt;输出和结果的持久化。这里的挑战在于计算的效率和容错性。由于数据输入巨大，计算的效率是基本的要求。为了在通用硬件上高效完成大量计算，唯一的途径就是将计算任务拆分分布式计算。这就引出了新的问题：分布式计算资源的管理（Mesos，YARN），分布式计算失败后的恢复（容错性）（Spark RDD），以及分布式的数据输入和保存（分布式文件HDFS）。hadoop生态圈就是为了解决几个问题设计的(YARN,MapR,HDFS)。只不过在计算这一环节Spark做的更加高效取代了MapR。所以先看下hadoop的核心两个组件。
HDFS  HDFS是hadoop的虚拟分布式文件系统。满足大数据问题下要求的：可扩展的，容错的，硬件通用的和高并发的特性。HDFS最重要的特性是不可变性&amp;ndash;数据提交到HDFS后即不可更新了，也就是所谓的WORM(write once read many)。 文件在HDFS中是以block构成，默认一个block是128M。block是是分布式的，即如果集群中如果有多于1个节点，那么有文件可能会被分布在多个节点上。block是被复制的，这主要是两个目的：1.容错，2.增加数据局部性的概率，有利于访问。block复制在数据节点接收（ingest：消化）block时同时发生。如图所示：   NameNode：不知道怎么翻译，NameNode主要负责管理HDFS的元数据，包括directory,文件对象和相关属性（e.g. ACL)，元数据是常驻内存中的，硬盘上也有备份以及日志保证持久性和崩溃后的一致性（和数据库相似）。还包括block的位置信息&amp;ndash;block之间的关系。注意，数据（文件）并不经过NameNode，否则很容易成为性能瓶颈，数据是直接到达DataNode，并上报给NameNode管理。 数据节点（DataNode）负责：block复制；管理本节点的存储；向NameNode上报block信息。注意，数据节点不会意识到HDFS的目录（directory）和文件（Files）的概念，这些信息是NameNode管理保存的，客户端只会和NameNode交道。 hdfs客户端分为：fs shell;hdfs java api;rest proxy接口（HttpFS等）。 常见命令：  # 上传一个文件 -f表示覆盖 hadoop fs -put -f jour.txt /user/dahu/jour/ # 下载 hadoop fs -get /user/dahu/jour/jour.txt # ls hadoop fs -ls /user/dahu/ # 删除 -r表示递归，删除目录 hadoop fs -rm /user/dahu/jour/jour.txt hadoop fs -rm -r /user/dahu/jour YARN  YARN:Yet Another Resource Negotiator是hadoop的资源管理器。YARN有个守护进程&amp;ndash;ResourceManager,负责全局的资源管理和任务调度，把整个集群当作计算资源池，只关注分配，不管应用，且不负责容错。YARN将application（或者叫job）分发给各个NodeManager,NodeManager是实际的worker或者worker的代理。ResourceManager主要有两个组件：Scheduler 和 ApplicationsManager。 下图是YARN的结构示意图：    上图中ResourceManager负责管理和分配全局的计算资源。而NodeManager看着更复杂一些：1.用户提交一个app给RM（ResourceManager）；2.RM在资源充足的NodeManager上启动一个ApplicationMaster（也就是这个app对应的第一个container）。3.ApplicationMaster负责在所有NodeManagers中协调创建几个task container，也包括ApplicationMaster自己所在的NodeManager（上图中紫色2个和红色的4个分别表示2个app的task container和ApplicationMaster）。4. NodeManager向各个ApplicationMaster汇报task container的进展和状态。5. ApplicationMaster向RM汇报应用的进展和状态。6.RM向用户返回app的进度，状态，结果。用户一般可通过Web UI查看这些。
  上面的示意图是YARN 的核心概念，Spark程序的运行结构示意图和上面的示意图相同。每个组件都可以近似一样的理解，例如，上面的Client在Spark中叫Driver程序;ResourceManager在Spark中叫Cluster Manager（为了理解方便，认为一样即可，Spark的ClusterManager目前主要有YARN,Mesos和Spark自带的三种）；NodeManager就是Spark中的Worker Node。
  Spark基本概念  上图中的client程序在Spark中即Driver程序。Driver就是我们编写Spark程序app的主要部分，包括SparkContext的创建和关闭以及计算任务（Task）的计划（Planning,包括数据数据，转换，输出，持久化等)。SparkContext负责和Cluster Manager通信，进行资源申请，任务的分配和监控。一般认为SparkContext代表Driver。 ClusterManager：就是上面说的三种-Standalone,YARN,Mesos。 ＷorkerNode: 集群中运行app代码的节点，也就是上图中YARN的NodeManager节点。一个节点运行一个/多个executor. Executor：app运行在worker节点的一个进程，进程负责执行task的planning。Spark On YARN 中这个进程叫CoarseGrainedExecutorBackend。每个进程能并行执行的task数量取决于分配给它的CPU个数了。下图是一个Spark程序集群概览图，和上图很相似。   仔细对比上面两个示意图，在YARN的结构示意图中,ResourceManager为程序在某个NodeManager上创建的第一个container叫ApplicationMaster，ApplicationMaster负责只是其他的task container。在Spark On YARN有两种运行模式：client和cluster模式。在cluster模式下，用户编写的driver程序运行在YARN的ApplicationMaster的内部。 *RDD:Spark的核心数据结构。后面详细介绍，可以简单的理解为一个Spark程序所有需要处理的数据在Spark中被抽象成一个RDD，数据需要被拆分分发到各个worker去计算，所以RDD有一个分区（Partation）概念。一般我们的数据是放在分布式文件系统上的(e.g. HDFS)，可以简单理解为一个RDD包含一或多个Partation，每个Partation对应的就是HDFS的一个block。当然，Partation不是和HDFS的block绑定的，你也可以手动的对数据进行分区，即使他们只是待处理的一个本地文件或者一个小数组。 一个Partation包含一到多个Record，Record可以理解为文本中的一行，excel的一条记录或者是kafka的一条消息。 Task：RDD的一个Patation对应一个Task,Task是单个分区上最小的处理单元。  RDD pass
SparkStreaming pass
SparkStreaming&#43;Kafka import org.apache.kafka.clients.consumer.ConsumerRecord import org.apache.kafka.common.serialization.StringDeserializer import org.apache.spark.streaming.kafka010._ import org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent import org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe val kafkaParams = Map[String, Object]( &amp;#34;bootstrap.servers&amp;#34; -&amp;gt; &amp;#34;localhost:9092,anotherhost:9092&amp;#34;, &amp;#34;key.deserializer&amp;#34; -&amp;gt; classOf[StringDeserializer], &amp;#34;value.deserializer&amp;#34; -&amp;gt; classOf[StringDeserializer], &amp;#34;group.id&amp;#34; -&amp;gt; &amp;#34;use_a_separate_group_id_for_each_stream&amp;#34;, &amp;#34;auto.offset.reset&amp;#34; -&amp;gt; &amp;#34;latest&amp;#34;, &amp;#34;enable.auto.commit&amp;#34; -&amp;gt; (false: java.lang.Boolean) ) val topics = Array(&amp;#34;topicA&amp;#34;, &amp;#34;topicB&amp;#34;) val stream = KafkaUtils.createDirectStream[String, String]( streamingContext, PreferConsistent, Subscribe[String, String](topics, kafkaParams) ) stream.map(record =&amp;gt; (record.key, record.value)) DStream的elements:record is ConsumerRecord&amp;lt;K,V&amp;gt;: A key/value pair to be received from Kafka. This consists of a topic name and a partition number, from which the record is being received and an offset that points to the record in a Kafka partition.包含key(),offset(),partation()方法等。
 当一个StreamingContext中有多个input stream时，记得保证给程序分配了足够的资源（特别是core的数量，必须大于输入源的数量）。 本地执行程序时，不要使用“local” or “local[1]” as the master URL，streaming程序至少需要两个thread，一个接受数据，一个处理数据。直接使用local[n],n&amp;gt;输入源个数。 DStream 和RDD一样支持各种trans和action DStream is batches of RDDs.  常见错误 dstream.foreachRDD { rdd =&amp;gt; val connection = createNewConnection() // executed at the driver  rdd.foreach { record =&amp;gt; connection.send(record) // executed at the worker  } } // 上面的写法会导致connection 不可序列化的错误。因为connection需要被发送到worker上，所以必须可以序列化； // 但是这样的连接对象其实非常少的（第三方库一般都不支持）； dstream.foreachRDD { rdd =&amp;gt; rdd.foreach { record =&amp;gt; val connection = createNewConnection() connection.send(record) connection.close() } } // 上面是给每个record处理时新建一个连接，会导致严重的性能问题。 // 更好的方式是给每个partation新建一个连接  dstream.foreachRDD { rdd =&amp;gt; rdd.foreachPartition { partitionOfRecords =&amp;gt; val connection = createNewConnection() partitionOfRecords.foreach(record =&amp;gt; connection.send(record)) connection.close() } } // 最好的方法是维护一个静态线程池： dstream.foreachRDD { rdd =&amp;gt; rdd.foreachPartition { partitionOfRecords =&amp;gt; // ConnectionPool is a static, lazily initialized pool of connections  val connection = ConnectionPool.getConnection() partitionOfRecords.foreach(record =&amp;gt; connection.send(record)) ConnectionPool.returnConnection(connection) // return to the pool for future reuse  } } Note that the connections in the pool should be lazily created on demand and timed out if not used for a while. This achieves the most efficient sending of data to external systems.  DStream的RDD分区数是由topic分区数相同的。  最佳实践 </content>
    </entry>
    
     <entry>
        <title>单元测试如何Mock有参数的void方法</title>
        <url>https://zhimoe.github.io/post/how-test-void-method-with-parameter/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>java</tag><tag>test</tag>
        </tags>
        <content type="html"> 假设有如下的服务依赖：
@Service class DepositSvc { @Autowired private AccountSvc accSvc; public List&amp;lt;Account&amp;gt; dps(String user) { List&amp;lt;Account&amp;gt; accounts = new ArrayList(); List&amp;lt;Account&amp;gt; banks = getBanks(); accSvc.addLinkedAccounts(user, accounts, banks);//accounts被改动了如何mock?  return accounts; } } @Service class AccountSvc { @Autowired private RestClient restClient; public void addLinkedAccounts(String user, List&amp;lt;Account&amp;gt; accounts, List&amp;lt;Account&amp;gt; banks) { acc = restClient.getAcc(user); accounts.add(acc); } } 这里的AccountSvc只是提供了一个void方法处理了入参accounts，虽然修改入参是被我所不齿的，但是有时改写这类方法挺麻烦的，特别如果方法修改了两个入参的话。 这种情况下如何测试DepositSvc.dps方法呢? mockito的 doAnswer就是用于模拟void方法回调的。
class DepositSvcTest { @InjectMocks private DepositSvc depositSvc; @Mock private AccountSvc accountSvc; void test_dps() { // ... arrange  // mock void method with arguments  doAnswer((invocation) -&amp;gt; { Object[] args = invocation.getArguments(); List&amp;lt;Account&amp;gt; accounts = (List&amp;lt;Account&amp;gt;) args[1]; //这里可以拿到入参  accounts.add(new Account(911); //修改入参  return null; }).when(accountSvc).addLinkedAccounts(any(), anyList(), anyList()); // ...assert  } } </content>
    </entry>
    
     <entry>
        <title>java generic</title>
        <url>https://zhimoe.github.io/post/java-generic/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> 泛型 // 类 class Tuple&amp;lt;T, S&amp;gt; { private T first; private S second; } // 泛型方法也可在非泛型类里面 class ArrayAlg { public static &amp;lt;T&amp;gt; T getMiddle(T... a) { return a[a.length / 2]; } } String middle = ArrayAlg.&amp;lt;String&amp;gt;getMiddle(&amp;#34;]ohnM, &amp;#34;Q.n, &amp;#34;Public&amp;#34;);// right,&amp;lt;String&amp;gt;可以省略  String middle = GenericCls.getMiddle(&amp;#34;hello&amp;#34;,0,null);// error  // Errr:(7, 45) java: 不兼容的类型: 推断类型不符合上限 // 推断: java.lang.Object&amp;amp;java.io.Serializable&amp;amp;java.lang.Comparable&amp;lt;? extends java.lang.Object&amp;amp;java.io.Serializable&amp;amp;java.lang.Comparable&amp;lt;?&amp;gt;&amp;gt; // 上限: java.lang.String,java.lang.Object 类型限定 public static &amp;lt;T extends Comparable&amp;gt; T min(T a) // 如果多个类型，则：T extends Comparable &amp;amp; Serializable // 只能有一个类，且类必须紧跟extends，但是可以有多个接口  类型擦除 //Tuple&amp;lt;T,S&amp;gt;在虚拟机变为 class Tuple { private Object first;//当调用getFirst时,则发生强制转换  private Object second; } //泛型方法同样有擦除 public static &amp;lt;T extends Comparable&amp;gt; T min(T a) // =&amp;gt; public static Comparable min(Comparable a) 约束  不能用基本类型实例化泛型,Pair&amp;lt;double&amp;gt;不允许 运行时参数类型检查只能检查原始类型  if (a instanceof Pair&amp;lt;String&amp;gt;) // Error if (a instanceof Pair&amp;lt;T&amp;gt;) // Error Pair&amp;lt;String&amp;gt; p = (Pair&amp;lt;String&amp;gt;) a; //warning  不能创建参数化类型的数组  Pair&amp;lt;String&amp;gt;[] table = new Pair&amp;lt;String&amp;gt;[10]; // Error Pair&amp;lt;String&amp;gt;[] table; //声明是合法的,只是无法实例化  借助@SafeVarargs参数化类型的数组  @SafeVarargs public static &amp;lt;T&amp;gt; void addAll(Collection&amp;lt;T&amp;gt; coll, T... ts)  Class类本身是泛型。 例如，String.daSS 是一个 Class的实例（事实上，它是唯一的实例。) 因此，makePair 方法能够推断出 pair 的类型 泛型类的静态上下文中类型变量无效  public class Singleton&amp;lt;T&amp;gt; { private static T singlelnstance; // Error  public static T getSinglelnstance{// Error  if (singleinstance == null) {//construct new instance of T  return singlelnstance; } } }  不能抛出或捕获泛型类的实例  public class Problem&amp;lt;T&amp;gt; extends Exception { /* . . . */ } // Error can&amp;#39;t extend Throwable  泛型擦除的方法冲突  public class Pair&amp;lt;T&amp;gt; { T first; T second; public boolean equals(T value) { //error 和Object.equals冲突  return first.equals(value) &amp;amp;&amp;amp; second, equals(value); } } 泛型继承 class Employee class Manager extends Employee //Pair&amp;lt;Employee&amp;gt; 和Pair&amp;lt;Manager&amp;gt; 没用任何继承关系  通配符 和 PECS Pair&amp;lt;? extends Employee〉 Pair&amp;lt;? super Manager 反射和泛型 </content>
    </entry>
    
     <entry>
        <title>IO-Java-Stream-Write-Reader</title>
        <url>https://zhimoe.github.io/post/io-java-stream-write-reader/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> java reader writer stream 上次总结了java 678 中不同读写文件的方法，这次总结一下基本的IO流。网上的总结大部分是以Stream和Reader、Writer来介绍的。这次从封装层次来介绍。
首先是byte流，每次read()读取8 bits，并用一个int的低八位保存：
FileInputStream in = null; FileOutputStream out = null; try { in = new FileInputStream(&amp;#34;xanadu.txt&amp;#34;); out = new FileOutputStream(&amp;#34;outagain.txt&amp;#34;); int c; while ((c = in.read()) != -1) { out.write(c); } } finally { if (in != null) { in.close(); } if (out != null) { out.close(); } } byte流是很基础的流，接下来是字符流，使用int的低16位保存读取内容，一个汉字，使用上面那个字节流，需要读取2次，使用下面的字符流，只用一次。其实背后还是一个桥接 具体的对象体现： FileReader extemds InputStreamReader,
FileWriter extends OutputStreamWriter
InputStreamReader:字节到字符的桥梁
OutputStreamWriter:字符到字节的桥梁：
FileReader inputStream = null; FileWriter outputStream = null; try { inputStream = new FileReader(&amp;#34;xanadu.txt&amp;#34;); outputStream = new FileWriter(&amp;#34;characteroutput.txt&amp;#34;); int c; while ((c = inputStream.read()) != -1) { outputStream.write(c); } } finally { if (inputStream != null) { inputStream.close(); } if (outputStream != null) { outputStream.close(); } } ByteArrayInputStream、StringBufferInputStream、FileInputStream 是三种基本的介质流，它们分别从Byte 数组、StringBuffer、和本地文件中读取数据。StringBufferInputStream 已经被Deprecated，设计错误，只是为了兼容。
File I/O现在已经不推荐使用了，推荐nio2的Path及其工具类Files,Paths; Path 官方教程
ObjectInputStream 和所有FilterInputStream 的子类都是装饰流（装饰器模式的主角）
注意：OutputStream子类中没有StringBuffer为目的地的。ObjectOutputStream 和所有FilterOutputStream 的子类都是装饰流。
几个特殊的类：
PushbackInputStream 的功能是查看最后一个字节，不满意就放入缓冲区。主要用在编译器的语法、词法分析部分。输出部分的BufferedOutputStream 几乎实现相近的功能。
PrintStream 也可以认为是一个辅助工具。主要可以向其他输出流，或者FileInputStream 写入数据，本身内部实现还是带缓冲的。本质上是对其它流的综合运用的一个工具而已。一样可以踢出IO 包！System.out 和System.err 就是PrintStream 的实例！ System.in是inputStream的实例！ 你永远不应该new PrintStream,请用PrintWriter
看看字符流的对比： CharReader、StringReader 是两种基本的介质流，它们分别将Char 数组、String中读取数据。PipedReader 是从与其它线程共用的管道中读取数据。
BufferedReader 很明显就是一个装饰器，它和其子类负责装饰其它Reader 对象。
FilterReader 是所有自定义具体装饰流的父类，其子类PushbackReader 对Reader 对象进行装饰，会增加一个行号。
InputStreamReader 是一个连接字节流和字符流的桥梁，它将字节流转变为字符流。FileReader 可以说是一个达到此功能、常用的工具类，在其源代码中明显使用了将FileInputStream 转变为Reader 的方法。我们可以从这个类中得到一定的技巧。Reader 中各个类的用途和使用方法基本和InputStream 中的类使用一致。后面会有Reader 与InputStream 的对应关系。
OutputStreamWriter 是OutputStream 到Writer 转换的桥梁，它的子类FileWriter 其实就是一个实现此功能的具体类（具体可以研究一SourceCode）。功能和使用和OutputStream 极其类似，后面会有它们的对应图。
PrintWriter 和PrintStream 极其类似，功能和使用也非常相似。但是还是有不同的，PrintStream prints to an OutputStream, and PrintWriter prints to a Writer.
你永远不应该new PrintStream,请用PrintWriter
PrintStream stream = new PrintStream(outputStream); //With the PrintWriter you can however pass an OutputStreamWriter with a specific encoding. PrintWriter writer = new PrintWriter(new OutputStreamWriter(outputStream, &amp;#34;UTF-8&amp;#34;)); Piped流 这是线程之间通信使用的。后面介绍。
RandomAccessFile类 该对象并不是流体系中的一员，其封装了字节流，同时还封装了一个缓冲区（字符数组），通过内部的指针来操作字符数组中的数据。 该对象特点：
该对象只能操作文件，所以构造函数接收两种类型的参数：a.字符串文件路径；b.File对象。
该对象既可以对文件进行读操作，也能进行写操作，在进行对象实例化时可指定操作模式(r,rw)
注意：该对象在实例化时，如果要操作的文件不存在，会自动创建；如果文件存在，写数据未指定位置，会从头开始写，即覆盖原有的内容。 可以用于多线程下载或多个线程同时写数据到文件。
Scanning and formatting The scanner API breaks input into individual tokens associated with bits of data,The formatting API assembles data into nicely formatted, human-readable form.
formatting
int i = 2; double r = Math.sqrt(i); System.out.format(&amp;#34;The square root of %d is %f.%n&amp;#34;, i, r); Scanner s = new Scanner(new BufferedReader(new FileReader(&amp;#34;xanadu.txt&amp;#34;))); By default, a scanner uses white space to separate tokens. also,u can set : s.useDelimiter(&amp;quot;,\\s*&amp;quot;);
I/O from commandline You might expect the Standard Streams to be character streams, but, for historical reasons, they are byte streams. System.out and System.err are defined as PrintStream objects. Although it is technically a byte stream, PrintStream utilizes an internal character stream object to emulate many of the features of character streams.
By contrast, System.in is a byte stream with no character stream features. To use Standard Input as a character stream, wrap System.in in InputStreamReader.
InputStreamReader cin = new InputStreamReader(System.in);
！！！！妈的，老子开始就困惑很久了，一直不明白System.out怎么可以直接打印出中文。
jdk1.5开始读写控制台以前常用的是Scanner：
Scanner scanner = new Scanner(System.in); scanner.nextLine(); 从 JDK1.6开始，基本类库中增加了java.io.Console 类，用于获得与当前 Java 虚拟机关联的基于字符的控制台设备。在纯字符的控制台界面下，可以更加方便地读取数据。
Console console = System.console(); if (console == null) { throw new IllegalStateException(&amp;#34;不能使用控制台&amp;#34;); } return console.readLine(prompt); Data Streams Data streams support binary I/O of primitive data type values (boolean, char, byte, short, int, long, float, and double) as well as String values. All data streams implement either the DataInput interface or the DataOutput interface. This section focuses on the most widely-used implementations of these interfaces, DataInputStream and DataOutputStream.
致谢：Oubo的博客
</content>
    </entry>
    
     <entry>
        <title>Java-6-7-8-文件读写</title>
        <url>https://zhimoe.github.io/post/io-java-6-7-8-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html">  重要的类 文件读写场景  资料：Reading and writing text files
不要用File对象，改用Path对象，该对象既表示文件路径，也表示文件文本（应该认为文件也是路径的一部分），对于以前的File,可以File.toPath()得到一个Path对象。 Files是一个静态类，操作文件内容。Paths是静态工具类，操作文件路径，例如拼接文件路径，以前要使用平台无关的分隔符表示：File.pathSeparator， File.separator
现在可以直接使用下面方法
Path path = Paths.get(&amp;quot;~/test/&amp;quot;, &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;a.txt&amp;quot;);
下面一段代码很好的显示了在java678中的读取文件方法：
package angus.java.interview; import java.io.BufferedReader; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.nio.charset.StandardCharsets; import java.nio.file.Files; import java.nio.file.Paths; public class FileToStringJava678 { public static void main(String[] args) throws IOException { // How to read file into String before Java 7 	InputStream is = new FileInputStream(&amp;#34;filetoStringjava678.txt&amp;#34;); BufferedReader buf = new BufferedReader(new InputStreamReader(is)); String line = buf.readLine(); StringBuilder sb = new StringBuilder(); while (line != null) { sb.append(line).append(&amp;#34;\n&amp;#34;); line = buf.readLine(); } String fileAsString = sb.toString(); System.out.println(&amp;#34;Contents (before Java 7) : &amp;#34; &#43; fileAsString); // Reading file into Stirng in one line in JDK 7 	String contents = new String(Files.readAllBytes(Paths.get(&amp;#34;filetoStringjava678.txt&amp;#34;))); System.out.println(&amp;#34;Contents (Java 7) : &amp;#34; &#43; contents); // Reading file into String using proper character encoding 	String fileString = new String(Files.readAllBytes(Paths.get(&amp;#34;filetoStringjava678.txt&amp;#34;)), StandardCharsets.UTF_8); System.out.println(&amp;#34;Contents (Java 7 with character encoding ) : &amp;#34; &#43; fileString); // It&amp;#39;s even easier in Java 8 	Files.lines(Paths.get(&amp;#34;filetoStringjava678.txt&amp;#34;), StandardCharsets.UTF_8).forEach(System.out::println); } } 下面是更新版本，几乎所有文件操作都有了
// 记住，bytes 到string 永远指定字符集，即使目前只是英文文件。 // ### java 8按行读取：  public class Main { public static void main(String[] args) { String fileName = &amp;#34;c:/lines.txt&amp;#34;; try (Stream&amp;lt;String&amp;gt; stream = Files.lines(Paths.get(fileName))) { stream.forEach(System.out::println);//or other thing you do with stream  } catch (IOException e) { e.printStackTrace(); } } } // ### java 7：  BufferedReader br = new BufferedReader(new FileReader(file)); String line; while((line = br.readLine()) != null) { // do something with line.  } // 输入流保存到文件： Files.copy(inputStream,filepath,StandardCopyOption.REPLACE_EXISTING); public class Java7IO { public static void main(String[] args) throws IOException { //读取所有字节：  Path path = Paths.get(&amp;#34;alice.txt&amp;#34;); String content = new String(Files.readAllBytes(path), StandardCharsets.UTF_8); System.out.println(&amp;#34;Characters: &amp;#34; &#43; content.length()); //读取所有行：  List&amp;lt;String&amp;gt; lines = Files.readAllLines(path, StandardCharsets.UTF_8); System.out.println(&amp;#34;Lines: &amp;#34; &#43; lines.size()); //JAVA 8 延迟处理：  try (Stream&amp;lt;String&amp;gt; lineStream = Files.lines(path, StandardCharsets.UTF_8)) { System.out.println(&amp;#34;Average line length: &amp;#34; &#43; lineStream.mapToInt(String::length).average().orElse(0)); } //按单词读取：  try (Scanner in = new Scanner(path, &amp;#34;UTF-8&amp;#34;)) { in.useDelimiter(&amp;#34;\\PL&#43;&amp;#34;);//？  int words = 0; while (in.hasNext()) { in.next(); words&#43;&#43;; } System.out.println(&amp;#34;Words: &amp;#34; &#43; words); } //读取一个网页：  URL url = new URL(&amp;#34;http://horstmann.com/index.html&amp;#34;); try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))) { Stream&amp;lt;String&amp;gt; lineStream = reader.lines();////!!!! BufferedReader TO Stream  System.out.println(&amp;#34;Average line length: &amp;#34; &#43; lineStream.mapToInt(String::length).average().orElse(0)); } //PrintWriter 向文本写文件：  path = Paths.get(&amp;#34;hello.txt&amp;#34;); try (PrintWriter out = new PrintWriter(Files.newBufferedWriter(path, StandardCharsets.UTF_8))) { out.println(&amp;#34;Hello&amp;#34;); } //Files.write向文本写文件：  content = &amp;#34;World\n&amp;#34;; Files.write(path, content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND); //多行写入  String fileName = &amp;#34;file.txt&amp;#34;; Path path = Paths.get(&amp;#34;file1.txt&amp;#34;); List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); try (Stream&amp;lt;String&amp;gt; lines = Files.lines(Paths.get(fileName))) { lines.forEach(list::add); Files.write(path, list, StandardCharsets.UTF_8); } catch (IOException e) { e.printStackTrace(); } //打印错误栈：  StringWriter writer = new StringWriter(); Throwable throwable = new IllegalStateException(); throwable.printStackTrace(new PrintWriter(writer)); String stackTrace = writer.toString(); System.out.println(&amp;#34;Stack trace: &amp;#34; &#43; stackTrace); } } // 直接将url中的pdf保存下来：//适用于任何二进制文件：URL url = new URL(&amp;#34;http://www.cninfo.com.cn/1202417936.PDF&amp;#34;); try (InputStream in = new BufferedInputStream(url.openStream())) { Files.copy(in, Paths.get(url.getFile().substring(1)),StandardCopyOption.REPLACE_EXISTING); }//url.getFile().substring(1)去掉起始地斜杠符 //copy()有三种形式 	//还有一种方式jdk7之前： URL website = new URL(&amp;#34;XXX.pdf&amp;#34;); ReadableByteChannel rbc = Channels.newChannel(website.openStream()); FileOutputStream fos = new FileOutputStream(url.getFile().substring(1)); fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE); //FileChannel的抽象方法abstract long	transferFrom(ReadableByteChannel src, long position, long count)  </content>
    </entry>
    
     <entry>
        <title>gradle笔记1-理解build脚本基本语法</title>
        <url>https://zhimoe.github.io/post/gradle-%E7%90%86%E8%A7%A3build%E8%84%9A%E6%9C%AC%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> 在看这个之前，希望你有用ant或者maven的使用经验，还有，对groovy的语法有一个简单的了解，不懂也没关系，下面会介绍。 理解gradle文件的前提是理解一个重要的groovy概念:closure
closure 一个closure是一个定义在groovy文件中的{}代码块，这个代码块类似js中的匿名函数，它可以被赋值给变量，可以被调用，可以接收参数，还可以作为参数传递给别的函数。
closure中最重要的两个概念是委托对象和作为参数传递的语法格式（理解gradle文件很重要）。
groovy方法调用括号的省略 groovy提供非常优雅的方法调用格式，总结起来是:
//可以省略参数括号，并且链式调用 // equivalent to: turn(left).then(right) turn left then right //groovy数字可以直接转换成字符串 // equivalent to: take(2.pills).of(chloroquinine).after(6.hours) take 2.pills of chloroquinine after 6.hours //两个参数用逗号隔开 // equivalent to: paint(wall).with(red, green).and(yellow) paint wall with red, green and yellow //命名参数用冒号 // with named parameters too // equivalent to: check(that: margarita).tastes(good) check that: margarita tastes good //闭包作为参数也可以省略括号 // with closures as parameters // equivalent to: given({}).when({}).then({}) given { } when { } then { } //没有参数的方法必须有括号 // equivalent to: select(all).unique().from(names) select all unique() from names //如果调用链元素为奇数，那么最后一个元素是前面方法链返回对象的属性 //cookies 是take(3)返回值的一个属性 // equivalent to: take(3).cookies // and also this: take(3).getCookies() take 3 cookies 上面调用的格式是dsl的基础。也是看懂gradle文件格式的基础。
让我们再深入一点，上面讲的是调用格式，那么怎么创建这种可以链式调用的方法呢？
 groovy和scala的方法返回值不需要return，最后一行就是返回值。 closure是一个匿名函数，格式{ [closureParameters -&amp;gt; ] statements }，默认自带一个名为it的参数，所以只接受一个参数时可以省略-&amp;gt;。 closure可以访问scope（作用域）内任何变量。并且这个scope是可以通过委托来改变的。 groovy中Map对象的value如果是closure，那么可以接着调用:mapp.keyy({closure})  有了上面的基础，我们看一个简单的例子:  //将closure赋值给一个变量，这个closure接收一个参数，参数名是默认的，it show = { println it } square_root = { Math.sqrt(it) } //为了容易理解，我将参数的type都添加上了， //please方法需要一个closure，接着返回一个map，map的key是the，value是一个closure， //这个closure接收一个closure，并返回一个map，这个map的of的value又是一个closure(不要晕了) //最后一个closure接收一个参数n。 def please(Closure action) { [the: { Closure what -&amp;gt; [of: { n -&amp;gt; action(what(n)) }] }] } //调用: // 等价: please(show).the(square_root).of(100) please show the square_root of 100 // ==&amp;gt; 10.0  总结一下就是，将你需要的操作封装成一个closure，给一个直观的命名，保证整个DSL调用语句有语义，定义返回一个map的函数作为入口，map的key是方法名，value是closure，这样可以在key后面传递一个closure接着调用这个value。
委托对象 gradle脚本是一个配置脚本，类似maven中pom.xml文件，不过gradle脚本更为强大，因为.gradle文件就是grrovy文件，所以还可以在脚本里面直接定义groovy对象让脚本使用。 委托对象就是一个groovy对象，用来执行gradle构建脚本中的closure。
as a build script executes, it configures an object of type Project. This object is called the delegate object of the script. The following table shows the delegate for each type of Gradle script. 三种不同的gradle脚本对应的委托对象 Build script（build.gradle） -&amp;gt;Project Init script	-&amp;gt;Gradle Settings script(setting.gradle)	-&amp;gt;Settings 构建中的每一个project，Gradle都会创建一个Project对象，并将这个对象与构建脚本相关联。
Project对象与build.gradle是一对一的关系。
Gradle的脚本是配置脚本，当脚本执行时，它是在配置某一个特殊类型的对象。比如一个构建脚本的执行，它就是在配置一个Project类型的对象。这个对象叫做脚本的代理对象。
委托有个重要的概念就是scope，指closure的变量引用范围:有时变量不在当前scope中，但是可以通过委托，改变closure的委托对象，这样就拥有了委托者的scope，从而可以在closure中使用委托者的变量。
关于groovy closure 的委托有三个重要属性
• this: refers to the instance of the class that the closure was defined in. • owner: is the same as this, unless the closure was defined inside another closure in which case the owner refers to the outer closure. • delegate: is the same as owner. But, it is the only one that can be programmatically changed, and it is the one that makes Groovy closures really powerful. the closure itself will be checked first, followed by the closure&amp;#39;s this scope, than the closure&amp;#39;s owner, then its delegate. However, Groovy is so flexible this strategy can be changed. Every closure has a property called resolvedStrategy. This can be set to: • Closure.OWNER_FIRST • Closure.DELEGATE_FIRST • Closure.OWNER_ONLY • Closure.DELEGATE_ONLY 来自 &amp;lt;https://dzone.com/articles/groovy-closures-owner-delegate&amp;gt; gradle是dsl解析工具，是对groovy语法的扩展，build.gradle可以理解为就是一个.groovy文件，gradle会解析这个文件，发现里面的closure，并将这些closure委托给一个对象去执行。 gradle将groovy的委托机制发挥到极致，要理解gradle内部，就要理解closure的委托！！
closure作为参数传递 将closure作为参数传递的方法有多种:
//method accepts 1 parameter - closure myMethod(myClosure) //if method accepts only 1 parameter - parentheses can be omitted myMethod myClosure //I can create in-line closure myMethod {println &amp;#39;Hello World&amp;#39;} //method accepts 2 parameters myMethod(arg1, myClosure) //or the same as &amp;#39;4&amp;#39;, but closure is in-line myMethod(arg1, { println &amp;#39;Hello World&amp;#39; }) //if last parameter is closure - it can be moved out of parentheses myMethod(arg1) { println &amp;#39;Hello World&amp;#39; } 注意第三种和最后一种调用方式，是不是和gradle文件中很眼熟？只不过在gradle脚本中出现的closure更加复杂，因为有closure嵌套！！！但是万变不离其宗。下面我们会介绍嵌套不过是委托链的表现。
看一个脚本代码:
buildscript { repositories { jcenter() } dependencies { classpath &amp;#39;com.android.tools.build:gradle:1.2.3&amp;#39; } } buildscript是一个方法，接收一个closure。至于这个方法在哪，可以定义在任何地方，但是可以肯定的是，这个方法一定能够被Project对象调用。 因为build.gradle脚本就是委托给Project对象执行的。事实上，Project对象也不是亲自执行这个方法，而是委托给ScriptHandler执行。 这里，我们ScriptHandler对象会搜索到两个配置closure:repositories和dependencies。我们可以在ScriptHandler api中搜索到这两个方法。从api中我们又发现:
传递给dependencies的closure又被委托给了DependencyHandler对象&amp;hellip;&amp;hellip;. 这就是委托链。
ScriptHandler api
Project api
注意:这里buildscript {&amp;hellip;}整体称为一个 script block。 脚本块就是一个接受closure参数的方法调用。还有的方法是不接受closure的，那些称为statement（看下面解释）。
 A script block is a method call which takes a closure as a parameter
 插件 先看看构建脚本的构成:
 A build script is made up of zero or more statements and script blocks. Statements can include method calls, property assignments, and local variable definitions. A script block is a method call which takes a closure as a parameter. The closure is treated as a configuration closure which configures some delegate object as it executes.
 就是说脚本有两种内容:script block和statement. Project接口预先定义了几个block:
allprojects { }	Configures this project and each of its sub-projects. artifacts { }	Configures the published artifacts for this project. buildscript { }	Configures the build script classpath for this project. configurations { }	Configures the dependency configurations for this project. dependencies { }	Configures the dependencies for this project. repositories { }	Configures the repositories for this project. sourceSets { }	Configures the source sets of this project. subprojects { }	Configures the sub-projects of this project. publishing { }	Configures the PublishingExtension added by the publishing plugin. 这些closure参数基本都是委托给其他对象执行的。
可以看到，Project对象的方法是有限而且通用的。真正有用的是插件，gradle的很多功能也是通过官方写的插件提供的。 如果你看到一个顶级层的something { ... }block，但是在Project源码中没有找到something block的任何信息。那么这个方法就是通过插件提供的。gradle自带很多插件,像java，eclipse,groovy，android等。 看一个实际的例子: 在andoird开发中的构建脚本:
apply plugin: &amp;#39;com.android.application&amp;#39; android { compileSdkVersion 22 buildToolsVersion &amp;#34;22.0.1&amp;#34; defaultConfig { applicationId &amp;#34;com.trickyandroid.testapp&amp;#34; minSdkVersion 16 targetSdkVersion 22 versionCode 1 versionName &amp;#34;1.0&amp;#34; } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39; } } } 这里，出现了android{},Project对象并没有这个script block。所以，这其实是由插件提供的block。我们找到com.android.application入口代码
extension = project.extensions.create(&amp;#39;android&amp;#39;, AppExtension, this, (ProjectInternal) project, instantiator, buildTypeContainer, productFlavorContainer, signingConfigContainer) setDefaultConfig(extension.defaultConfig, extension.sourceSetsContainer) extensions是一个ExtensionContainer实例，其中create API:
&amp;lt;T&amp;gt; T	create(String name, Class&amp;lt;T&amp;gt; type, Object... constructionArguments) 这里就创建了一个android属性，是一个AppExtension对象，我们在脚本中提供给android block的{}其实是配置了一个AppExtension对象。我们可以在AppExtension中找到compileSdkVersion等属性。
所以，插件扩展的Project对象，提供了很多方法，这样，可以在脚本中使用插件定义的方法（script block）了。
一个插件就是实现实现了org.gradle.api.Plugin接口的groovy类。
我们看怎么写一个插件:
//build.gradle apply plugin: GreetingPlugin //这里提供closure 来配置插件提供的greeting script block greeting { message = &amp;#39;Hi&amp;#39; greeter = &amp;#39;Gradle&amp;#39; } class GreetingPlugin implements Plugin&amp;lt;Project&amp;gt; { void apply(Project project) {//注意我们是如果扩展Project对象的，通过extensions对象创建一个script block:greeting,而这个block关联的是一个对象  project.extensions.create(&amp;#34;greeting&amp;#34;, GreetingPluginExtension) project.task(&amp;#39;hello&amp;#39;) &amp;lt;&amp;lt; { //注意我们是如何使用greeting的，没有通过extensioins  println &amp;#34;${project.greeting.message} from ${project.greeting.greeter}&amp;#34; } } } class GreetingPluginExtension { String message String greeter } /* project.task(&amp;#39;hello&amp;#39;) &amp;lt;&amp;lt; { println &amp;#34;${project.greeting.message} from ${project.greeting.greeter}&amp;#34; } 使用了重载操作符，等价: project.task(&amp;#39;hello&amp;#39;).leftShift({ println &amp;#34;${project.greeting.message} from ${project.greeting.greeter}&amp;#34; }) */ 官方文档:如何自己写一个插件
#####参考: gradle-tip-2
Gradle深入与实战（六）Gradle的背后是什么？
DSL语法 gradle使用的基于groovy中的DSL语法，所谓的dsl，就是基于groovy发明的新的“编程语言”，gradle dsl是groovy的超集，就是你可以完全使用groovy的语法，但是你还是会看到很多不是groovy语法，这时不要困惑，这些语法不过是gradle利用groovy提供的元编程能力提供的新语法。 以新建task的语法为例，在Project API中有四个重载形式:
Task task(String name, Closure configureClosure); Task task(Map&amp;lt;String, ?&amp;gt; args, String name, Closure configureClosure); Task task(Map&amp;lt;String, ?&amp;gt; args, String name) throws InvalidUserDataException; Task task(String name) throws InvalidUserDataException; 但是你会看到这样的调用方式:
task intro(dependsOn: hello) { doLast { println &amp;#34;I&amp;#39;m Gradle&amp;#34; } } 这是dsl，具体的解析方式在TaskDefinitionScriptTransformer
具体见我在sf的提问gradle task method syntax in build.gradle
more tips gradle-tips
</content>
    </entry>
    
     <entry>
        <title>Java AOP example</title>
        <url>https://zhimoe.github.io/post/java-aop-example/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> 找到一个最简单的介绍，不怎么想翻译，直接看原文吧:
A Simple Introduction to AOP
提醒个点，使用注解的方式写切面时，增加了一个空方法，即：
@Pointcut(&amp;#34;execution(* org.bk.inventory.service.*.*(..))&amp;#34;) public void serviceMethods(){ } 在使用xml配置的话，就不需要这个方法了，serviceMethods方法名是后面配置切点的引用。
如果不想引入spring的话，可以直接使用aspectj或者jboss aop。
</content>
    </entry>
    
     <entry>
        <title>Java concurrency 1 basic</title>
        <url>https://zhimoe.github.io/post/java-concurrency-1-basic/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> 知识点太多了。先列举一些知识点，然后在分别做一点笔记。
模式 1。 共享可变性
2。 隔离可变性
3。 纯粹不可变性:STM,
IO密集型任务和计算密集型任务 读写文件和网络请求这种算IO密集型任务，阻塞时间长，任务阻塞系数接近1；线程池大一点好， 判断质数的这种任务属于计算密集型任务，阻塞系数约为0。
poolSize = cores/(1-blockingCofficient); cores 是处理器核心数。
场景：
根据网络服务api计算给定股票代码和股票数的资产总值。-IO密集
判断n以内的所有素数。 &amp;ndash; 计算密集
Java5以前的一些同步方法api 尽量不要使用，但是要理解。wait/notify、join等函数，synchronized volatile关键字的理解。笔记
 用ExecutorService代替Thread及其方法。笔记 用Lock和子类的方法代替synchronized。但是不绝对。 笔记 以前用wait/notify的地方，现在可以用CyclicBaerrier和CountDownLatch同步工具代替。笔记  同步容器和并发容器 同步容器包括Vector和Hashtable(java.util.Properties 也是一个HashTable)，使用synchronized同步。不建议使用，但是要知道HashTable和HashMap区别：
Java 中 HashMap 和 HashTable 有几个不同点：
 Hashtable 是同步的，然而 HashMap 不是。 这使得HashMap更适合非多线程应用，因为非同步对象通常执行效率优于同步对象。 Hashtable 不允许 null 值和键。HashMap允许有一个 null 键和一个 NULL 值。 HashMap的一个子类是LinkedHashMap。所以，如果想预知迭代顺序（默认的插入顺序），只需将HashMap转换成一个LinkedHashMap。用Hashtable就不会这么简单。 如果同步对你来说不是个问题，我推荐使用HashMap。如果同步成为问题，你可能还要看看ConcurrentHashMap。  迭代hashmap最佳方式：
Iterator it = mp.entrySet().iterator(); while (it.hasNext()) { Map.Entry pair = (Map.Entry)it.next(); System.out.println(pair.getKey() &#43; &amp;#34; = &amp;#34; &#43; pair.getValue()); it.remove(); // avoids a ConcurrentModificationException } 并发容器是和java.util.concurrent包一块发布的。包括很多新的并发容器：
并发容器架构图
图中最底部的都是jdk1.5增加的并发容器：主要有：ConcurrentHashMap,CopyOnWriteList, BlockingQueue等。
参考书籍： Doug Lea 《Concurrent Programming in Java》 2004
Brian Goetz 《java concurrency in practice》 2007
Venkat 《Programming concurrency on the JVM》
</content>
    </entry>
    
     <entry>
        <title>Java concurrency 2 Runnable Callable FutureExecutor</title>
        <url>https://zhimoe.github.io/post/java-concurrency-2-runnable-callable-future-executor/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> 定义任务的内容 多线程编程的核心元素就是任务，任务是独立的活动。不依赖其他任务的状态，结果，以及边界效应。
定义任务的内容使用Runnable和Callable。
Runnable 接口表示没有返回的一个过程（procedure），没有受检异常。
Callabe 接口的call方法会返回一个结果，并有可能抛出受检异常。如果要表示没有返回值，可以使用Callable&amp;lt;Void&amp;gt; ,但是不鼓励使用这个代替Runable，但一个任务内容没有返回值，只是利用副作用时，应该优先使用Runable，使得含义清晰，并且JDK中ScheduledExecutorService也有只能接收Runable的方法。
可以将Runnable定义的任务提交给Thread直接运行，但是这个线程是不可重用的。更好的方法是提交给执行器ExecutorService。
Future接口描述了任务的生命周期，并提供方法获得任务执行的结果。该接口有一个实现类：FutureTask。该类的实例一定和一个具体任务相关。ExecutorService所有的submit方法都会返回一个Future实例。你也可以直接通过FutureTask构造函数将Runnable/Callable构建一个FutureTask实例。该实例将管理该任务的生命周期
注意，FutureTask 实现了Runnable和Future（通过实现RunnableFuture接口，如下），所以既可以使用ExecutorService，也可以使用Thread执行任务内容。
public class FutureTask&amp;lt;V&amp;gt; implements RunnableFuture&amp;lt;V&amp;gt; public interface RunnableFuture&amp;lt;V&amp;gt; extends Runnable, Future&amp;lt;V&amp;gt; Future.get是一个阻塞方法，如果任务没有结束或者没有抛出异常，那么会一直等待下去，如果需要异步的使用ComletionService。
ExecutorService 执行器框架，root 接口是Executor，只有一个execute方法执行runnable实例。更常用是子接口ExecutorService，除了可以执行runnable，callable，还可以invoke一callable集合：
&amp;lt;T&amp;gt; List&amp;lt;Future&amp;lt;T&amp;gt;&amp;gt;	invokeAll(Collection&amp;lt;? extends Callable&amp;lt;T&amp;gt;&amp;gt; tasks) &amp;lt;T&amp;gt; T	invokeAny(Collection&amp;lt;? extends Callable&amp;lt;T&amp;gt;&amp;gt; tasks) &amp;lt;T&amp;gt; Future&amp;lt;T&amp;gt;	submit(Callable&amp;lt;T&amp;gt; task) Future&amp;lt;?&amp;gt;	submit(Runnable task) ScheduledExecutorService The ScheduledExecutorService interface supplements the methods of its parent ExecutorService with schedule, which executes a Runnable or Callable task after a specified delay. In addition, the interface defines scheduleAtFixedRate and scheduleWithFixedDelay, which executes specified tasks repeatedly, at defined intervals.
scheduleAtFixedRate: 第一次是initialDelay 后执行，第二次是initialDelay &#43; 1 * period 后执行，类推。
scheduleWithFixedDelay: 是前面任务执行结束后开始计算间隔计时。
两个方法都不会并发执行任务，特别是第一个方法，如果任务时间比参数中等待时间period长，那么只会延期执行。对于第二个方法，本来就是要等前面结束才执行，所以没有这个问题。两个方法遇到异常，那么后面任务也不会执行，因为任务是重复的，后面也会遇到异常。周期任务可以取消，或者遇到执行器终结才结束。
CompletionService 如果有多个任务，那么ExecutorService只能不停的轮询Future看是否有任务结束，并取得结果。CompletionService则是另外是自动的告诉你那些任务结果已经准备好。注意构造方法需要一个ExecutorService
 ExecutorService = incoming queue &#43; worker threads CompletionService = incoming queue &#43; worker threads &#43; output queue
 参考
ExecutorService executor = Executors.newFixedThreadPool(numberOfThreadsInThePool); CompletionService&amp;lt;String&amp;gt; completionService = new ExecutorCompletionService&amp;lt;String&amp;gt;(executor); for (final String num: nums) { completionService.submit(new Task(num)); //Task is Callable  } try { for (int t = 0, n = nums.size(); t &amp;lt; n; t&#43;&#43;) { Future&amp;lt;String&amp;gt; f = completionService.take(); System.out.print(f.get()); } } catch (InterruptedException e) { Thread.currentThread().interrupt(); } catch (ExecutionException e) { Thread.currentThread().interrupt(); } finally { if (executor != null) { executor.shutdownNow(); } } </content>
    </entry>
    
     <entry>
        <title>Java concurrency 3 synchronized or Lock</title>
        <url>https://zhimoe.github.io/post/java-concurrency-3-synchronized-or-lock/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> synchronized method和synchronized block的区别 如果是synchronized(this),那么和synchronized 方法没有任何区别，锁定对象都是方法所在的对象。
synchronized void mymethod() { ... } void mymethod() { synchronized (this) { ... } } 但是synchronized block可以锁定其他对象，而且synchronized block的范围是可以控制更灵活，synchronized 方法的边界只能是整个方法
private void method() { // code here  // code here  // code here  synchronized( lock ) { // very few lines of code here  } // code here  // code here  // code here } 不要忘记synchronized 这个指令是JVM内置的，也是未来可以优化的。如果只是简单的同步一个资源对象，就使用synchronized，而且，使用Lock有就必须出现一堆的try/finally。
使用ReentrantLock场景：
需要以下高级特性时 ： 可定时的，可轮询的，可中断的锁，公平队列，非块结构。
stackoverflow回答
</content>
    </entry>
    
     <entry>
        <title>Java concurrency 4 CAS and atomic</title>
        <url>https://zhimoe.github.io/post/java-concurrency-4-cas-and-atomic/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> AtomicLong code: public final long incrementAndGet() { for (;;) { long current = get(); long next = current &#43; 1; if (compareAndSet(current, next)) return next; } } //in java 8: public final long incrementAndGet() { return unsafe.getAndAddLong(this, valueOffset, 1L) &#43; 1L; } 基础 第一个版本是基于cas的，cas基于一个基础：有三个值，新值N，预期内存中的值E，内存中需要更新的值V，如果V == E,那么将V设置为N,返回V，结束；如果V != E，说明有别的线程动了这个v,那么不做修改直接返回V。cas在X86下对应的是 CMPXCHG 汇编指令
java8中则使用了x86的优化指令atomic fetch-and-add ，上面的代码直接等价于cpu的一条指令atomic fetch-and-add .[性能更好](atomic fetch-and-add vs compare-and-swap)
而compareAndSet利用JNI来完成CPU指令的操作。
public final boolean compareAndSet(int expect, int update) { return unsafe.compareAndSwapInt(this, valueOffset, expect, update); } 注意 java.util.concurrent.atomic中的原子类使用了很多cas，但是这个方法一个是自己实现和使用需要很仔细，另一个在真的高并发中可能陷入死循环，因为方法中本身就是一个死循环：for (;;).java8为此提供了LongAdder.
关于垃圾自动回收的语言不会出现cas中aba问题的原理：stackoverflow
</content>
    </entry>
    
     <entry>
        <title>Java concurrency 5 Synchronizer and AQS</title>
        <url>https://zhimoe.github.io/post/java-concurrency-5-synchronizer-and-aqs/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> 好难，看不懂呀！ 先自己写一个CountDownLatch的示例： CountDownLatch是管理一组线程和一个主线程的先后。主线程wait后就阻塞，直到所有的CountDownLatch调用countDown后主线程接着开始。
package angus.intrview.concurrent; import java.util.concurrent.CountDownLatch; import java.util.concurrent.TimeUnit; public class CountDownLatchTest { // 这个方法将启动多个任务，并让它们同时执行，计算完成的时间 	public long timer(int taskNums) throws InterruptedException { CountDownLatch startLatch = new CountDownLatch(1); CountDownLatch finishLatch = new CountDownLatch(taskNums); for (int i = 0; i &amp;lt; taskNums; i&#43;&#43;) { Task task = new Task(startLatch, finishLatch, i); new Thread(task).start(); } long start = System.nanoTime(); startLatch.countDown();// 准备好线程后开始同时启动所有任务 	finishLatch.await();// 等待任务完成 	long end = System.nanoTime(); return end - start; } public static void main(String[] args) throws InterruptedException { CountDownLatchTest ct = new CountDownLatchTest(); long time = ct.timer(100); System.out.println(TimeUnit.NANOSECONDS.toSeconds(time) &#43; &amp;#34; SENCODS&amp;#34;); } } class Task implements Runnable { CountDownLatch startLatch; CountDownLatch finishLatch; int time; Task(CountDownLatch startLatch, CountDownLatch finishLatch, int time) { this.startLatch = startLatch; this.finishLatch = finishLatch; this.time = time; } @Override public void run() { try { startLatch.await();// 等待主线程通知任务开始 	System.out.println(&amp;#34;doing the task!&amp;#34;); Thread.sleep(time * 100); // 模拟任务过程 	} catch (InterruptedException e1) { // TODO Auto-generated catch block 	e1.printStackTrace(); } finally { System.out.println(&amp;#34;task done&amp;#34;); finishLatch.countDown();// 告诉主线程任务完成 	} } } CyclicBarrier // pass  </content>
    </entry>
    
     <entry>
        <title>Java-==-and-equal</title>
        <url>https://zhimoe.github.io/post/java-and-equal/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> /** * samples for == and equal() * @author hsiung * */ class TestObj { // the class for test == and equal() } public class EqualAndCompare { public static void main(String[] args) { TestObj obj1 = new TestObj(); TestObj obj2 = new TestObj(); TestObj obj3 = obj1; System.out.println(obj1 == obj2);// false , 	// == Compares references, not values 	System.out.println(obj1 == obj3);// true  System.out.println(obj1.equals(obj2));// false, 	// equal() method is derived from java.lang.Object, if not override,nor 	// in superclass,then equal behave as same as == 	// Always remember to override hashCode if you override equals so as not 	// to &amp;#34;break the contract&amp;#34;. 	// As per the API, the result returned from the hashCode() method for 	// two objects must be the same if their equals methods shows that they 	// are equivalent. The converse is not necessarily true.  String s1 = &amp;#34;haha&amp;#34;;// constant pool 	String s2 = new String(&amp;#34;haha&amp;#34;);// defined in ?heap 	System.out.println(s1 == s2);// false ,== Compares references, not 	// values, there is a exception for 	// static field in class, static String 	// in class == and equal both always 	// return *true* 	// for more infomation，see : 	// http://stackoverflow.com/questions/7520432/what-is-the-difference-between-vs-equals-in-java  System.out.println(s1.equals(s2)); // true compare the 	// value  String s3 = s2.intern();// find the same value String in constant pool 	System.out.println(s1 == s3);// true  int i1 = 2;// primitive type has no equal() method 	Integer i3 = Integer.valueOf(2); System.out.println(i1 == i3);// true, i3 automatic unboxing into int; 	System.out.println(i3.equals(i1));// auto boxing into Integer  Integer i2 = 2; System.out.println(i3.compareTo(i2)); } /* * Comparable interface, a.compareTo(b) return -1：less,0:equal,1:greater. 0 * should always be returned for objects when the .equals() comparisons * return true. All Java classes that have a natural ordering implement this * (String, Double, BigInteger, ...). * * * Comparator interface: is a util for compare two instance,then you can use * the comparator to sort array and other things * */ } </content>
    </entry>
    
     <entry>
        <title>Java-动态代理</title>
        <url>https://zhimoe.github.io/post/java-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> 好文 Java 动态代理机制分析及扩展
更深入的一篇: java设计模式-动态代理模式
优势 相比 静态代理，动态代理具有更强的 灵活性，因为它不用在我们设计实现的时候就指定 某一个代理类来代理哪一个被代理对象，我们可以把这种指定延迟到程序运行时由 JVM来实现。
实例 动态代理类接口，接口规范方法。
package angus.interview.proxy; public interface Subject { public void request(); } 需要被代理的真实的类:
package angus.interview.proxy; public class SubjectImpl implements Subject { @Override public void request() { System.out.println(&amp;#34; subject request&amp;#34;); } } 先创建一个代理类。然后利用反射创建一个用真实类加载器创建的一个对象。该对象调用request方法实际上调用的是代理类的invoke方法。
package angus.interview.proxy; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; public class DynamicProxy implements InvocationHandler { private Object target; public Object bind(Object target) { this.target = target; return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this); // 要绑定接口this(这是一个缺陷，cglib弥补了这一缺陷) 	} @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(&amp;#34;------------------before------------------&amp;#34;); Object result = method.invoke(target, args); System.out.println(&amp;#34;-------------------after------------------&amp;#34;); return result; } } static void main(){ DynamicProxy proxy = new DynamicProxy(); Subject subject= proxy.bind(SubjectImpl); subject.request(); } 和静态代理模式比较的好处
在静态代理模式时,一个真实角色必须对应一个代理角色,如果大量使用会导致类的急剧膨胀;而动态代理则不会有这个问题，我们将接口中的方法委托给invoke方法，并在invoke中实现拦截。
源码分析 参考:http://rejoy.iteye.com/blog/1627405 主要原来:生成了一个代理类的class文件。 Proxy.newProInstance()方法
public static Object newProxyInstance(ClassLoader loader,Class&amp;lt;?&amp;gt;[] interfaces,InvocationHandler h) throws IllegalArgumentException { if (h == null) { throw new NullPointerException(); } final Class&amp;lt;?&amp;gt;[] intfs = interfaces.clone(); final SecurityManager sm = System.getSecurityManager(); if (sm != null) { checkProxyAccess(Reflection.getCallerClass(), loader, intfs); } // 这里是生成class的地方  Class&amp;lt;?&amp;gt; cl = getProxyClass0(loader, intfs); // 使用我们实现的InvocationHandler作为参数调用构造方法来获得代理类的实例  try { final Constructor&amp;lt;?&amp;gt; cons = cl.getConstructor(constructorParams); final InvocationHandler ih = h; if (sm != null &amp;amp;&amp;amp; ProxyAccessHelper.needsNewInstanceCheck(cl)) { return AccessController.doPrivileged(new PrivilegedAction&amp;lt;Object&amp;gt;() { public Object run() { return newInstance(cons, ih); } }); } else { return newInstance(cons, ih); } } catch (NoSuchMethodException e) { throw new InternalError(e.toString()); } } 其中newInstance只是调用Constructor.newInstance来构造相应的代理类实例，这里重点是看getProxyClass0这个方法的实现:
private static Class&amp;lt;?&amp;gt; getProxyClass0(ClassLoader loader, Class&amp;lt;?&amp;gt;... interfaces) { // 代理的接口数量不能超过65535，这是class文件格式决定的  if (interfaces.length &amp;gt; 65535) { throw new IllegalArgumentException(&amp;#34;interface limit exceeded&amp;#34;); } // JDK对代理进行了缓存，如果已经存在相应的代理类，则直接返回，否则才会通过ProxyClassFactory来创建代理  return proxyClassCache.get(loader, interfaces); } 其中代理缓存是使用WeakCache实现的，如下
private static final WeakCache&amp;lt;ClassLoader, Class&amp;lt;?&amp;gt;[], Class&amp;lt;?&amp;gt;&amp;gt; proxyClassCache = new WeakCache&amp;lt;&amp;gt;(new KeyFactory(), new ProxyClassFactory()); 具体的缓存逻辑这里暂不关心，只需要关心ProxyClassFactory是如何生成代理类的，ProxyClassFactory是Proxy的一个静态内部类，实现了WeakCache的内部接口BiFunction的apply方法:
private static final class ProxyClassFactory implements BiFunction&amp;lt;ClassLoader, Class&amp;lt;?&amp;gt;[], Class&amp;lt;?&amp;gt;&amp;gt; { // 所有代理类名字的前缀  private static final String proxyClassNamePrefix = &amp;#34;$Proxy&amp;#34;; // 用于生成代理类名字的计数器  private static final AtomicLong nextUniqueNumber = new AtomicLong(); @Override public Class&amp;lt;?&amp;gt; apply(ClassLoader loader, Class&amp;lt;?&amp;gt;[] interfaces) { // 省略验证代理接口的代码……  String proxyPkg = null; // 生成的代理类的包名  // 对于非公共接口，代理类的包名与接口的相同  for (Class&amp;lt;?&amp;gt; intf : interfaces) { int flags = intf.getModifiers(); if (!Modifier.isPublic(flags)) { String name = intf.getName(); int n = name.lastIndexOf(&amp;#39;.&amp;#39;); String pkg = ((n == -1) ? &amp;#34;&amp;#34; : name.substring(0, n &#43; 1)); if (proxyPkg == null) { proxyPkg = pkg; } else if (!pkg.equals(proxyPkg)) { throw new IllegalArgumentException( &amp;#34;non-public interfaces from different packages&amp;#34;); } } } // 对于公共接口的包名，默认为com.sun.proxy[源码](http://hg.openjdk.java.net/jdk6/jdk6/jdk/rev/695dd7ceb9e3)  if (proxyPkg == null) { proxyPkg = ReflectUtil.PROXY_PACKAGE &#43; &amp;#34;.&amp;#34;; } // 获取计数  long num = nextUniqueNumber.getAndIncrement(); // 默认情况下，代理类的完全限定名为:com.sun.proxy.$Proxy0，com.sun.proxy.$Proxy1……依次递增  String proxyName = proxyPkg &#43; proxyClassNamePrefix &#43; num; // 这里才是真正的生成代理类的字节码的地方  byte[] proxyClassFile = ProxyGenerator.generateProxyClass( proxyName, interfaces); try { // 根据二进制字节码返回相应的Class实例  return defineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.length); } catch (ClassFormatError e) { throw new IllegalArgumentException(e.toString()); } } } ProxyGenerator是sun.misc包中的类，它没有开源，但是可以反编译来一探究竟:
public static byte[] generateProxyClass(final String var0, Class[] var1) { ProxyGenerator var2 = new ProxyGenerator(var0, var1); final byte[] var3 = var2.generateClassFile(); // 这里根据参数配置，决定是否把生成的字节码（.class文件）保存到本地磁盘，  //我们可以通过把相应的class文件保存到本地，再反编译来看看具体的实现，这样更直观  if(saveGeneratedFiles) { AccessController.doPrivileged(new PrivilegedAction() { public Void run() { try { FileOutputStream var1 = new FileOutputStream(ProxyGenerator.dotToSlash(var0) &#43; &amp;#34;.class&amp;#34;); var1.write(var3); var1.close(); return null; } catch (IOException var2) { throw new InternalError(&amp;#34;I/O exception saving generated file: &amp;#34; &#43; var2); } } }); } return var3; } saveGeneratedFiles这个属性的值从哪里来呢:
private static final boolean saveGeneratedFiles = ((Boolean)AccessController.doPrivileged( new GetBooleanAction(&amp;#34;sun.misc.ProxyGenerator.saveGeneratedFiles&amp;#34;))).booleanValue(); GetBooleanAction实际上是调用Boolean.getBoolean(propName)来获得的，而Boolean.getBoolean(propName)调用了System.getProperty(name)，所以我们可以设置sun.misc.ProxyGenerator.saveGeneratedFiles这个系统属性为true来把生成的class保存到本地文件来查看。
反编译class文件
自己创建文件写入生成的动态代理类:
package angus.interview.proxy; import java.io.FileOutputStream; import java.io.IOException; import sun.misc.ProxyGenerator; @SuppressWarnings(&amp;#34;restriction&amp;#34;) public class ProxyGeneratorUtils { public static void writeProxyClassToHardDisk(String path) { // 获取代理类的字节码 	byte[] classFile = ProxyGenerator.generateProxyClass(&amp;#34;$Proxy11&amp;#34;, SubjectImpl.class.getInterfaces()); FileOutputStream out = null; try { out = new FileOutputStream(path); out.write(classFile); out.flush(); } catch (Exception e) { e.printStackTrace(); } finally { try { out.close(); } catch (IOException e) { e.printStackTrace(); } } } } 测试我们的工具类:
package angus.interview.proxy; public class TestProxy { public static void main(String[] args) { System.getProperties().put(&amp;#34;sun.misc.ProxyGenerator.saveGeneratedFiles&amp;#34;, &amp;#34;true&amp;#34;); DynamicProxy proxy = new DynamicProxy(); Subject sproxy = (Subject) proxy.bind(new SubjectImpl()); sproxy.request(); ProxyGeneratorUtils.writeProxyClassToHardDisk(&amp;#34;$Proxy11.class&amp;#34;); } } 刷新目录，得到一个$Proxy11.class,反编译使用Java Decompiler，GUI傻瓜式，支持最新语法，编译慢，效果好:
可以看到 $Proxy11继承Proxy，并实现了Subject，同时我们写的那个InvocationHandler的子类DynamicProxy也被传递进去了。 重点看request方法的代码，只有一行  this.h.invoke(this, m3, null);其中h的引用就是DynamicProxy.
m3就是 m3 = Class.forName(&amp;quot;angus.interview.proxy.Subject&amp;quot;).getMethod(&amp;quot;request&amp;quot;, new Class[0]);
import angus.interview.proxy.Subject; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; import java.lang.reflect.UndeclaredThrowableException; public final class $Proxy11 extends Proxy implements Subject { private static Method m1; private static Method m2; private static Method m3; private static Method m0; public $Proxy11(InvocationHandler paramInvocationHandler) { super(paramInvocationHandler); } public final boolean equals(Object paramObject) { try { return ((Boolean)this.h.invoke(this, m1, new Object[] { paramObject })).booleanValue(); } catch (Error|RuntimeException localError) { throw localError; } catch (Throwable localThrowable) { throw new UndeclaredThrowableException(localThrowable); } } public final String toString() { try { return (String)this.h.invoke(this, m2, null); } catch (Error|RuntimeException localError) { throw localError; } catch (Throwable localThrowable) { throw new UndeclaredThrowableException(localThrowable); } } public final void request() { try { this.h.invoke(this, m3, null); return; } catch (Error|RuntimeException localError) { throw localError; } catch (Throwable localThrowable) { throw new UndeclaredThrowableException(localThrowable); } } public final int hashCode() { try { return ((Integer)this.h.invoke(this, m0, null)).intValue(); } catch (Error|RuntimeException localError) { throw localError; } catch (Throwable localThrowable) { throw new UndeclaredThrowableException(localThrowable); } } static { try { m1 = Class.forName(&amp;#34;java.lang.Object&amp;#34;).getMethod(&amp;#34;equals&amp;#34;, new Class[] { Class.forName(&amp;#34;java.lang.Object&amp;#34;) }); m2 = Class.forName(&amp;#34;java.lang.Object&amp;#34;).getMethod(&amp;#34;toString&amp;#34;, new Class[0]); m3 = Class.forName(&amp;#34;angus.interview.proxy.Subject&amp;#34;).getMethod(&amp;#34;request&amp;#34;, new Class[0]); m0 = Class.forName(&amp;#34;java.lang.Object&amp;#34;).getMethod(&amp;#34;hashCode&amp;#34;, new Class[0]); return; } catch (NoSuchMethodException localNoSuchMethodException) { throw new NoSuchMethodError(localNoSuchMethodException.getMessage()); } catch (ClassNotFoundException localClassNotFoundException) { throw new NoClassDefFoundError(localClassNotFoundException.getMessage()); } } } </content>
    </entry>
    
     <entry>
        <title>Java-注解和注解处理器</title>
        <url>https://zhimoe.github.io/post/java-%E6%B3%A8%E8%A7%A3%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> 注解处理 注解是jdk1.5出现的,但是自定义处理注解的功能是1.6才有的.Element等关于注解源码抽象的支持类都是1.6出现的. 关于注解的定义就不说了,主要说说注解处理 本文根据以下资料并进行部分修改： JavaAnnotationProcessing
基本知识 annotation processing integrated into javac compiler
– since Java 6.0; known as pluggable annotation processing
– compiler automatically searches for annotation processors
– unless disabled with -proc:none option for javac
– processors can be specified explicitly with -processor  option for javac or -cp processor.jar,processor.jar include /META-INF/service/javax.annotation.processing.Processor file and your processor decalared in file;
implement a processor class
– must implement Processor interface
– typically derived from AbstractProcessor
– new package javax.annotation.processing
同时自定义注解处理器需要指定注解选项： specify supported annotation &#43; options
– by means of annotations: @SupportedAnnotationTypes @SupportedOptions @SupportedSourceVersion
编译器编译源码是会有很多轮(round)：
1st round：编译器得到所有的注解-获取所有的注解处理器-进行match并process,如果匹配的处理器中process方法的返回值是true,表示该注解被 claim,不再查询其他处理器.如果是false,接着查询匹配处理器处理,所以注解处理器在META-INF/services/javax.annotation.processing.Processor声明顺序是有关系的&amp;ndash; 所有的注解都被claim后,注解处理完成.
如果注解处理器产生新的java文件,那么新的一轮处理开始,前面被调用的那些处理器又被调用,直到没有java文件产生.
最后一轮又要调用一遍所有处理器,完成他们的各自工作.
最最后,编译器编译源码和注解处理器生成的源码.
还有一个很重要的类AbstractProcessor： 有一个引用processingEnv 提供了两个重要工具类：
– Filer for creation of new source, class, or auxiliary files
– Messager  to report errors, warnings, and other notices
此外，一个产生java文件的重要方法：
FileObject sourceFile = processingEnv.getFiler().createSourceFile(beanClassName); process() method takes 2 arguments: Set&amp;lt;? extends TypeElement&amp;gt; annotations – the annotation types requested to be processed – subset of the supported annotations RoundEnvironment roundenv – environment for information about the current and prior round – supplies elements annotated with a given annotation or all root elements in the source 一个自定义的注解处理器格式如下：
@SupportedAnnotationTypes({&amp;#34;Property&amp;#34;}) @SupportedSourceVersion(SourceVersion.RELEASE_6) public class PropertyAnnotationProcessor extends AbstractProcessor { public boolean process(Set&amp;lt;? extends TypeElement&amp;gt; annotations, RoundEnvironment env) { process the source file elements using the mirror API } } jdk1.6 对注解的处理支持建立在对源码的抽象,Element是javax.lang.model.*中定义的,各种Element是对源码抽象数据结构,如：
package com.example;	// PackageElement public class Foo {	// TypeElement  private int a; // VariableElement  private Foo other; // VariableElement  public Foo () {} // ExecuteableElement  } TypeElement不能提供父类的信息,如果需要这些信息,需要从Element中得到TypeMirror.TypeMirror::element.asType()
实例： 动手写注解处理器：3个类,一个定义注解Comparator.java,一个使用注解的类Name.java,一个处理注解MyProcessor.java.
我将定义一个注解@Comparator,使用在方法上,被注释的方法能够返回一个Comparator.
一个注解处理器,解析所有被注释的方法,为每一个方法产生一个Comparator类.
！！！注意,这里的内容和连接中资料的已经不一样了,资料里给的process方法并不能产生比较器类.
给出注解定义前看看注解怎么使用：
// ./Name.java // ./ 表示当前命令行文件夹,后面所有的javc命令都以这个文件夹为准 package java.interview.annotation; public class Name { private final String first; private final String last; public Name(String f, String l) { first = f; last = l; } @Comparator(&amp;#34;NameByFirstNameComparator&amp;#34;) public int compareToByFirstName(Name other) { if (this == other) return 0; int result; if ((result = this.first.compareTo(other.first)) != 0) return result; return this.last.compareTo(other.last); } } 其中被注解注释的方法将产生一个NameByFirstNameComparator.java文件：
// ./angus/initerview/annotation/NameByFirstNameComparator.java  public class NameByFirstNameComparator implements java.util.Comparator&amp;lt;Name&amp;gt; { public int compare(Name o1, Name o2) { return o1.compareToByFirstName(o2); } public boolean equals(Object other) { return this.getClass() == other.getClass(); } } 我们定义注解：
// ./Comparator.java package angus.interview.annotation; import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Documented @Target(ElementType.METHOD) @Retention(RetentionPolicy.SOURCE) public @interface Comparator { String value(); } 接下来定义我们的注解处理器,有详细注解,特别注意generate源码中的空格和分号不要弄丢了：
package angus.interview.annotation; import java.io.IOException; import java.io.PrintWriter; import java.util.Set; import javax.annotation.processing.AbstractProcessor; import javax.annotation.processing.RoundEnvironment; import javax.annotation.processing.SupportedAnnotationTypes; import javax.annotation.processing.SupportedSourceVersion; import javax.lang.model.SourceVersion; import javax.lang.model.element.Element; import javax.lang.model.element.ExecutableElement; import javax.lang.model.element.TypeElement; import javax.lang.model.type.PrimitiveType; import javax.lang.model.type.TypeKind; import javax.lang.model.type.TypeMirror; import javax.tools.Diagnostic; import javax.tools.FileObject; @SupportedAnnotationTypes({ &amp;#34;angus.interview.annotation.Comparator&amp;#34; }) @SupportedSourceVersion(SourceVersion.RELEASE_8) public class MyProcessor extends AbstractProcessor { @Override public boolean process(Set&amp;lt;? extends TypeElement&amp;gt; annotations, RoundEnvironment roundEnv) { for( final Element element: roundEnv.getElementsAnnotatedWith( Comparator.class ) ) { if(element instanceof ExecutableElement){ ExecutableElement m = (ExecutableElement) element; TypeElement className = (TypeElement)m.getEnclosingElement(); Comparator a = m.getAnnotation(Comparator.class); if (a != null) { TypeMirror returnType = m.getReturnType(); if (!(returnType instanceof PrimitiveType) || ((PrimitiveType) returnType).getKind() != TypeKind.INT) { processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, &amp;#34;@Comparator can only be applied to methods that return int&amp;#34;); continue; } // prepare for java file generation 	// t m a mean ? 	String comparatorClassName = a.value(); String comparetoMethodName = m.getSimpleName().toString(); String theProcessedClassesName = className.getQualifiedName().toString(); try { writeComparatorFile(theProcessedClassesName, comparatorClassName, comparetoMethodName); } catch (IOException e) { e.printStackTrace(); } } } } return true;// claimed now,no need next processor 	} /* * * public class NameByFirstNameComparator implements java.util.Comparator&amp;lt;Name&amp;gt; { * public int compare(Name o1, Nameo2) { return o1.compareToByFirstName(o2); } * * public boolean equals(Object other) { return this.getClass() == other.getClass(); } } */ //!!!careful with spaces and &amp;#34;;&amp;#34;!!! 	private void writeComparatorFile(String fullClassName, String comparatorClassName, String compareToMethodName) throws IOException { int i = fullClassName.lastIndexOf(&amp;#34;.&amp;#34;); String packageName = fullClassName.substring(0, i); FileObject sourceFile = processingEnv.getFiler().createSourceFile(packageName &#43; &amp;#34;.&amp;#34; &#43; comparatorClassName); if (sourceFile == null) { System.out.println(&amp;#34;create source file failed&amp;#34;); } PrintWriter out = new PrintWriter(sourceFile.openWriter()); if (i &amp;gt; 0) { out.println(&amp;#34;package &amp;#34; &#43; packageName &#43; &amp;#34;;&amp;#34;); } String parametrizedType = fullClassName.substring(i &#43; 1);//!! 	out.println( &amp;#34;public class &amp;#34; &#43; comparatorClassName &#43; &amp;#34; implements java.util.Comparator&amp;lt;&amp;#34; &#43; parametrizedType &#43; &amp;#34;&amp;gt; {&amp;#34;); out.println(); out.println(&amp;#34;public int compare( &amp;#34; &#43; parametrizedType &#43; &amp;#34; o1 , &amp;#34; &#43; parametrizedType &#43; &amp;#34; o2 ){&amp;#34;); out.println(&amp;#34;return o1.&amp;#34; &#43; compareToMethodName &#43; &amp;#34;(o2);&amp;#34;); out.println(&amp;#34;}&amp;#34;); out.println(); out.println(); out.println(&amp;#34;public boolean equals(Object other) {&amp;#34;); out.println(&amp;#34;return this.getClass() == other.getClass();&amp;#34;); out.println(&amp;#34;}&amp;#34;); out.println(&amp;#34;}&amp;#34;); out.close(); } } 测试处理器 两种方法,
一种是使用 -cp：
在项目的根目录中（pom.xml同级目录）新建META-INF文件夹,并在里面新建services文件夹,再在里面新建一个文件 javax.annotation.processing.Processor,并在该文件中注册我们的处理器,第一行写入：angus.interview.annotation.MyProcessor. 然后用eclipse将项目export得到一个jar包,jar必须包含target文件夹（处理器class文件）和META-INF文件夹（注册处理器）.这里将jar包命名为process.jar. 复制jar包到Name.java目录中,并在该目录打开终端,输入：
 javac -cp process.jar Name.java
 将会得到Name.class文件和一个angus文件夹,最里面是NameByFirstNameComparator.java和NameByFirstNameComparator.class. 打开NameByFirstNameComparator.java,发现内容和上面给出的一模一样.
第二种方法是使用-processor参数,但是还没搞懂MyProcessor.class应该放在哪里.暂时先到这.
</content>
    </entry>
    
     <entry>
        <title>单例模式和序列化</title>
        <url>https://zhimoe.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%BA%8F%E5%88%97%E5%8C%96/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> 参考资料
饱汉式 public class Singleton { private static Singleton instance = null private Singleton (){} public static Singleton getInstance() { if(instance == null) instance = new Singleton(); return instance; } } //饱汉式，使用时创建  饿汉式 //加载时创建对象 static public class Singleton { private Singleton instance = null; static { instance = new Singleton(); } private Singleton (){} public static Singleton getInstance() { return this.instance; } } 静态内部类 public class Singleton { private Singleton (){} private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } public static final Singleton getInstance() { return SingletonHolder.INSTANCE; } } //这个比较好，线程安全，也达到了延迟加载效果。 枚举类 //这个是最好的 这种方式是Effective Java作者Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒啊 public enum Singleton { INSTANCE; public void whateverMethod() { } } 访问这个单例 Singleton.INSTANCE 双重校验锁 其实是不安全的，多线程开销很大，甚至死锁。原因在于指令重排序。
public class Singleton { private volatile static Singleton singleton; private Singleton (){} public static Singleton getSingleton() { if (singleton == null) { synchronized (Singleton.class) { if (singleton == null) { singleton = new Singleton(); } } } return singleton; } } 序列化 使用静态内部类举例，只要提供一个readResolve方法
public class Singleton { private Singleton (){} private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } public static final Singleton getInstance() { return SingletonHolder.INSTANCE; } private Object readResolve() throws ObjectStreamException{ return SingletonHolder.INSTANCE; } } 无论是实现Serializable接口，或是Externalizable接口，当从I/O流中读取对象时，readResolve()方法都会被调用到。实际上就是用readResolve()中返回的对象直接替换在反序列化过程中创建的对象，而被创建的对象则会被垃圾回收掉。
</content>
    </entry>
    
     <entry>
        <title>面试题-类加载过程和子类重写父类方法的调用</title>
        <url>https://zhimoe.github.io/post/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%92%8C%E5%AD%90%E7%B1%BB%E9%87%8D%E5%86%99%E7%88%B6%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>java</tag><tag>code</tag>
        </tags>
        <content type="html"> 最近一道非常火的携程面试题:
public class Base { private String baseName = &amp;#34;base&amp;#34;; public Base() { callName(); } public void callName() { System.out.println(baseName); } static class Sub extends Base { private String baseName = &amp;#34;sub&amp;#34;; public void callName() { System.out.println(baseName) ; } } public static void main(String[] args) { Base b = new Sub();//输出？  } } 我的理解： 先理解两个方法:
class 的(clinit)方法和(init)方法不同：这两个方法一个是虚拟机在装载一个类初始化的时候调用的（&amp;lt;clinit&amp;gt;）。另一个是在类实例化时调用的（&amp;lt;init&amp;gt;）。
在加载类时需要类的初始化，JVM对应的字节码方法是&amp;lt;clinit&amp;gt;，这个方法会初始化static变量和执行static{}代码块，按源码定义的顺序执行。注意：如果static{}代码块中引用了static 变量，那么一定要使用之前定义static变量。ide会提示的。
这时，class的其他成员变量和方法都没有被执行。变量的内存都已经分配，值为null或者0（基本类型），false(布尔类型)。 当创建一个类的实例时，此时会调用&amp;lt;init&amp;gt;方法,这个方法会初始化非static变量和执行{}代码块。注意，这两个也是按源码顺序执行的。所以代码块如果要使用非static变量，一定要先定义。同样ide一般会提示的。但是要明白这个顺序。
以上说的执行顺序通过eclipse调试可以确定是正确的。
所以组合起来 创建一个类的实例对象需要下面的顺序：
父类P static代码块和static变量初始化 -&amp;gt; 子类S static代码块和static变量初始化 -&amp;gt; 父类P 非static代码块和非static变量初始化 -&amp;gt; 父类P构造函数 -&amp;gt; 子类S非static代码块和非static变量初始化 -&amp;gt; 子类S构造函数 回到面试题：我们看看创建一个实例对象的调用栈： 可以看到依次进入16， 8， 21行代码:
16行： static class Sub extends Base
8行： callName();//Base()构造函数中
21行： System.out.println (baseName) ;//Sub的callName()
根据前面的分析，这个类没有static代码块和static变量，也没有代码块。所以第一个执行的是父类非静态成员的base=&amp;quot;base&amp;rdquo;;接着执行构造函数Base();这里到了魔法的一步，调用的callName()是子类（21行）的方法。这个行为就是动态单分派。详细资料看最后。由于子类的非static变量初始化没有完成，所有子类中的base变量是null。输出也是null。
！！！所以，不要再构造函数中调用可能会被子类覆盖的方法。
有的面试题会出现陷阱:在调用callName()方法改为this.callName(). 其实都是一样的。在调用Base构造函数时没有Base的实例对象，调用者其实还是Base$Sub这个类。
还有一个进阶版：
public class Basic { public void add(int i) { System.out.println(&amp;#34;Basic add&amp;#34;); } public Basic() { add(&amp;#39;a&amp;#39;); } public static void main(String[] args) { Basic a = new A(); B b = new B(); } } class A extends Basic { public void add(int i) { System.out.println(&amp;#34;A add&amp;#34;); } } class B extends Basic { public void add(char i) { System.out.println(&amp;#34;B add&amp;#34;); } } 不仅考察单分派，还有重载的静态多分派。 进阶版问题的解释需以下知识点：
java的静态分派和动态单分派资料：
CSDN-类加载机制-深入java虚拟机 读书笔记
方法分派
重载是静态多分派，编译时期确定。
覆盖是动态单分派，运行时通过实际类型绑定。 静态多分派:
静态分派 意思是 所有依赖静态类型来定位方法执行版本的分派过程就叫做静态分派，静态分派最典型的应用就是方法重载。
动态单分派:
动态单分派 意思是 根据运行期实际类型确定方法执行版本的分派过程叫做动态分派，动态分派最典型的应用就是方法重写。
同时理解，动态单分派就是多态，java的面向接口编程的根基就是多态。
</content>
    </entry>
    
     <entry>
        <title>Java新手如何学习SpringMVC框架</title>
        <url>https://zhimoe.github.io/post/how-do-newbie-learn-spring/</url>
        <categories>
          <category>编程</category>
        </categories>
        <tags>
          <tag>code</tag><tag>spring</tag><tag>java</tag>
        </tags>
        <content type="html"> 知乎回答备份，原答案写于15年。
6,404 人赞同了该回答 4年之后感觉自己当年写的真好。O(∩_∩)O哈哈~
评论里面有人写到现在都用spring boot，个人觉得boot 只要搞清楚一个autoconfig就懂了小半了。
学习框架的同时还是需要针对性地深入学习一些Java基础，例如反射，CDI， JDBC，Class类和MySQL 以及 http（nginx的使用）。求精不求多，新手也不要搞什么mongodb，etcd，zk这些，有了前面的基础，后面上手使用新东西会很快的。 举个例子，很多人学习mybatis的使用，但是JDBC只会一个Class.forName&#43;Statement，显然也不知道mybatis的好处和底层的。
还是要多写，不要复制，单个项目去掉复制代码还有5000行的话，其实就能够理解到课本上的“高内聚，低耦合”是什么意思了。
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;原回答&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;
1 想说说自己Spring的学习路程。课余自学Spring将近一年了，还是不得其道。起初是去年（14年）暑假学习了一下JSP，并没有深入理解，所以导致学习Spring时对着书本写一些demo，感觉自己理解了，其实并不知道内部时什么原理，出了问题不停的百度，一个小问题好几天解决不了。
学习一种框架最先需要知道的是为什么需要使用这个框架，任何一个框架的发明都是为了解决编程中的一些痛点，打开任何一本hibernate或者其他框架的入门书，第一章都是介绍框架的理念和优势。如果需要理解这些理念和优势，那么你需要知道不使用这个框架之前是怎么处理的，才能知道框架做了一些什么事情。
针对Spring的学习，第一步就是了解没有spring和struts框架之前的Java web是如何开发的。你会知道那时候使用JSP和Servlet。然后你就知道，Servlet是一个规范，那在Spring里面，Servlet去哪了？ 这时候你知道了DispatchServlet。然后你会了解到IoC和AOP.
 很多新的技术只不过是引入了新的编程元素对原来技术进行了封装。
 2 其实Java Web开发，spring不是第一步，首先需要理解的是 HTTP协议。 chrome的DevTools和curl，postman要有基本使用。
还要知道服务器发送给浏览器的响应是没有没有JS，CSS和图片等外部资源的，浏览器在解析响应时才会再次请求这些资源，这里会出现一些静态资源请求不到的问题，SpringMVC是怎么配置的？还有chrome并发请求数量限制,如何合并雪碧图提高网页加载速度等知识点,属于http知识了.
接下来，学习Servlet和JSP。这个步骤不是可以跳过的，现在流行的框架Spring MVC和Struts2其实都是基于Servlet的，只有深入理解了Servlet才能理解后面的新技术。
下面几个知识点可以检测你是否理解了Servlet：
1、什么是ServletContext，和tomcat等web容器的关系时什么？Servlet 工作原理解析
简单的说，我们在浏览器点击链接和按钮产生的消息不是发送给Servlet的，而是发送给web容器的(在JSP出现之前，web容器也叫Servlet容器)，web容器接收消息后不知道怎么处理，转交给我们编写的Servlet处理，那么web容器怎么和Servlet交流呢？于是就出现了Servlet接口，接口是定义一种规范的良好表达形式。 只要我们编写的Java类符合Servlet规范，那么就能被Web容器识别并被容器管理。
2、什么是Session？Session在实际工程中的应用场景。以及@SessionAttribute注解的局限性。
3、JSP是面向服务器的，它并不知道浏览器是什么鬼，是我们在写JSP时预设客户端是浏览器，JSP就是一个Servlet。JSP的常用对象和指令。
4、JSP的中文编码乱码有几种情况？各自的解决方法？提示： JSP文件的编码，浏览器的解析编码，GET请求的编码，POST的编码。
5、Servlet是一种接口规范，其中请求和响应是Servlet容器通过向方法的参数赋值HttpServletRequest或者HttpServletResponse传递的。在Struts1里面，将doGet()方法里的响应移到返回值里。在Struts2里则:
 在Controller中彻底杜绝引入HttpServletRequest或者HttpServletResponse这样的原生Servlet对象。 同时将请求参数和响应数据都从响应方法中剥离到了Controller中的属性变量。
 这是一个很大的技术改造，也造成了Struts2的盛行。Spring MVC走的是中间路线，Spring的2.0.8之前的版本甚至直接使用Servlet的doGet的。Spring MVC现在开始流行主要还是因为Schema xml的精简和基于注解的配置。所以这里出现了新的知识点：Schema Based XML的相关知识和Java5引入的注解原理。
书籍：推荐许令波的书《深入分析Java Web技术内幕(修订版)》和计文柯的《深入理解spring技术内幕》，特别是第二本，对spring的分析很是彻底。
</content>
    </entry>
    
</search>